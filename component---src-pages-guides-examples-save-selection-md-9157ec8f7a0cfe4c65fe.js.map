{"version":3,"file":"component---src-pages-guides-examples-save-selection-md-9157ec8f7a0cfe4c65fe.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,oCAAkC,qCAE1CA,EAAAA,EAAAA,KAAA,wIACAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,yCAA0CH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvE,KAAQ,sDAAoD,aAC1C,oBACtBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0BAA2BH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,mBACrEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,wBAAyBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UAAQ,QAAkB,SACjHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,2CAGvBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,k8EA0EtC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/examples/save_selection.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"save-and-restore-layer-selection\"\n    }}>{`Save and restore layer selection`}</h1>\n    <p>{`This example shows how to store a selection of layer or effects in a project and restore it when the project is re-opened.`}</p>\n    <hr></hr>\n    <p>{`To use this example:`}</p>\n    <blockquote>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`Go to your Python plugin folder (see `}<a parentName=\"li\" {...{\n            \"href\": \"/painter-python-api/guides/creating-python-plugin/\"\n          }}>{`this page`}</a>{` to know where)`}</li>\n        <li parentName=\"ol\">{`Create a folder named `}<strong parentName=\"li\">{`blending_mode`}</strong></li>\n        <li parentName=\"ol\">{`Create a file named `}<strong parentName=\"li\"><strong parentName=\"strong\">{`init`}</strong>{`.py`}</strong></li>\n        <li parentName=\"ol\">{`Copy the code below inside the file.`}</li>\n      </ol>\n    </blockquote>\n    <hr></hr>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter as sp\n\nPROJECT_READY = False\n\ndef OnStackChange( Arg ) :\n    if not sp.project.is_in_edition_state() or not PROJECT_READY :\n        return\n\n    Stack = sp.textureset.get_active_stack()\n    Layers = sp.layerstack.get_selected_nodes( Stack )\n    IDs = []\n\n    for Layer in Layers :\n        IDs.append( Layer.uid() )\n\n    Metadata = sp.project.Metadata( \"LayerStackSelection\" )\n    Metadata.set( \"Selection\", IDs )\n\n    if len(IDs) == 1 and (\n        Layer.get_type() == sp.layerstack.NodeType.PaintLayer \\\\\n    or  Layer.get_type() == sp.layerstack.NodeType.FillLayer \\\\\n    or  Layer.get_type() == sp.layerstack.NodeType.InstanceLayer \\\\\n    or  Layer.get_type() == sp.layerstack.NodeType.GroupLayer ) :\n        Type = sp.layerstack.get_selection_type( Layers[0] )\n\n        Metadata.set(\n            \"SelectionType\",\n            sp.layerstack.SelectionType( Type )\n        )\n\ndef OnEditionStart( Arg ) :\n    Metadata = sp.project.Metadata( \"LayerStackSelection\" )\n    IDs = Metadata.get( \"Selection\" )\n    Nodes = []\n\n    if IDs :\n        for ID in IDs :\n            Nodes.append( sp.layerstack.Node(ID) )\n\n        sp.layerstack.set_selected_nodes( Nodes )\n\n        if len(IDs) == 1 and (\n            Nodes[0].get_type() == sp.layerstack.NodeType.PaintLayer \\\\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.FillLayer \\\\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.InstanceLayer \\\\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.GroupLayer )  :\n            Type = Metadata.get( \"SelectionType\" )\n            sp.layerstack.set_selection_type( Nodes[0], int(Type) )\n\n    # Need to be done at the end because\n    # of concurrency between events\n    global PROJECT_READY\n    PROJECT_READY = True\n\ndef OnEditionStop( Arg ) :\n    global PROJECT_READY\n    PROJECT_READY = False\n\ndef start_plugin():\n    sp.event.DISPATCHER.connect( sp.event.ProjectEditionEntered, OnEditionStart )\n    sp.event.DISPATCHER.connect( sp.event.ProjectEditionLeft, OnEditionStop )\n    sp.event.DISPATCHER.connect( sp.event.LayerStacksModelDataChanged, OnStackChange )\n\ndef close_plugin():\n    sp.event.DISPATCHER.disconnect( sp.event.ProjectEditionEntered, OnEditionStart )\n    sp.event.DISPATCHER.disconnect( sp.event.ProjectEditionLeft, OnEditionStop )\n    sp.event.DISPATCHER.disconnect( sp.event.LayerStacksModelDataChanged, OnStackChange )\n\nif __name__ == \"__main__\":\n    start_plugin()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}