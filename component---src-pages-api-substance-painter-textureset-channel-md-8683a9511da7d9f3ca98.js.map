{"version":3,"file":"component---src-pages-api-substance-painter-textureset-channel-md-8683a9511da7d9f3ca98.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/textureset/channel.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Channel class — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"channel-class\"\n    }}>{`Channel class`}</h1>\n    <blockquote>\n    </blockquote>\n    <hr></hr>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`class`}</em>{` substance_painter.textureset.Channel(`}<em parentName=\"p\">{`channel_id: int | None = None`}</em>{`)\nA Substance 3D Painter channel.`}</p>\n      <p parentName=\"blockquote\">{`A channel can be one of the predefined types (BaseColor, Specular, Roughness,\netc.) or a user defined type (User0 to User7), corresponding to the material.\nThe channel belongs to a stack. The stack can have one or more of them, but it\ncan have only one channel of each `}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}><inlineCode parentName=\"a\">{`ChannelType`}</inlineCode></a>{`.`}</p>\n      <p parentName=\"blockquote\">{`Example`}</p>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-python\"\n        }}>{`import substance_painter.textureset\n\n# Get the unnamed stack of \"TextureSetName\":\npaintable_stack = substance_painter.textureset.Stack.from_name(\"TextureSetName\")\n\n# Get the channel \"BaseColor\" of that stack:\nbase_color_channel = paintable_stack.get_channel(\n    substance_painter.textureset.ChannelType.BaseColor)\n\n# Print the color format and bit depth of the base color channel:\nprint(\"The channel format uses {0} {1}.\".format(\n    \"RGB\" if base_color_channel.is_color() else \"L\",\n    base_color_channel.bit_depth()))\n\n# Change the format and bit depth of the base color channel:\nbase_color_channel.edit(\n    channel_format = substance_painter.textureset.ChannelFormat.RGB16)\n\n`}</code></pre>\n      <p parentName=\"blockquote\">{`format() → `}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelFormat\",\n          \"title\": \"substance_painter.textureset.ChannelFormat\"\n        }}>{`ChannelFormat`}</a>{`\nGet the channel format. The format indicates both if the channel is color\nor grayscale, its dynamic range, its bits per component, and if the storage\nis linear or sRGB.`}</p>\n      <p parentName=\"blockquote\">{`Returns:\nThis channel format.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\n`}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelFormat\",\n          \"title\": \"substance_painter.textureset.ChannelFormat\"\n        }}>{`ChannelFormat`}</a></p>\n      <p parentName=\"blockquote\">{`label() → str\nGet the user label for User channels (User0 to User7).`}</p>\n      <p parentName=\"blockquote\">{`Returns:\nThis channel user label. This is the empty string for non User channels.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\nstr`}</p>\n      <p parentName=\"blockquote\">{`See also`}</p>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"#substance_painter.textureset.Channel.type\",\n          \"title\": \"substance_painter.textureset.Channel.type\"\n        }}><inlineCode parentName=\"a\">{`Channel.type()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}><inlineCode parentName=\"a\">{`ChannelType`}</inlineCode></a>{`.`}</p>\n      <p parentName=\"blockquote\">{`is_color() → bool\nCheck if the channel is in color or grayscale format.`}</p>\n      <p parentName=\"blockquote\">{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the channel format is a color format.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\nbool`}</p>\n      <p parentName=\"blockquote\">{`is_floating() → bool\nCheck if the channel is in floating point or normalized fixed point format.`}</p>\n      <p parentName=\"blockquote\">{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the channel format is a floating point format.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\nbool`}</p>\n      <p parentName=\"blockquote\">{`bit_depth() → int\nGet the number of bits per component.`}</p>\n      <p parentName=\"blockquote\">{`Returns:\nThe channel bit depth per component.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\nint`}</p>\n      <p parentName=\"blockquote\">{`type() → `}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}>{`ChannelType`}</a>{`\nGet the channel type.`}</p>\n      <p parentName=\"blockquote\">{`Returns:\nThis channel type.`}</p>\n      <p parentName=\"blockquote\">{`Return type:\n`}<a parentName=\"p\" {...{\n          \"href\": \"index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}>{`ChannelType`}</a></p>\n      <p parentName=\"blockquote\">{`See also`}</p>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"#substance_painter.textureset.Channel.label\",\n          \"title\": \"substance_painter.textureset.Channel.label\"\n        }}><inlineCode parentName=\"a\">{`Channel.label()`}</inlineCode></a>{`.`}</p>\n      <p parentName=\"blockquote\">{`edit(`}<em parentName=\"p\">{`channel_format: `}<a parentName=\"em\" {...{\n            \"href\": \"index.html#substance_painter.textureset.ChannelFormat\",\n            \"title\": \"substance_painter.textureset.ChannelFormat\"\n          }}>{`ChannelFormat`}</a></em>{`, `}<em parentName=\"p\">{`label: str | None = None`}</em>{`) → None\nChange the channel format and label.`}</p>\n      <p parentName=\"blockquote\">{`Parameters:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><strong parentName=\"li\">{`channel_format`}</strong>{` (`}<a parentName=\"li\" {...{\n            \"href\": \"index.html#substance_painter.textureset.ChannelFormat\",\n            \"title\": \"substance_painter.textureset.ChannelFormat\"\n          }}><em parentName=\"a\">{`ChannelFormat`}</em></a>{`) – The new texture format of the channel.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`label`}</strong>{` (`}<em parentName=\"li\">{`str**,`}</em>{` `}<em parentName=\"li\">{`optional`}</em>{`) – Label of the channel in case of User channel as type.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`Raises:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n            \"title\": \"substance_painter.exception.ProjectError\"\n          }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If there is no stack labeled `}<inlineCode parentName=\"li\">{`stack_id`}</inlineCode>{` in this Texture Set.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If there is no channel of type `}<inlineCode parentName=\"li\">{`channel_type`}</inlineCode>{` in this Texture Set.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If a label was provided but `}<inlineCode parentName=\"li\">{`channel_type`}</inlineCode>{` is not a user type.\nStandard channel types have fixed labels.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the channel is invalid.`}</li>\n      </ul>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}