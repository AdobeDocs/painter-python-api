"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7324],{48993:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return c}});var a=n(87462),r=n(63366),o=(n(15007),n(64983)),l=n(91515),m=["components"],p={},s={_frontmatter:p},i=l.Z;function c(e){var t=e.components,n=(0,r.Z)(e,m);return(0,o.mdx)(i,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Channel class — Substance 3D Painter Python API 0.2.11 documentation"),(0,o.mdx)("h1",{id:"channel-class"},"Channel class"),(0,o.mdx)("blockquote",null),(0,o.mdx)("hr",null),(0,o.mdx)("blockquote",null,(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("em",{parentName:"p"},"class")," substance_painter.textureset.Channel(",(0,o.mdx)("em",{parentName:"p"},"channel_id: int | None = None"),")\nA Substance 3D Painter channel."),(0,o.mdx)("p",{parentName:"blockquote"},"A channel can be one of the predefined types (BaseColor, Specular, Roughness,\netc.) or a user defined type (User0 to User7), corresponding to the material.\nThe channel belongs to a stack. The stack can have one or more of them, but it\ncan have only one channel of each ",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},(0,o.mdx)("inlineCode",{parentName:"a"},"ChannelType")),"."),(0,o.mdx)("p",{parentName:"blockquote"},"Example"),(0,o.mdx)("pre",{parentName:"blockquote"},(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.textureset\n\n# Get the unnamed stack of "TextureSetName":\npaintable_stack = substance_painter.textureset.Stack.from_name("TextureSetName")\n\n# Get the channel "BaseColor" of that stack:\nbase_color_channel = paintable_stack.get_channel(\n    substance_painter.textureset.ChannelType.BaseColor)\n\n# Print the color format and bit depth of the base color channel:\nprint("The channel format uses {0} {1}.".format(\n    "RGB" if base_color_channel.is_color() else "L",\n    base_color_channel.bit_depth()))\n\n# Change the format and bit depth of the base color channel:\nbase_color_channel.edit(\n    channel_format = substance_painter.textureset.ChannelFormat.RGB16)\n\n')),(0,o.mdx)("p",{parentName:"blockquote"},"format() → ",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat"),"\nGet the channel format. The format indicates both if the channel is color\nor grayscale, its dynamic range, its bits per component, and if the storage\nis linear or sRGB."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\nThis channel format."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\n",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat")),(0,o.mdx)("p",{parentName:"blockquote"},"label() → str\nGet the user label for User channels (User0 to User7)."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\nThis channel user label. This is the empty string for non User channels."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\nstr"),(0,o.mdx)("p",{parentName:"blockquote"},"See also"),(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("a",{parentName:"p",href:"#substance_painter.textureset.Channel.type",title:"substance_painter.textureset.Channel.type"},(0,o.mdx)("inlineCode",{parentName:"a"},"Channel.type()")),",\n",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},(0,o.mdx)("inlineCode",{parentName:"a"},"ChannelType")),"."),(0,o.mdx)("p",{parentName:"blockquote"},"is_color() → bool\nCheck if the channel is in color or grayscale format."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\n",(0,o.mdx)("inlineCode",{parentName:"p"},"True")," if the channel format is a color format."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\nbool"),(0,o.mdx)("p",{parentName:"blockquote"},"is_floating() → bool\nCheck if the channel is in floating point or normalized fixed point format."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\n",(0,o.mdx)("inlineCode",{parentName:"p"},"True")," if the channel format is a floating point format."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\nbool"),(0,o.mdx)("p",{parentName:"blockquote"},"bit_depth() → int\nGet the number of bits per component."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\nThe channel bit depth per component."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\nint"),(0,o.mdx)("p",{parentName:"blockquote"},"type() → ",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},"ChannelType"),"\nGet the channel type."),(0,o.mdx)("p",{parentName:"blockquote"},"Returns:\nThis channel type."),(0,o.mdx)("p",{parentName:"blockquote"},"Return type:\n",(0,o.mdx)("a",{parentName:"p",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},"ChannelType")),(0,o.mdx)("p",{parentName:"blockquote"},"See also"),(0,o.mdx)("p",{parentName:"blockquote"},(0,o.mdx)("a",{parentName:"p",href:"#substance_painter.textureset.Channel.label",title:"substance_painter.textureset.Channel.label"},(0,o.mdx)("inlineCode",{parentName:"a"},"Channel.label()")),"."),(0,o.mdx)("p",{parentName:"blockquote"},"edit(",(0,o.mdx)("em",{parentName:"p"},"channel_format: ",(0,o.mdx)("a",{parentName:"em",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat")),", ",(0,o.mdx)("em",{parentName:"p"},"label: str | None = None"),") → None\nChange the channel format and label."),(0,o.mdx)("p",{parentName:"blockquote"},"Parameters:"),(0,o.mdx)("ul",{parentName:"blockquote"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"channel_format")," (",(0,o.mdx)("a",{parentName:"li",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},(0,o.mdx)("em",{parentName:"a"},"ChannelFormat")),") – The new texture format of the channel."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"label")," (",(0,o.mdx)("em",{parentName:"li"},"str**,")," ",(0,o.mdx)("em",{parentName:"li"},"optional"),") – Label of the channel in case of User channel as type.")),(0,o.mdx)("p",{parentName:"blockquote"},"Raises:"),(0,o.mdx)("ul",{parentName:"blockquote"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"../exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,o.mdx)("strong",{parentName:"a"},"ProjectError"))," – If no project is opened."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"ValueError")," – If there is no stack labeled ",(0,o.mdx)("inlineCode",{parentName:"li"},"stack_id")," in this Texture Set."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"ValueError")," – If there is no channel of type ",(0,o.mdx)("inlineCode",{parentName:"li"},"channel_type")," in this Texture Set."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"ValueError")," – If a label was provided but ",(0,o.mdx)("inlineCode",{parentName:"li"},"channel_type")," is not a user type.\nStandard channel types have fixed labels."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"ValueError")," – If the channel is invalid."))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-substance-painter-textureset-channel-md-8683a9511da7d9f3ca98.js.map