"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8495],{55154:function(e,r,t){t.r(r),t.d(r,{_frontmatter:function(){return m},default:function(){return u}});var n=t(87462),a=t(63366),s=(t(15007),t(64983)),i=t(91515),o=["components"],m={},l={_frontmatter:m},p=i.Z;function u(e){var r=e.components,t=(0,a.Z)(e,o);return(0,s.mdx)(p,(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"resource module — Substance 3D Painter Python API 0.2.11 documentation"),(0,s.mdx)("h1",{id:"resource-module"},"resource module"),(0,s.mdx)("p",null,"This module allows to manipulate Substance 3D Painter resources and shelves."),(0,s.mdx)("p",null,"Substance 3D Painter treats textures, materials, brushes, etc. as resources,\nand uses URLs to identify them. Resources can be in the shelf, or can be\nembedded directly in a project (like a baked ambient occlusion texture for\nexample)."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.Type(",(0,s.mdx)("em",{parentName:"p"},"value"),")\nEnumeration describing the type of a given resource."),(0,s.mdx)("p",null,"Members:"),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Name"),(0,s.mdx)("th",{parentName:"tr",align:null},"Usage"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SCRIPT")),(0,s.mdx)("td",{parentName:"tr",align:null},"A particle emitter script.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"PRESET")),(0,s.mdx)("td",{parentName:"tr",align:null},"A resource preset.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SMART_MASK")),(0,s.mdx)("td",{parentName:"tr",align:null},"A smart mask.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"IMAGE")),(0,s.mdx)("td",{parentName:"tr",align:null},"An image.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SUBSTANCE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A substance.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SHADER")),(0,s.mdx)("td",{parentName:"tr",align:null},"A shader.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"EXPORT")),(0,s.mdx)("td",{parentName:"tr",align:null},"An export preset.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SMART_MATERIAL")),(0,s.mdx)("td",{parentName:"tr",align:null},"A smart material.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"BRUSH")),(0,s.mdx)("td",{parentName:"tr",align:null},"A brush.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"RESOURCE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A resource.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SUBSTANCE_PACKAGE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A substance package.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"ABR_PACKAGE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A photoshop brushes package.")))),(0,s.mdx)("h2",{id:"overview"},"Overview"),(0,s.mdx)("h3",{id:"manipulating-resources"},"Manipulating resources"),(0,s.mdx)("p",null,"The resource module exposes the class ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource")),", which represents a\nresource currently available in Substance 3D Painter (either in the current\nproject, current session, or in a shelf)."),(0,s.mdx)("p",null,"Listing all the resources of a shelf can be done with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf.resources",title:"substance_painter.resource.Shelf.resources"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelf.resources()")),",\nwhile ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.search",title:"substance_painter.resource.search"},(0,s.mdx)("inlineCode",{parentName:"a"},"search()"))," allows to search for specific resources. Specific resources\ncan be shown with a filter directly in the Assets window with\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.show_in_ui",title:"substance_painter.resource.Resource.show_in_ui"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.show_in_ui()"))," and ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.show_resources_in_ui",title:"substance_painter.resource.show_resources_in_ui"},(0,s.mdx)("inlineCode",{parentName:"a"},"show_resources_in_ui()")),"."),(0,s.mdx)("blockquote",null,(0,s.mdx)("pre",{parentName:"blockquote"},(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# Get all the resources of a shelf:\nmy_shelf = substance_painter.resource.Shelf("myshelf")\nall_shelf_resources = my_shelf.resources()\n\nfor resource in all_shelf_resources:\n    print(resource.identifier().name)\n\n# Find all resources that match a name:\naluminium_resources = substance_painter.resource.search("aluminium")\n\nfor resource in aluminium_resources:\n    print(resource.identifier().name)\n\n# Show a single resource in the shelf:\naluminium_resources[0].show_in_ui()\n\n# Show the list of resources found in the shelf:\nsubstance_painter.resource.show_resources_in_ui(aluminium_resources)\n\n'))),(0,s.mdx)("p",null,"Internally, resources are identified with a URL; ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},(0,s.mdx)("inlineCode",{parentName:"a"},"ResourceID"))," contains\nthat URL. It can be manipulated directly, with no guaranty that the URL is\nreferring to an actual resource."),(0,s.mdx)("blockquote",null,(0,s.mdx)("pre",{parentName:"blockquote"},(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# Display the URL of a resource:\nenvmap_resources = substance_painter.resource.search("bonifacio")\nfor envmap in envmap_resources:\n    envmap_id = envmap.identifier()\n    print("The URL of the resource `{0}` is {1}"\n        .format(envmap_id.name, envmap_id.url()))\n    print("The location of the resource `{0}` is {1}"\n        .format(envmap_id.name, envmap_id.location()))\n\n# It is possible to create a ResourceID from a URL. If there is no\n# resource corresponding to the URL, the ResourceID is still valid\n# but refers to a resource that doesn\'t exist.\nenvmap2_id = substance_painter.resource.ResourceID.from_url(\n    "resource://starter_assets/Bonifacio Street");\n\n# It is possible to create a ResourceID from a context, a name and\n# a version (optional). This is equivalent to the above, with the\n# same caveat.\nenvmap3_id = substance_painter.resource.ResourceID(\n    context="starter_assets", name="Bonifacio Street")\nenvmap4_id = substance_painter.resource.ResourceID(\n    context="starter_assets", name="Bonifacio Street",\n    version="d30facd8d860fc212f864065641cdca4e8006510.image");\n\n# It is possible to get the ResourceID of a resource embedded in the\n# current project. This time it refers to an actual resource.\nenvmap5_id = substance_painter.resource.ResourceID.from_project(\n    name="Bonifacio Street");\n\n# Finally, it is possible to get the ResourceID of a resource that\n# was imported in the current session:\nenvmap6_id = substance_painter.resource.ResourceID.from_session(\n    name="Bonifacio Street");\n\n'))),(0,s.mdx)("p",null,"If the resource exists, it can be retrieved from its identifier with\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.retrieve",title:"substance_painter.resource.Resource.retrieve"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.retrieve()")),". When there are several versions of the same resource,\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.retrieve",title:"substance_painter.resource.Resource.retrieve"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.retrieve()"))," will return the entire list, starting with the most\nrecent one. On the contrary, if the resource doesn’t exist or was deleted,\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.retrieve",title:"substance_painter.resource.Resource.retrieve"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.retrieve()"))," will return an empty list."),(0,s.mdx)("blockquote",null,(0,s.mdx)("pre",{parentName:"blockquote"},(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# Create a ResourceID:\nenvmap_id = substance_painter.resource.ResourceID(context="starter_assets",\n                                                  name="Bonifacio Street")\n\n# Get the resources corresponding to the ResourceID. There can be 0 if there\n# is no such resource, or more than 1 if there are multiple versions of the\n# resource.\nenvmap_resources = substance_painter.resource.Resource.retrieve(envmap_id)\nprint("{} resource(s) with that ID".format(len(envmap_resources)))\n\n'))),(0,s.mdx)("h3",{id:"importing-resources"},"Importing resources"),(0,s.mdx)("p",null,"New resources can be imported, either\nto the current project with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.import_project_resource",title:"substance_painter.resource.import_project_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"import_project_resource()")),",\nto the current session with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.import_session_resource",title:"substance_painter.resource.import_session_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"import_session_resource()")),",\nor to a shelf with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf.import_resource",title:"substance_painter.resource.Shelf.import_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelf.import_resource()")),".\nAll three functions take a path to the resource to be imported, a ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("inlineCode",{parentName:"a"},"Usage")),"\nindicating the type of that resource, and optionally a name and a group.\nThis feature corresponds to the “Import resources” window."),(0,s.mdx)("p",null,"Resources can be imported into a shelf, as long as it is not a read-only shelf.\nThe Substance shelf, installed along the application, is read-only.\nA shelf is also read-only if its path on the file system is read-only.\nThis can be checked with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf.can_import_resources",title:"substance_painter.resource.Shelf.can_import_resources"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelf.can_import_resources()")),"."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# Open a project we want to import into (see substance_painter.project\n# for details). This step is not necessary if there is already a project\n# opened in Substance 3D Painter.\nimport substance_painter.project\nsubstance_painter.project.open("C:/projects/MeetMat.spp")\n\n# Import a normal map to the project:\nnew_resource = substance_painter.resource.import_project_resource(\n    "C:/textures/MyBakedNormalMap.png",\n    substance_painter.resource.Usage.TEXTURE)\n\n# Import a color LUT to the session:\nnew_color_lut = substance_painter.resource.import_session_resource(\n    "C:/textures/sepia.exr",\n    substance_painter.resource.Usage.COLOR_LUT)\n\n# Set that color LUT (see substance_painter.display for details).\n# This step is unrelated to import, and just meant to show how the\n# imported resource can be used.\nimport substance_painter.display\nsubstance_painter.display.set_color_lut_resource(new_color_lut.identifier())\n\n# Import an environment map to the shelf.\nmy_shelf = substance_painter.resource.Shelf("myshelf")\nif my_shelf.can_import_resources():\n    new_resource = my_shelf.import_resource(\n        "C:/textures/Bonifacio Street.exr",\n        substance_painter.resource.Usage.ENVIRONMENT)\nelse:\n    print("The shelf is read-only.")\n\n')),(0,s.mdx)("p",null,"See also:",(0,s.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/painter-adding-content-import-window"},"Adding content via the import window"),"."),(0,s.mdx)("h3",{id:"resources-used-by-a-project"},"Resources used by a project"),(0,s.mdx)("p",null,"It is possible to list the resources used by the layer stacks and mesh maps of\na project with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.list_layer_stack_resources",title:"substance_painter.resource.list_layer_stack_resources"},(0,s.mdx)("inlineCode",{parentName:"a"},"list_layer_stack_resources()")),", and to update them with\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.update_layer_stack_resource",title:"substance_painter.resource.update_layer_stack_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"update_layer_stack_resource()")),"."),(0,s.mdx)("p",null,"There may be other resources referenced by a project outside of the layer\nstack and mesh maps: see the ",(0,s.mdx)("a",{parentName:"p",href:"display.html#module-substance_painter.display",title:"substance_painter.display"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.display"))," module to\nquery and modify them."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# Open a project we want to manipulate resources from (see\n# substance_painter.project for details). This step is not necessary\n# if there is already a project opened in Substance Painter.\nimport substance_painter.project\nsubstance_painter.project.open("C:/projects/MeetMat.spp")\n\n# List all the resources referenced by all the layer stacks and\n# mesh maps:\nused_resources_ids = substance_painter.resource.list_layer_stack_resources()\nfor resource_id in used_resources_ids:\n    print(resource_id.name)\n\n# Import a normal map to the project:\nnew_resource = substance_painter.resource.import_project_resource(\n    "C:/textures/MyBakedNormalMap.png",\n    substance_painter.resource.Usage.TEXTURE)\n\n# Replace one of the resources with the new imported resource:\nsubstance_painter.resource.update_layer_stack_resource(used_resources_ids[0], new_resource)\n\n')),(0,s.mdx)("h3",{id:"custom-preview"},"Custom preview"),(0,s.mdx)("p",null,"When a resource is imported, a thumbnail is automatically generated for it.\nIt is possible to replace that thumbnail with a custom preview by using\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.set_custom_preview",title:"substance_painter.resource.Resource.set_custom_preview"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.set_custom_preview()")),", or reset the preview with\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.reset_preview",title:"substance_painter.resource.Resource.reset_preview"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.reset_preview()")),"."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\naluminium_resources = substance_painter.resource.search("aluminium")\nresource = aluminium_resources[0]\n\n# Set the custom preview:\nresource.set_custom_preview("C:/textures/MyCustomPreview.png")\n\n# Remove the custom preview:\nresource.reset_preview()\n\n')),(0,s.mdx)("h3",{id:"resource-crawling"},"Resource crawling"),(0,s.mdx)("p",null,"When Substance 3D Painter is opened, it will browse the different shelves\nto discover and index resources, and display their thumbnail. When it regains\nfocus after switching to another application, it will do so again, in case\nthe user added a new asset to their shelf folder. This process is referred\nto as ",(0,s.mdx)("strong",{parentName:"p"},"resource crawling"),"."),(0,s.mdx)("p",null,"When a shelf starts crawling, an event\n",(0,s.mdx)("a",{parentName:"p",href:"event.html#substance_painter.event.ShelfCrawlingStarted",title:"substance_painter.event.ShelfCrawlingStarted"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.event.ShelfCrawlingStarted"))," is emitted for that\nshelf. When crawling is finished, an event\n",(0,s.mdx)("a",{parentName:"p",href:"event.html#substance_painter.event.ShelfCrawlingEnded",title:"substance_painter.event.ShelfCrawlingEnded"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.event.ShelfCrawlingEnded"))," is emitted for that\nshelf. At any time, ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf.is_crawling",title:"substance_painter.resource.Shelf.is_crawling"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelf.is_crawling()"))," will tell if a shelf is\ncrawling or not."),(0,s.mdx)("p",null,"It is possible from a Python script to explicitly trigger a new resource\ncrawling with ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelves.refresh_all",title:"substance_painter.resource.Shelves.refresh_all"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelves.refresh_all()")),"."),(0,s.mdx)("p",null,"Example:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\nimport substance_painter.event\n\n# Two event handlers to show when crawling starts and ends:\ndef on_start_crawl(e):\n    print("Shelf `{}` started crawling.".format(e.shelf_name))\n\ndef on_end_crawl(e):\n    print("Shelf `{}` finished crawling.".format(e.shelf_name))\n\n# Use the event handler to listen to ShelfCrawlingStarted and\n# ShelfCrawlingEnded:\nsubstance_painter.event.DISPATCHER.connect(\n    substance_painter.event.ShelfCrawlingStarted,\n    on_start_crawl)\n\nsubstance_painter.event.DISPATCHER.connect(\n    substance_painter.event.ShelfCrawlingEnded,\n    on_end_crawl)\n\n# At this point, the event handlers may or may not print something,\n# depending on what the shelves are doing. It is possible to trigger\n# a crawling by switching to another application, and coming back\n# to Substance 3D Painter.\n\n# It is also possible to trigger a crawling with this call:\nsubstance_painter.resource.Shelves.refresh_all()\n\nmy_shelf = substance_painter.resource.Shelf("myshelf")\n\n# Running this bloc at different moments will give different\n# results:\nif my_shelf.is_crawling():\n    print("The shelf is crawling...")\nelse:\n    print("The shelf is idle.")\n\n')),(0,s.mdx)("h2",{id:"resources"},"Resources"),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.Resource(",(0,s.mdx)("em",{parentName:"p"},"handle: _substance_painter.resource.ResourceHandle"),")\nA Substance 3D Painter resource."),(0,s.mdx)("p",null,"identifier() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID"),"\nGet this resource identifier."),(0,s.mdx)("p",null,"Returns:\nThe resource identifier."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},(0,s.mdx)("inlineCode",{parentName:"a"},"ResourceID")),"."),(0,s.mdx)("p",null,"location() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceLocation",title:"substance_painter.resource.ResourceLocation"},"ResourceLocation"),"\nGet the location of this Resource."),(0,s.mdx)("p",null,"Returns:\nThe location of this resource."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceLocation",title:"substance_painter.resource.ResourceLocation"},"ResourceLocation")),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," retrieve(",(0,s.mdx)("em",{parentName:"p"},"identifier: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),")\nRetrieve a list of resources matching the given identifier."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"identifier")," (",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},(0,s.mdx)("em",{parentName:"a"},"ResourceID")),") – A resource identifier."),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the name of the identifier is empty\nor if the context of the identifier doesn’t exists."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"Returns:\nThe list of resources matching the given identifier.\nIf the identifier has a valid version, this method will return only one or\nzero resources, otherwise the list may contain several resources. In case\nof several resources are returned, the most up to date resource will be at\nthe begining of the list."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"List"),"[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]"),(0,s.mdx)("p",null,"set_custom_preview(",(0,s.mdx)("em",{parentName:"p"},"preview_image: str"),") → None\nReplace the current preview of this resource with a custom image."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"preview_image")," (",(0,s.mdx)("em",{parentName:"p"},"str"),") – File path to an image on the disk to use as the new\npreview."),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the resource metadata cannot be modified."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"preview_image")," is not a valid path to a valid image."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"Note"),(0,s.mdx)("p",null,"The preview image can be a JPEG, a PNG or an XPM."),(0,s.mdx)("p",null,"category() → str\nGet the category of this resource, ex: “wood” for a material."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nthe category of this resource"),(0,s.mdx)("p",null,"Return type:\nstr"),(0,s.mdx)("p",null,"usages() → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},"Usage"),"]\nGet the usages of this resource."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nthe usages of this resource"),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"List"),"[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},"Usage"),"]"),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("inlineCode",{parentName:"a"},"Usage"))),(0,s.mdx)("p",null,"gui_name() → str\nGet the GUI name of this resource."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nthe GUI name of this resource"),(0,s.mdx)("p",null,"Return type:\nstr"),(0,s.mdx)("p",null,"type() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Type",title:"substance_painter.resource.Type"},"Type"),"\nGet the type of this resource."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nthe type of this resource"),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Type",title:"substance_painter.resource.Type"},"Type")),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Type",title:"substance_painter.resource.Type"},(0,s.mdx)("inlineCode",{parentName:"a"},"Type"))),(0,s.mdx)("p",null,"tags() → List","[str]","\nGet the tags of this resource."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nthe tags of this resource"),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"List"),"[str]"),(0,s.mdx)("p",null,"internal_properties() → dict\nGet a dictionnary of the resource internal properties.\nThe current implementation only extracts metadata on Substance resources."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\na dictionnary containing internal properties about this resource"),(0,s.mdx)("p",null,"Return type:\ndict"),(0,s.mdx)("p",null,"children() → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]\nGet child resources.\nFor example substance graphs of a substance package."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nResources contained in this resource."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"List"),"[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]"),(0,s.mdx)("p",null,"parent() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource")," | None\nGet parent resource.\nFor example the substance package a substance graph is originating from."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("strong",{parentName:"p"},"RuntimeError")," – If the resource is invalid."),(0,s.mdx)("p",null,"Returns:\nThe parent resource that owns this resource."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"Optional"),"[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]"),(0,s.mdx)("p",null,"reset_preview() → None\nRemove any custom preview for this resource and resets to the default one."),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the resource metadata cannot be modified."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"show_in_ui() → None\nHighlight this resource in the application shelf UI (Assets window)."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.show_resources_in_ui",title:"substance_painter.resource.show_resources_in_ui"},(0,s.mdx)("inlineCode",{parentName:"a"},"show_resources_in_ui()")),"."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.ResourceID(",(0,s.mdx)("em",{parentName:"p"},"context: str"),", ",(0,s.mdx)("em",{parentName:"p"},"name: str"),", ",(0,s.mdx)("em",{parentName:"p"},"version: str | None = None"),")\nA Substance 3D Painter resource identifier."),(0,s.mdx)("p",null,"The resource is identified by a context, a name, and a version. The context\nand the name are mandatory while the version is optional. The version is a\nstring that looks like a hash, and may also contain an extension."),(0,s.mdx)("p",null,"Note"),(0,s.mdx)("p",null,"A ResourceID object is only an identifier. It provides no guarantees that\nthe resource actually exists."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"display.html#module-substance_painter.display",title:"substance_painter.display"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.display")),"."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"classmethod")," from_project(",(0,s.mdx)("em",{parentName:"p"},"name: str"),", ",(0,s.mdx)("em",{parentName:"p"},"version: str | None = None"),")\nCreate a ResourceID object for a resource located in the current project."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – The resource name."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"version")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"optional"),") – The resource version (hash-like string).")),(0,s.mdx)("p",null,"Returns:\nThe resource corresponding to the given name."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"classmethod")," from_session(",(0,s.mdx)("em",{parentName:"p"},"name: str"),", ",(0,s.mdx)("em",{parentName:"p"},"version: str | None = None"),")\nCreate a ResourceID object for a resource located in the current session."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – The resource name."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"version")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"optional"),") – The resource version (hash-like string).")),(0,s.mdx)("p",null,"Returns:\nThe resource corresponding to the given name."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"classmethod")," from_url(",(0,s.mdx)("em",{parentName:"p"},"url: str"),")\nCreate a ResourceID object from its URL.\nURLs must have ",(0,s.mdx)("inlineCode",{parentName:"p"},"resource://")," as a scheme. The version is encoded as a query\nstring, that looks like a hash."),(0,s.mdx)("p",null,"A resource URL looks like this:"),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"resource://context/name?version=0123456789abcdef0123456789abcdef01234567.image")),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"url")," (",(0,s.mdx)("em",{parentName:"p"},"str"),") – The resource URL."),(0,s.mdx)("p",null,"Returns:\nThe resource corresponding to the given URL."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"url")," is not a valid URL."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the URL scheme is not ",(0,s.mdx)("inlineCode",{parentName:"li"},"resource://"),"."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the resource name is invalid.")),(0,s.mdx)("p",null,"location() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceLocation",title:"substance_painter.resource.ResourceLocation"},"ResourceLocation"),"\nGet the location of this ResourceID."),(0,s.mdx)("p",null,"Returns:\nThe location of this resource."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceLocation",title:"substance_painter.resource.ResourceLocation"},"ResourceLocation")),(0,s.mdx)("p",null,"url() → str\nGet the URL form of this ResourceID."),(0,s.mdx)("p",null,"Returns:\nThe URL of the resource."),(0,s.mdx)("p",null,"Return type:\nstr"),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the ResourceID doesn’t have a context."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the ResourceID doesn’t have a name.")),(0,s.mdx)("p",null,"context",(0,s.mdx)("em",{parentName:"p"},": str"),"\nContext of the resource."),(0,s.mdx)("p",null,"Type:\nstr"),(0,s.mdx)("p",null,"name",(0,s.mdx)("em",{parentName:"p"},": str"),"\nName of the resource."),(0,s.mdx)("p",null,"Type:\nstr"),(0,s.mdx)("p",null,"version",(0,s.mdx)("em",{parentName:"p"},": str")," ",(0,s.mdx)("em",{parentName:"p"},"= None"),"\nHash identifying the version of the resource."),(0,s.mdx)("p",null,"Type:\nstr"),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.ResourceLocation(",(0,s.mdx)("em",{parentName:"p"},"value"),")\nEach resource has a location determined by where its data lives."),(0,s.mdx)("p",null,"Members:"),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Name"),(0,s.mdx)("th",{parentName:"tr",align:null},"Data location"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SESSION")),(0,s.mdx)("td",{parentName:"tr",align:null},"Current session; those ressources will be lost after a restart of the application.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"PROJECT")),(0,s.mdx)("td",{parentName:"tr",align:null},"A Substance 3D Painter project; those resources are embedded in the spp file.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SHELF")),(0,s.mdx)("td",{parentName:"tr",align:null},"One of the Substance 3D Painter Shelves.")))),(0,s.mdx)("p",null,"Example"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.resource\n\n# For a resource from the default shelf\naluminium = substance_painter.resource.ResourceID(\n    context="starter_assets", name="Aluminium Insulator");\n\n# This will print:\n# ResourceLocation.SHELF\nprint(aluminium.location())\n\n# For an embedded resource, like a baked map\naomap = substance_painter.resource.ResourceID.from_project(\n    name="ambient_occlusion");\n\n# This will print:\n# ResourceLocation.PROJECT\nprint(aomap.location())\n\n# Finally, for a temporary resource\ntest_envmap = substance_painter.resource.ResourceID.from_session(\n    name="Test Envmap");\n\n# This will print:\n# ResourceLocation.SESSION\nprint(test_envmap.location())\n\n')),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.StandardQuery\nStandard resource queries."),(0,s.mdx)("p",null,"Members:"),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Name"),(0,s.mdx)("th",{parentName:"tr",align:null},"Query"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"ALL_RESOURCES")),(0,s.mdx)("td",{parentName:"tr",align:null},"All resources.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"PROJECT_RESOURCES")),(0,s.mdx)("td",{parentName:"tr",align:null},"Resources that belongs to the current project.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SESSION_RESOURCES")),(0,s.mdx)("td",{parentName:"tr",align:null},"Resources that belongs to the current session.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SHELVES_RESOURCES")),(0,s.mdx)("td",{parentName:"tr",align:null},"All shelves resources.")))),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.search",title:"substance_painter.resource.search"},(0,s.mdx)("inlineCode",{parentName:"a"},"search()")),"."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.Usage(",(0,s.mdx)("em",{parentName:"p"},"value"),")\nEnumeration describing how a given resource is meant to be used."),(0,s.mdx)("p",null,"Members:"),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Name"),(0,s.mdx)("th",{parentName:"tr",align:null},"Usage"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"BASE_MATERIAL")),(0,s.mdx)("td",{parentName:"tr",align:null},"A material.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"ENVIRONMENT")),(0,s.mdx)("td",{parentName:"tr",align:null},"An environment map.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"ALPHA")),(0,s.mdx)("td",{parentName:"tr",align:null},"A brush alpha.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"TEXTURE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A UV space map like bakes.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"FILTER")),(0,s.mdx)("td",{parentName:"tr",align:null},"A layer stack filter.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"EMITTER")),(0,s.mdx)("td",{parentName:"tr",align:null},"A particle emitter script.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"RECEIVER")),(0,s.mdx)("td",{parentName:"tr",align:null},"A particle receiver script.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"PROCEDURAL")),(0,s.mdx)("td",{parentName:"tr",align:null},"A procedural substance, like a noise.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"BRUSH")),(0,s.mdx)("td",{parentName:"tr",align:null},"A brush definition.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"PARTICLE")),(0,s.mdx)("td",{parentName:"tr",align:null},"A particles effect.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"TOOL")),(0,s.mdx)("td",{parentName:"tr",align:null},"A painting tool preset.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SHADER")),(0,s.mdx)("td",{parentName:"tr",align:null},"A shader.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"EXPORT")),(0,s.mdx)("td",{parentName:"tr",align:null},"An export preset.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"GENERATOR")),(0,s.mdx)("td",{parentName:"tr",align:null},"A mask generator.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SMART_MATERIAL")),(0,s.mdx)("td",{parentName:"tr",align:null},"A smart material.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"SMART_MASK")),(0,s.mdx)("td",{parentName:"tr",align:null},"A smart mask.")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},(0,s.mdx)("inlineCode",{parentName:"td"},"COLOR_LUT")),(0,s.mdx)("td",{parentName:"tr",align:null},"A color look-up table.")))),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.import_project_resource",title:"substance_painter.resource.import_project_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"import_project_resource()")),",\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.import_session_resource",title:"substance_painter.resource.import_session_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"import_session_resource()")),",\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf.import_resource",title:"substance_painter.resource.Shelf.import_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelf.import_resource()")),"."),(0,s.mdx)("p",null,"substance_painter.resource.search(",(0,s.mdx)("em",{parentName:"p"},"query: str"),") → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]\nList Substance 3D Painter resources that match the given query."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"query")," (",(0,s.mdx)("em",{parentName:"p"},"str"),") – A resource query string. See ",(0,s.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/painter-filtering-shelf-content"},"text query documentation"),"."),(0,s.mdx)("p",null,"Returns:\nThe list of resources that match the given query."),(0,s.mdx)("p",null,"Return type:\nList[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.StandardQuery",title:"substance_painter.resource.StandardQuery"},(0,s.mdx)("inlineCode",{parentName:"a"},"StandardQuery")),"."),(0,s.mdx)("p",null,"substance_painter.resource.list_layer_stack_resources() → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID"),"]\nList the resources referenced by the layer stacks and mesh maps of the current\nproject."),(0,s.mdx)("p",null,"Returns:\nThe list of resource identifiers referenced."),(0,s.mdx)("p",null,"Return type:\nList[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID"),"]"),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,s.mdx)("strong",{parentName:"a"},"ProjectError"))," – If no project is opened."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.update_layer_stack_resource",title:"substance_painter.resource.update_layer_stack_resource"},(0,s.mdx)("inlineCode",{parentName:"a"},"update_layer_stack_resource()")),",\n",(0,s.mdx)("a",{parentName:"p",href:"display.html#module-substance_painter.display",title:"substance_painter.display"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.display")),"."),(0,s.mdx)("p",null,"substance_painter.resource.update_layer_stack_resource(",(0,s.mdx)("em",{parentName:"p"},"old_resource_id: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID")),", ",(0,s.mdx)("em",{parentName:"p"},"new_resource: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource")),") → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID"),"]\nReplace resources from the layer stacks and mesh maps in the current project."),(0,s.mdx)("p",null,"Given a resource identifier, replace any resource having the same identifier\nwith the new resource. The new resource must be compatible with the ones it\nreplaces (see note); otherwise, an error is thrown."),(0,s.mdx)("p",null,"Note"),(0,s.mdx)("p",null,"The new resource must be of the same type as the resources it replaces.\nFor example a base material resource cannot be updated with a smart\nmaterial resource."),(0,s.mdx)("p",null,"Moreover:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"If the resource is a Substance material, it must have the same number\nand names of outputs."),(0,s.mdx)("li",{parentName:"ul"},"If the resource is a Substance filter, it must have the same number\nand names of inputs and outputs.")),(0,s.mdx)("p",null,"Returns:\nThe list of identifiers of all the resources that have\nbeen replaced."),(0,s.mdx)("p",null,"Return type:\nList[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},"ResourceID"),"]"),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"old_resource_id")," (",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.ResourceID",title:"substance_painter.resource.ResourceID"},(0,s.mdx)("em",{parentName:"a"},"ResourceID")),") – The identifier of the resource(s) to update."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"new_resource")," (",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},(0,s.mdx)("em",{parentName:"a"},"Resource")),") – The new resource to use instead.")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,s.mdx)("strong",{parentName:"a"},"ProjectError"))," – If no project is opened."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"TypeError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"old_resource_id")," is not a ResourceID."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"TypeError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"new_resource")," is not a Resource."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"RuntimeError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"new_resource")," is not a valid resource."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"RuntimeError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"new_resource")," cannot be used in place of\n",(0,s.mdx)("inlineCode",{parentName:"li"},"old_resource_id"),"."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.list_layer_stack_resources",title:"substance_painter.resource.list_layer_stack_resources"},(0,s.mdx)("inlineCode",{parentName:"a"},"list_layer_stack_resources()")),",\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("inlineCode",{parentName:"a"},"Usage")),",\n",(0,s.mdx)("a",{parentName:"p",href:"display.html#module-substance_painter.display",title:"substance_painter.display"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.display")),"."),(0,s.mdx)("p",null,"substance_painter.resource.import_project_resource(",(0,s.mdx)("em",{parentName:"p"},"file_path: str"),", ",(0,s.mdx)("em",{parentName:"p"},"resource_usage: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},"Usage")),", ",(0,s.mdx)("em",{parentName:"p"},"name: str | None = None"),", ",(0,s.mdx)("em",{parentName:"p"},"group: str | None = None"),") → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"\nImport a resource into the current opened project."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"file_path")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – The file path to the resource to be imported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"resource_usage")," (",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("em",{parentName:"a"},"Usage")),") – The resource usage."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"optional"),") – The name of the resource if different from the\nfile name."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"group")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"opional"),") – An optional group name, can be used in resource\nqueries.")),(0,s.mdx)("p",null,"Returns:\nThe imported resource object."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,s.mdx)("strong",{parentName:"a"},"ProjectError"))," – If no project is opened."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If parameters validation failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"RuntimeError")," – If import failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"substance_painter.resource.import_session_resource(",(0,s.mdx)("em",{parentName:"p"},"file_path: str"),", ",(0,s.mdx)("em",{parentName:"p"},"resource_usage: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},"Usage")),", ",(0,s.mdx)("em",{parentName:"p"},"name: str | None = None"),", ",(0,s.mdx)("em",{parentName:"p"},"group: str | None = None"),") → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"\nImport a resource into the current session."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"file_path")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – The file path to the resource to be imported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"resource_usage")," (",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("em",{parentName:"a"},"Usage")),") – The resource usage."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"optional"),") – The name of the resource if different from the\nfile name."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"group")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"opional"),") – An optional group name, can be used in resource\nqueries.")),(0,s.mdx)("p",null,"Returns:\nThe imported resource object."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If parameters validation failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"RuntimeError")," – If import failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"substance_painter.resource.show_resources_in_ui(",(0,s.mdx)("em",{parentName:"p"},"resources: List[",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]"),") → None\nHighlight a list of resources in the application shelf UI (Assets window)."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"resources")," (",(0,s.mdx)("em",{parentName:"p"},"List**["),(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},(0,s.mdx)("em",{parentName:"a"},"Resource")),(0,s.mdx)("em",{parentName:"p"},"]"),") – Resources to highlight"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource.show_in_ui",title:"substance_painter.resource.Resource.show_in_ui"},(0,s.mdx)("inlineCode",{parentName:"a"},"Resource.show_in_ui()")),"."),(0,s.mdx)("h2",{id:"shelves"},"Shelves"),(0,s.mdx)("p",null,"See also:",(0,s.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/painter-shelf-configuration"},"Shelf configuration"),"."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.Shelf(",(0,s.mdx)("em",{parentName:"p"},"_name: str"),")\nClass providing information on a given Substance 3D Painter shelf. A shelf\nis identified by a unique name."),(0,s.mdx)("p",null,"can_import_resources() → bool\nCheck if resources can be imported into this shelf.\nResources can be imported into a shelf, as long as it is not a read-only shelf.\nThe Substance shelf, installed along the application, is read-only. A shelf is\nalso read-only if its path on the file system is read-only."),(0,s.mdx)("p",null,"Returns:\n",(0,s.mdx)("inlineCode",{parentName:"p"},"True")," if resources can be imported."),(0,s.mdx)("p",null,"Return type:\nbool"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"event.html#substance_painter.event.ShelfCrawlingEnded",title:"substance_painter.event.ShelfCrawlingEnded"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.event.ShelfCrawlingEnded")),"."),(0,s.mdx)("p",null,"import_resource(",(0,s.mdx)("em",{parentName:"p"},"file_path: str"),", ",(0,s.mdx)("em",{parentName:"p"},"resource_usage: ",(0,s.mdx)("a",{parentName:"em",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},"Usage")),", ",(0,s.mdx)("em",{parentName:"p"},"name: str | None = None"),", ",(0,s.mdx)("em",{parentName:"p"},"group: str | None = None"),", ",(0,s.mdx)("em",{parentName:"p"},"uuid: str | None = None"),") → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"\nImport a resource into this shelf."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"file_path")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – The file path to the resource to be imported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"resource_usage")," (",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.Usage",title:"substance_painter.resource.Usage"},(0,s.mdx)("em",{parentName:"a"},"Usage")),") – The resource usage."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"optional"),") – The name of the resource if different from the\nfile name."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"group")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"opional"),") – An optional group name, can be used in resource\nqueries."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"uuid")," (",(0,s.mdx)("em",{parentName:"li"},"str**,")," ",(0,s.mdx)("em",{parentName:"li"},"opional"),") – An optional uuid. If a resource already exists with\nthe same uuid, it will be replaced.")),(0,s.mdx)("p",null,"Returns:\nThe imported resource object."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If parameters validation failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"RuntimeError")," – If import failed."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"is_crawling() → bool\nCheck if this shelf is currently discovering resources in folders."),(0,s.mdx)("p",null,"Returns:\n",(0,s.mdx)("inlineCode",{parentName:"p"},"True")," if this shelf is discovering resources, ",(0,s.mdx)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,s.mdx)("p",null,"Return type:\nbool"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"event.html#substance_painter.event.ShelfCrawlingEnded",title:"substance_painter.event.ShelfCrawlingEnded"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.event.ShelfCrawlingEnded")),"."),(0,s.mdx)("p",null,"name() → str"),(0,s.mdx)("p",null,"Returns:\nThe shelf name.\nEach shelf is identified by a unique name."),(0,s.mdx)("p",null,"path() → str"),(0,s.mdx)("p",null,"Returns:\nThe associated path"),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the shelf doesn’t exist anymore."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"resources(",(0,s.mdx)("em",{parentName:"p"},"query: str = ''"),") → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Resource",title:"substance_painter.resource.Resource"},"Resource"),"]\nGet resources contained in this shelf. An optional query string can be given\nto narrow the results."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"query")," (",(0,s.mdx)("em",{parentName:"p"},"str**,")," ",(0,s.mdx)("em",{parentName:"p"},"optional"),") – A resource query string."),(0,s.mdx)("p",null,"Returns:\nThis shelf’s list of resources."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.search",title:"substance_painter.resource.search"},(0,s.mdx)("inlineCode",{parentName:"a"},"search()")),"."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.resource.Shelves\nCollection of static methods to manipulate shelves."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," add(",(0,s.mdx)("em",{parentName:"p"},"name: str"),", ",(0,s.mdx)("em",{parentName:"p"},"path: str"),") → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf"),"\nAdd a new shelf. This shelf will only be valid during the application session.\nThe shelf will not be visible from application general settings menu."),(0,s.mdx)("p",null,"Parameters:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"name")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – Name of the new shelf. This name must be unique and must only\ncontain lowercase letters, numbers, underscores or hyphens.\nUse ",(0,s.mdx)("a",{parentName:"li",href:"#substance_painter.resource.Shelves.exists",title:"substance_painter.resource.Shelves.exists"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelves.exists()"))," to check if name is already used."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"path")," (",(0,s.mdx)("em",{parentName:"li"},"str"),") – Folder path to monitor.")),(0,s.mdx)("p",null,"Returns:\nNewly added shelf."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf")),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If ",(0,s.mdx)("inlineCode",{parentName:"li"},"name")," or ",(0,s.mdx)("inlineCode",{parentName:"li"},"str")," are invalid. See logs for details."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelves.exists",title:"substance_painter.resource.Shelves.exists"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelves.exists()")),"."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," all() → List[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf"),"]\nList all shelves."),(0,s.mdx)("p",null,"Returns:\nList of existing shelves."),(0,s.mdx)("p",null,"Return type:\n",(0,s.mdx)("em",{parentName:"p"},"List"),"[",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf"),"]"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," application_shelf() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf"),"\nThis is the shelf containing the default content shipped with the application."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," exists(",(0,s.mdx)("em",{parentName:"p"},"name: str"),") → bool\nTell whether a shelf with the given name exists."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"name")," (",(0,s.mdx)("em",{parentName:"p"},"str"),") – Shelf name to searh for."),(0,s.mdx)("p",null,"Returns:\n",(0,s.mdx)("inlineCode",{parentName:"p"},"True")," if a shelf with the given name exists."),(0,s.mdx)("p",null,"Return type:\nbool"),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," refresh_all()\nForces discovering of resources in all shelves folders.\nDiscovering is also done automatically when the application window gets focus."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," remove(",(0,s.mdx)("em",{parentName:"p"},"name: str"),")\nRemoves a shelf.\nNo project must be opened.\nDeleting a shelf which was not created by the Python API is not possible and\nwill raise an exception."),(0,s.mdx)("p",null,"Parameters:\n",(0,s.mdx)("strong",{parentName:"p"},"name")," (",(0,s.mdx)("em",{parentName:"p"},"str"),") – Name of the shelf to delete.\nUse ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelves.exists",title:"substance_painter.resource.Shelves.exists"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelves.exists()"))," to check if a shelf exists."),(0,s.mdx)("p",null,"Raises:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,s.mdx)("strong",{parentName:"a"},"ProjectError"))," – If a project is opened."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the shelf doesn’t exist."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"ValueError")," – If the shelf was not created with the Python API."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet.")),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelves.exists",title:"substance_painter.resource.Shelves.exists"},(0,s.mdx)("inlineCode",{parentName:"a"},"Shelves.exists()")),"."),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"static")," user_shelf() → ",(0,s.mdx)("a",{parentName:"p",href:"#substance_painter.resource.Shelf",title:"substance_painter.resource.Shelf"},"Shelf"),"\nThis is the shelf located in the user Documents folder where new resources\nare created by default. The user can select a different default shelf in the\nsettings, and this will be reflected when using this function."),(0,s.mdx)("p",null,"Raises:\n",(0,s.mdx)("a",{parentName:"p",href:"exception.html#substance_painter.exception.ServiceNotFoundError",title:"substance_painter.exception.ServiceNotFoundError"},(0,s.mdx)("strong",{parentName:"a"},"ServiceNotFoundError"))," – If Substance 3D Painter has not started all its\nservices yet."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"https://docs.substance3d.com/spdoc/shelf-configuration-124059665.html"},"Default shelf documentation"),"."),(0,s.mdx)("h2",{id:"events"},"Events"),(0,s.mdx)("p",null,"Project related operations, whether they are initiated through the Python API\nor in the UI, can trigger the following events.\nSee ",(0,s.mdx)("a",{parentName:"p",href:"event.html#module-substance_painter.event",title:"substance_painter.event"},(0,s.mdx)("inlineCode",{parentName:"a"},"substance_painter.event"))," for more details."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.event.ShelfCrawlingStarted(",(0,s.mdx)("em",{parentName:"p"},"shelf_name: str"),")\nEvent triggered when a shelf starts reading the file system to discover\nnew resources."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"Shelf.is_crawling()"),"."),(0,s.mdx)("p",null,"shelf_name",(0,s.mdx)("em",{parentName:"p"},": str"),"\nName of the shelf discovering resources."),(0,s.mdx)("p",null,"Type:\nstr"),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,(0,s.mdx)("em",{parentName:"p"},"class")," substance_painter.event.ShelfCrawlingEnded(",(0,s.mdx)("em",{parentName:"p"},"shelf_name: str"),")\nEvent triggered when a shelf has finished discovering new resources and\nloading their thumbnails."),(0,s.mdx)("p",null,"See also"),(0,s.mdx)("p",null,(0,s.mdx)("inlineCode",{parentName:"p"},"Shelf.is_crawling()"),"."),(0,s.mdx)("p",null,"shelf_name",(0,s.mdx)("em",{parentName:"p"},": str"),"\nName of the shelf that has finished discovering resources."),(0,s.mdx)("p",null,"Type:\nstr"))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-substance-painter-resource-md-eed58e7a1a563d6a63c6.js.map