{"version":3,"file":"component---src-pages-api-substance-painter-export-md-0016e0b62f926ba51ebf.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/export.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>export module<a className=\"headerlink\" href=\"#module-substance_painter.export\" title=\"Link to this heading\"> </a></h1>\n    <p className>This module exposes functions to export assets (textures and meshes) from a project under a variety\nof formats. It is the scripting equivalent of the “Export textures” and the “Export mesh” windows.</p>\n    <p className>For the export textures, the export configuration is defined with a JSON file, but can also use\nexisting export presets.</p>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.ExportStatus\">\n        <em className=\"property\">class </em>substance_painter.export.ExportStatus(<em className=\"sig-param\">value</em>)<a className=\"headerlink\" href=\"#substance_painter.export.ExportStatus\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Status code of the export process.</p>\n        <p className>Members:</p>\n        <table className=\"docutils align-default\">\n          <thead>\n            <tr className=\"row-odd\"><th className=\"head\"><p className>Name</p></th>\n              <th className=\"head\"><p className>Description</p></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr className=\"row-even\"><td> `Success` </td>\n              <td><p className>The export was successful.</p></td>\n            </tr>\n            <tr className=\"row-odd\"><td><p className><code className=\"docutils literal notranslate\">Cancelled</code></p></td>\n              <td><p className>The export was cancelled by the user.</p></td>\n            </tr>\n            <tr className=\"row-even\"><td><p className><code className=\"docutils literal notranslate\">Warning</code></p></td>\n              <td><p className>The export completed with warnings.</p></td>\n            </tr>\n            <tr className=\"row-odd\"><td><p className><code className=\"docutils literal notranslate\">Error</code></p></td>\n              <td><p className>The export could not complete; the cause is detailed in the log.</p></td>\n            </tr>\n          </tbody>\n        </table>\n      </dd></dl>\n    <h2>Export Textures<a className=\"headerlink\" href=\"#export-textures\" title=\"Link to this heading\"> </a></h2>\n    <dl className=\"py function\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.list_project_textures\">\nsubstance_painter.export.list_project_textures(<em className=\"sig-param\">json_config: dict</em>) → Dict[Tuple[str, str], List[str]]<a className=\"headerlink\" href=\"#substance_painter.export.list_project_textures\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Get list of textures that would be exported according to the given JSON configuration.</p>\n        <dl className=\"field-list simple\">\n          <dt className=\"field-odd\">Parameters:</dt>\n          <dd className=\"field-odd\"><p className><strong>json_config</strong> (<em>dict</em>) – JSON object representing the export configuration to be used.</p>\n          </dd>\n          <dt className=\"field-even\">Returns:</dt>\n          <dd className=\"field-even\"><p className>List of texture files\nthat would be exported, grouped by stack (Texture Set name, stack name).</p>\n          </dd>\n          <dt className=\"field-odd\">Return type:</dt>\n          <dd className=\"field-odd\"><p className><em>Dict</em>[<em>Tuple</em>[str, str], <em>List</em>[str]]</p>\n          </dd>\n          <dt className=\"field-even\">Raises:</dt>\n          <dd className=\"field-even\"><ul className=\"simple\">\n              <li><p className><a className=\"reference internal\" href=\"exception.html#substance_painter.exception.ProjectError\" title=\"substance_painter.exception.ProjectError\"><strong>ProjectError</strong></a> – If no project is opened.</p></li>\n              <li><p className><strong>ValueError</strong> – If <code className=\"docutils literal notranslate\">json_config</code> is ill-formed, or is invalid in the context\n    of the current project.\n    Contains a human readable message.</p></li>\n            </ul>\n          </dd>\n        </dl>\n        <div className=\"admonition seealso\">\n          <p className>See also</p>\n          <p className><a className=\"reference internal\" href=\"#substance_painter.export.export_project_textures\" title=\"substance_painter.export.export_project_textures\"><code className=\"xref py py-func docutils literal notranslate\">export_project_textures()</code></a>.</p>\n        </div>\n      </dd></dl>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.TextureExportResult\">\n        <em className=\"property\">class </em>substance_painter.export.TextureExportResult(<em className=\"sig-param\">status: <a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></em>, <em className=\"sig-param\">message: str</em>, <em className=\"sig-param\">textures: Dict[Tuple[str, str], List[str]]</em>)<a className=\"headerlink\" href=\"#substance_painter.export.TextureExportResult\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Result of the export textures process</p>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\" id=\"substance_painter.export.TextureExportResult.status\">\nstatus<a className=\"headerlink\" href=\"#substance_painter.export.TextureExportResult.status\" title=\"Link to this definition\"> </a></dt>\n          <dd><p className>Status code.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></p>\n              </dd>\n            </dl>\n          </dd></dl>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\" id=\"substance_painter.export.TextureExportResult.message\">\nmessage<a className=\"headerlink\" href=\"#substance_painter.export.TextureExportResult.message\" title=\"Link to this definition\"> </a></dt>\n          <dd><p className>Human readable status message.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className>str</p>\n              </dd>\n            </dl>\n          </dd></dl>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\" id=\"substance_painter.export.TextureExportResult.textures\">\ntextures<a className=\"headerlink\" href=\"#substance_painter.export.TextureExportResult.textures\" title=\"Link to this definition\"> </a></dt>\n          <dd><p className>List of texture files\nwritten to disk, grouped by stack (Texture Set name, stack name).</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className><em>Dict</em>[<em>Tuple</em>[str, str], <em>List</em>[str]]</p>\n              </dd>\n            </dl>\n          </dd></dl>\n      </dd></dl>\n    <dt className=\"sig sig-object py\" id=\"substance_painter.export.export_project_textures\">\nsubstance_painter.export.export_project_textures(<em className=\"sig-param\">json_config: dict</em>) → <a className=\"reference internal\" href=\"#substance_painter.export.TextureExportResult\" title=\"substance_painter.export.TextureExportResult\">TextureExportResult</a><a className=\"headerlink\" href=\"#substance_painter.export.export_project_textures\" title=\"Link to this definition\"> </a></dt>\n    <p className>Export document textures according to the given JSON configuration. The\nreturn value contains the list of texture files written to disk.</p>\n    <p className>The status of the return value can never be <cite>Error</cite>, any error causing the\n export to fail will raise an exception instead. However if the  export fails,\nthe associated event <cite>ExportTextureEnded</cite> will indeed receive <cite>Error</cite> as a\nstatus.\nIf the export is cancelled by the user, the function return value will have\nthe status <cite>Cancelled</cite> and contain the list of texture files written to disk\nbefore export was cancelled.</p>\n    <dl className=\"field-list simple\">\n      <dt className=\"field-odd\">Parameters:</dt>\n      <dd className=\"field-odd\"><p className><strong>json_config</strong> (<em>dict</em>) – JSON object representing the export configuration to be used.</p>\n      </dd>\n      <dt className=\"field-even\">Returns:</dt>\n      <dd className=\"field-even\"><p className>Result of the export process.</p>\n      </dd>\n      <dt className=\"field-odd\">Return type:</dt>\n      <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"#substance_painter.export.TextureExportResult\" title=\"substance_painter.export.TextureExportResult\">TextureExportResult</a></p>\n      </dd>\n      <dt className=\"field-even\">Raises:</dt>\n      <dd className=\"field-even\"><ul className=\"simple\">\n          <li><p className><a className=\"reference internal\" href=\"exception.html#substance_painter.exception.ProjectError\" title=\"substance_painter.exception.ProjectError\"><strong>ProjectError</strong></a> – If no project is opened.</p></li>\n          <li><p className><strong>ValueError</strong> – If <code className=\"docutils literal notranslate\">json_config</code> is ill-formed, or is invalid in the context\n    of the current project. Contains a human readable message detailing\n    the problem.</p></li>\n        </ul>\n      </dd>\n    </dl>\n    <div className=\"admonition seealso\">\n      <p className>See also</p>\n      <p className><a className=\"reference internal\" href=\"event.html#substance_painter.event.ExportTexturesAboutToStart\" title=\"substance_painter.event.ExportTexturesAboutToStart\"><code className=\"xref py py-class docutils literal notranslate\">substance_painter.event.ExportTexturesAboutToStart</code></a>,\n        <a className=\"reference internal\" href=\"event.html#substance_painter.event.ExportTexturesEnded\" title=\"substance_painter.event.ExportTexturesEnded\"><code className=\"xref py py-class docutils literal notranslate\">substance_painter.event.ExportTexturesEnded</code></a>.</p>\n    </div>\n    <p className>Example:</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.export\n\n# Open a project we want to export from (see substance_painter.project\n# for details). This step is not necessary if there is already a project\n# opened in Substance 3D Painter.\nimport substance_painter.project\nsubstance_painter.project.open(\"C:/projects/MeetMat.spp\")\n\n# Choose an export preset to use (see substance_painter.resource). This\n# step is not mandatory as you can alternatively describe the export\n# preset entirely in JSON (see the full example at the bottom of the\n# page).\n# Note: in this example the preset file format and bit depth are\n# overridden below for '03_Base', but otherwise follow the export preset\n# configuration.\nimport substance_painter.resource\nexport_preset = substance_painter.resource.ResourceID(\n    context=\"starter_assets\", name=\"Arnold (AiStandard)\")\n\n# Set the details of the export (a comprehensive example of all the\n# configuration options is presented at the bottom of the page):\nexport_config = {\n    \"exportShaderParams\": False,\n    \"exportPath\": \"C:/export\",\n    \"defaultExportPreset\" : export_preset.url(),\n    \"exportList\": [\n        {\n            \"rootPath\": \"01_Head\"\n        },\n        {\n            \"rootPath\": \"02_Body\"\n        },\n        {\n            \"rootPath\": \"03_Base\"\n        }],\n    \"exportParameters\": [\n        # No filters: those parameters apply to all exported maps\n        {\n            \"parameters\": {\n                \"dithering\": True,\n                \"paddingAlgorithm\": \"infinite\"\n            }\n        },\n        # Force file format and bitDepth for all maps in '03_Base'\n        {\n            \"filter\": {\"dataPaths\": [\"03_Base\"]},\n            \"parameters\": {\n                \"fileFormat\" : \"png\",\n                \"bitDepth\" : \"8\"\n            }\n        },\n        # Force 2K size for all maps in '01_Head'\n        {\n            \"filter\": {\"dataPaths\": [\"01_Head\"]},\n            \"parameters\": {\n                \"sizeLog2\": 11\n            }\n        }]\n    }\n\n# Display the list of textures that should be exported, according to the\n# configuration:\nexport_list = substance_painter.export.list_project_textures(export_config)\nfor k,v in export_list.items():\n    print(\"Stack {0}:\".format(k))\n    for to_export in v:\n        print(to_export)\n\n# Actual export operation:\nexport_result = substance_painter.export.export_project_textures(export_config)\n\n# In case of error, display a human readable message:\nif export_result.status != substance_painter.export.ExportStatus.Success:\n    print(export_result.message)\n\n# Display the details of what was exported:\nfor k,v in export_result.textures.items():\n    print(\"Stack {0}:\".format(k))\n    for exported in v:\n        print(exported)\n`}</code></pre>\n    <div className=\"admonition seealso\">\n      <p className>See also</p>\n      <p className><a className=\"reference internal\" href=\"project.html#module-substance_painter.project\" title=\"substance_painter.project\"><code className=\"xref py py-mod docutils literal notranslate\">substance_painter.project</code></a>,\n        <a className=\"reference internal\" href=\"resource.html#module-substance_painter.resource\" title=\"substance_painter.resource\"><code className=\"xref py py-mod docutils literal notranslate\">substance_painter.resource</code></a>,\n        <a className=\"reference external\" href=\"https://www.adobe.com/go/painter-export\">Export documentation</a>.</p>\n    </div>\n    <dl className=\"py function\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.get_default_export_path\">\nsubstance_painter.export.get_default_export_path() → str<a className=\"headerlink\" href=\"#substance_painter.export.get_default_export_path\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Get the default export path used for exporting textures.</p>\n        <dl className=\"field-list simple\">\n          <dt className=\"field-odd\">Returns:</dt>\n          <dd className=\"field-odd\"><p className>The default export path.</p>\n          </dd>\n          <dt className=\"field-even\">Return type:</dt>\n          <dd className=\"field-even\"><p className>str</p>\n          </dd>\n        </dl>\n      </dd></dl>\n    <h2>Full json_config dict possibilities<a className=\"headerlink\" href=\"#full-json-config-dict-possibilities\" title=\"Link to this heading\"> </a></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n\n    // Path to the root folder where texture files will be exported.\n    \"exportPath\" : \"C:/export\",\n\n    // Whether to export shader instances to a JSON file.\n    \"exportShaderParams\" : true,\n\n    // (optional) Export preset to be used when no export preset is provided in\n    // \"exportList.exportPreset\".\n    // The value can be the name of a preset defined in the \"exportPresets\" part\n    // of the configuration JSON:\n    \"defaultExportPreset\" : \"preset1\",\n    // Alternatively the value can be a URL to an existing preset file (see\n    // substance_painter.resource) listed in the export dialog:\n    // \"defaultExportPreset\" : substance_painter.resource.ResourceID(\n    //   context=\"starter_assets\",\n    //   name=\"PBR Metallic Roughness\").url(),\n\n    // (optional) List of export presets definitions.\n    \"exportPresets\" : [{\n\n      // Defines the name of the export preset. This name can be referenced in\n      // \"defaultExportPreset\" and/or \"exportList.exportPreset\".\n      \"name\" : \"preset1\",\n\n      // List of maps making up this export preset.\n      \"maps\" : [{\n\n        // Filename of the texture file written to disk; may contain wildcards\n        // resolved at export time.\n        // (e.g. \"$project_$mesh_$textureSet_$udim_$sceneMaterial_BaseColor\")\n        //\n        //   $project: Project name.\n        //   $mesh: Filename of the imported mesh.\n        //   $textureSet: Current Texture Set.\n        //   $sceneMaterial: Current material name, as found in the imported\n        //   mesh.\n        //   $udim: Current UV Tile (e.g. 1001).\n        \"fileName\" : \"$textureSet_color\",\n\n        // List of source/destination defining which channels will make up the\n        // texture file.\n        \"channels\" : [{\n\n          // Channel to write to.\n          //     L (Luminance), R (Red), G (Green), B (Blue), A (Alpha)\n          //\n          // In addition to alpha channel, either R+G+B must be specified, or\n          // either L only.\n          \"destChannel\" : \"R\",\n\n          // Channel to read from.\n          //     L, R, G, B, A\n          //\n          // When the source map is color, L will generate a mix of R+G+B.\n          \"srcChannel\" : \"R\",\n\n          // The type of map to read from:\n          //     documentMap: Maps present in the document (e.g. \"baseColor\").\n          //     meshMap: Baked mesh maps (e.g. \"normal\").\n          //     virtualMap: Generated map (e.g. \"f0\").\n          //     defaultMap: Constant color (e.g. \"black\").\n          \"srcMapType\" : \"documentMap\",\n\n          // Name of the map of type scrMapType.\n          //\n          // For type documentMap:\n          //     basecolor, height, specular, opacity, emissive, displacement,\n          //     glossiness, roughness, anisotropylevel, anisotropyangle,\n          //     transmissive, scattering, reflection, ior, metallic, normal,\n          //     ambientOcclusion, diffuse, specularlevel, blendingmask, user0,\n          //     user1, user2, user3, user4, user5, user6, user7.\n          //\n          // For type meshMap:\n          //     ambient_occlusion, id, curvature, normal_base,\n          //     world_space_normals, position, thickness.\n          //\n          // For type virtualMap:\n          //     Normal_OpenGL, Normal_DirectX, AO_Mixed, Diffuse, Specular,\n          //     Glossiness, Unity4Diff, Unity4Gloss, reflection, 1/ior,\n          //     Glossiness2, f0, View_2D.\n          //\n          // For type defaultMap:\n          //    black, white.\n          \"srcMapName\" : \"baseColor\"\n\n        }],\n\n        // (optional) Export parameters to be used for this export preset map.\n        //\n        // When \"parameters\" is not provided, the existing parameters are used.\n        // When \"parameters\" is provided, it overrides the existing parameters.\n        //\n        // Each individual parameter is optional and, when defined, overrides\n        // previously defined parameters. See in exportList.parameters how the\n        // rules are applied.\n        //\n        // It is important to understand that even though this section is\n        // optional, if after evaluating all the rules some parameters remain\n        // undefined, the configuration is invalid.\n        \"parameters\" : {\n\n          // (optional) File format (and file extension) of the generated\n          // texture file.\n          \"fileFormat\" : \"png\",\n\n          // (optional) Bit depth.\n          //\n          // The bit depth must be supported by the file format.\n          \"bitDepth\" : \"16\",\n\n          // (optional) Whether to use dithering.\n          \"dithering\" : false,\n\n          // (optional) Size of the texture file in log2.\n          // (i.e. 10 means 2^10 = 1024)\n          //\n          // When \"sizeLog2\" is not provided, the texture size from the project\n          // is used.\n          //\n          // It can either be a single integer, or an array of two integers.\n          //\n          // If it's a single integer, it represents the biggest of width and\n          // height, and will maintain the aspect ratio.\n          // (i.e. 10 means a 2048x4086 map will be exported as 512x1024)\n          //\n          // If it's an array of two integers, the original aspect ratio will be\n          // ignored.\n          // (i.e. [10, 12] means a 2048x4086 map will be exported as 1024x4096)\n          \"sizeLog2\" : 10,\n\n          // (optional) Padding algorithm used to fill holes in rendered\n          // texture.\n          //\n          // The possible values are:\n          //     passthrough, color, transparent, diffusion, infinite.\n          \"paddingAlgorithm\" : \"diffusion\",\n\n          // (optional) When padding algorithm needs it, distance in pixels used\n          // by the padding algorithm.\n          //\n          // Dilation distance is needed for transparent, color and diffusion\n          // padding algorithms.\n          \"dilationDistance\" : 16\n\n        }\n      }]\n    }],\n\n    // List of subparts of the document to export.\n    \"exportList\" : [{\n\n      // Root path of the document structure this subpart applies to.\n      //\n      // For Texture Sets without stacks, this is a Texture Set name.\n      // (e.g. \"O1_Head\")\n      // For Texture Sets with stacks, this is Texture Set name + stack name\n      // separated by /\n      \"rootPath\" : \"02_Body/Mask\",\n\n      // (optional) In the selected rootPath, which maps to export.\n      //\n      // When \"filter\" is not provided, export everything.\n      \"filter\" : {\n\n        // Which maps to export, as an array of map names.\n        //\n        // The map names are to be used as defined in\n        // exportPresets.maps.fileName, including wildcards.\n        // (e.g. [\"$textureSet_color\", \"$textureSet_normal\"])\n        \"outputMaps\" : [\"$textureSet_color\"],\n\n        // Which UV Tiles to export, as an array of tile coordinates.\n        // A tile coordinate is a 2 dimensional array of U and V coordinates.\n        // (e.g. [[1, 1], [1, 2]] to export tiles U=1, V=1 and U=1, V=2)\n        \"uvTiles\" : [[1, 1]]\n\n      },\n\n      // (optional) Export preset to use. If undefined, fall back to\n      // \"defaultExportPreset\" value.\n      // The value can be the name of a preset defined in \"exportPresets\":\n      \"exportPreset\" : \"preset1\"\n      // Alternatively the value can be a URL to an existing preset file (see\n      // substance_painter.resource) listed in the export dialog:\n      // \"defaultExportPreset\" : substance_painter.resource.ResourceID(\n      //     context=\"starter_assets\",\n      //     name=\"PBR Metallic Roughness\").url(),\n\n    }],\n\n    // List of rules used to override export parameters of texture files.\n    //\n    // For each exported texture file, the export process will go through this\n    // list, in the order they are provided, to override export parameters.\n    // Available export parameters are:\n    //  fileFormat, bitDepth, dithering, sizeLog2, paddingAlgorithm and\n    //  dilationDistance.\n    // (see exportPresets.map.parameters)\n    //\n    // For each possible export parameter of each texture file:\n    // First, the parameter is initialized with the value provided by the\n    // exportPreset.maps.parameters, if any.\n    // Then, the export process iterates the rules of exportParameters and tries\n    // to match the texture file with the filter.\n    // If the filter matches, the parameter is overridden by this rule, else it\n    // stays untouched.\n    //\n    // At the end of the process, every parameter of every texture file must be\n    // defined for the export process to be able to continue.\n    // To achieve this, a good practice may be to define a default value for all\n    // the parameters:\n    // - For each preset map\n    // - With a global exportParameters rule using a filter that always matches\n    \"exportParameters\" : [{\n\n      // (optional) Select which texture files match the current rule.\n      // (i.e. for which texture files this rule will override parameters)\n      //\n      // When \"filter\" is not provided, select everything.\n      //\n      // Examples:\n      //     Filter that matches all:\n      //         \"filter\" : {}\n      //\n      //     Filter that matches some Texture Sets:\n      //         \"filter\" : {\"dataPaths\": [\"01_Head\", \"02_Body\"]}\n      //\n      //     Filter that matches some outputMaps:\n      //         \"filter\" : {\"outputMaps\": [\"$textureSet_color\"]}\n      //\n      //     Filter that matches nothing:\n      //         \"filter\" : {\"dataPaths\": []}\n      //\n      //     Use of a combined filter to match a Texture Set for some\n      //     outputMaps:\n      //         \"filter\" : {\"dataPaths\": [\"01_Head\"],\n      //     \"outputMaps\" : [\"$textureSet_color\"]}\n      \"filter\" : {\n\n        // List of rootPaths to match.\n        //\n        // This can be a mix of:\n        // - Texture Set names only, even for Texture Sets with stacks\n        // - Stack names, when stacks are used\n        \"dataPaths\": [\"01_Head\", \"02_Body/Mask\"],\n\n        // List of map names to match.\n        //\n        // The map names are to be used as defined in \"exportPresets.maps.fileName\",\n        // including wildcards.\n        \"outputMaps\": [\"$textureSet_color\"],\n\n         // List of UV Tiles to match, as an array of tile coordinates.\n         // A tile coordinate is a 2 dimensional array of U and V coordinates.\n         // (e.g. [[1, 1], [1, 2]] to export tiles U=1, V=1 and U=1, V=2)\n         \"uvTiles\" : [[1, 1]]\n\n      },\n\n      // (optional) Parameters to apply to the matched texture files as per the\n      // current rule.\n      //\n      // When \"parameters\" is not provided, the existing parameters are used.\n      // When \"parameters\" is provided, it overrides the existing parameters.\n      //\n      // Each individual parameter is optional and, when defined, overrides\n      // previously defined parameters (coming from the selected preset).\n      //\n      // It is important to understand that even though this section is\n      // optional, if after evaluating all the rules some parameters remain\n      // undefined, the configuration is invalid.\n      //\n      // In this example, we're setting a different texture size for the color\n      // map of both 01_Head and 02_Body/Mask, leaving settings on maps and\n      // other data paths, and leaving the other parameters untouched.\n      \"parameters\" : {\n\n        \"sizeLog2\" :  11\n\n      }\n    }]\n}\n`}</code></pre>\n    <h2>Events<a className=\"headerlink\" href=\"#events\" title=\"Link to this heading\"> </a></h2>\n    <p className>Exporting textures, whether initiated through the Python API or in the UI,\ncan trigger the following events.\nSee <a className=\"reference internal\" href=\"event.html#module-substance_painter.event\" title=\"substance_painter.event\"><code className=\"xref py py-mod docutils literal notranslate\">substance_painter.event</code></a> for more details.</p>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\">\n        <em className=\"property\">class </em>substance_painter.event.ExportTexturesAboutToStart(<em className=\"sig-param\">textures: Dict[Tuple[str, str], List[str]]</em>)</dt>\n      <dd><p className>Event triggered just before a textures export.</p>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\">\ntextures<em className=\"property\">: Dict[Tuple[str, str], List[str]]</em></dt>\n          <dd><p className>List of texture files\nto be written to disk, grouped by stack (Texture Set name, stack name).</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className>Dict[Tuple[str, str], List[str]]</p>\n              </dd>\n            </dl>\n          </dd></dl>\n      </dd></dl>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\">\n        <em className=\"property\">class </em>substance_painter.event.ExportTexturesEnded(<em className=\"sig-param\">status: <a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></em>, <em className=\"sig-param\">message: str</em>, <em className=\"sig-param\">textures: Dict[Tuple[str, str], List[str]]</em>)</dt>\n      <dd><p className>Event triggered after textures export is finished.</p>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\">\nmessage<em className=\"property\">: str</em></dt>\n          <dd><p className>Human readable status message.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className>str</p>\n              </dd>\n            </dl>\n          </dd></dl>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\">\nstatus<em className=\"property\">: <a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></em></dt>\n          <dd><p className>Status code.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></p>\n              </dd>\n            </dl>\n          </dd></dl>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\">\ntextures<em className=\"property\">: Dict[Tuple[str, str], List[str]]</em></dt>\n          <dd><p className>List of texture files\nwritten to disk, grouped by stack (Texture Set name, stack name).</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className>Dict[Tuple[str, str], List[str]]</p>\n              </dd>\n            </dl>\n          </dd></dl>\n      </dd></dl>\n    <h2>Export Mesh<a className=\"headerlink\" href=\"#export-mesh\" title=\"Link to this heading\"> </a></h2>\n    <dl className=\"py function\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.scene_is_triangulated\">\nsubstance_painter.export.scene_is_triangulated() → bool<a className=\"headerlink\" href=\"#substance_painter.export.scene_is_triangulated\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Check if the scene has only triangles (polygons with only 3 sides).</p>\n        <dl className=\"field-list simple\">\n          <dt className=\"field-odd\">Returns:</dt>\n          <dd className=\"field-odd\"><p className>True if the current scene has only triangles, False otherwise.</p>\n          </dd>\n          <dt className=\"field-even\">Return type:</dt>\n          <dd className=\"field-even\"><p className>bool</p>\n          </dd>\n          <dt className=\"field-odd\">Raises:</dt>\n          <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"exception.html#substance_painter.exception.ProjectError\" title=\"substance_painter.exception.ProjectError\"><strong>ProjectError</strong></a> – If no project is opened.</p>\n          </dd>\n        </dl>\n      </dd></dl>\n    <dl className=\"py function\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.scene_has_tessellation\">\nsubstance_painter.export.scene_has_tessellation() → bool<a className=\"headerlink\" href=\"#substance_painter.export.scene_has_tessellation\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Check if the scene has displacement/tessellation enabled.</p>\n        <dl className=\"field-list simple\">\n          <dt className=\"field-odd\">Returns:</dt>\n          <dd className=\"field-odd\"><p className>True if the current scene has displacement/tessellation, False otherwise.</p>\n          </dd>\n          <dt className=\"field-even\">Return type:</dt>\n          <dd className=\"field-even\"><p className>bool</p>\n          </dd>\n          <dt className=\"field-odd\">Raises:</dt>\n          <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"exception.html#substance_painter.exception.ProjectError\" title=\"substance_painter.exception.ProjectError\"><strong>ProjectError</strong></a> – If no project is opened.</p>\n          </dd>\n        </dl>\n      </dd></dl>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.MeshExportOption\">\n        <em className=\"property\">class </em>substance_painter.export.MeshExportOption(<em className=\"sig-param\">value</em>)<a className=\"headerlink\" href=\"#substance_painter.export.MeshExportOption\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Options available for the mesh export.</p>\n        <p className>Members:</p>\n        <table className=\"docutils align-default\">\n          <thead>\n            <tr className=\"row-odd\"><th className=\"head\"><p className>Name</p></th>\n              <th className=\"head\"><p className>Description</p></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr className=\"row-even\"><td><p className><code className=\"docutils literal notranslate\">BaseMesh</code></p></td>\n              <td><p className>Export without displacement/tesselation.</p></td>\n            </tr>\n            <tr className=\"row-odd\"><td><p className><code className=\"docutils literal notranslate\">TriangulatedMesh</code></p></td>\n              <td><p className>Export without displacement/tesselation and apply triangulation.\nTriangulation converts all mesh polygons with more than 3 sides\nto triangles (but doesn’t change the triangular ones).\nOnly avaiblable if the mesh contains such polygons.</p></td>\n            </tr>\n            <tr className=\"row-even\"><td><p className><code className=\"docutils literal notranslate\">TessellationNormalsBaseMesh</code></p></td>\n              <td><p className>Export with displacement/tessellation. Only available if\ndisplacement or tessellation has been used in the shaders.</p></td>\n            </tr>\n            <tr className=\"row-odd\"><td><p className><code className=\"docutils literal notranslate\">TessellationRecomputeNormals</code></p></td>\n              <td><p className>Export with displacement/tessellation and recompute vertex\nnormals. Only available if displacement or\ntessellation has been used in the shaders.</p></td>\n            </tr>\n          </tbody>\n        </table>\n      </dd></dl>\n    <dl className=\"py class\">\n      <dt className=\"sig sig-object py\" id=\"substance_painter.export.MeshExportResult\">\n        <em className=\"property\">class </em>substance_painter.export.MeshExportResult(<em className=\"sig-param\">status: <a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></em>, <em className=\"sig-param\">message: str</em>)<a className=\"headerlink\" href=\"#substance_painter.export.MeshExportResult\" title=\"Link to this definition\"> </a></dt>\n      <dd><p className>Result of the export mesh process</p>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\" id=\"substance_painter.export.MeshExportResult.status\">\nstatus<a className=\"headerlink\" href=\"#substance_painter.export.MeshExportResult.status\" title=\"Link to this definition\"> </a></dt>\n          <dd><p className>Status code.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"#substance_painter.export.ExportStatus\" title=\"substance_painter.export.ExportStatus\">ExportStatus</a></p>\n              </dd>\n            </dl>\n          </dd></dl>\n        <dl className=\"py attribute\">\n          <dt className=\"sig sig-object py\" id=\"substance_painter.export.MeshExportResult.message\">\nmessage<a className=\"headerlink\" href=\"#substance_painter.export.MeshExportResult.message\" title=\"Link to this definition\"> </a></dt>\n          <dd><p className>Human readable status message.</p>\n            <dl className=\"field-list simple\">\n              <dt className=\"field-odd\">Type:</dt>\n              <dd className=\"field-odd\"><p className>str</p>\n              </dd>\n            </dl>\n          </dd></dl>\n      </dd></dl>\n    <dt className=\"sig sig-object py\" id=\"substance_painter.export.export_mesh\">\nsubstance_painter.export.export_mesh(<em className=\"sig-param\">file_path: str</em>, <em className=\"sig-param\">option: <a className=\"reference internal\" href=\"#substance_painter.export.MeshExportOption\" title=\"substance_painter.export.MeshExportOption\">MeshExportOption</a></em>) → <a className=\"reference internal\" href=\"#substance_painter.export.MeshExportResult\" title=\"substance_painter.export.MeshExportResult\">MeshExportResult</a><a className=\"headerlink\" href=\"#substance_painter.export.export_mesh\" title=\"Link to this definition\"> </a></dt>\n    <p className>Export the current mesh to the given file path.</p>\n    <dl className=\"field-list simple\">\n      <dt className=\"field-odd\">Parameters:</dt>\n      <dd className=\"field-odd\"><ul className=\"simple\">\n          <li><p className><strong>file_path</strong> (<em>string</em>) – The complete file path where to export the mesh. The file format is\ndeduced from the extension.\nSupported extensions are: <code className=\"docutils literal notranslate\">.usd</code>, <code className=\"docutils literal notranslate\">.obj</code>, <code className=\"docutils literal notranslate\">.fbx</code>, <code className=\"docutils literal notranslate\">.dae</code>, <code className=\"docutils literal notranslate\">.ply</code>, <code className=\"docutils literal notranslate\">.gltf</code>.</p></li>\n          <li><p className><strong>option</strong> (<a className=\"reference internal\" href=\"#substance_painter.export.MeshExportOption\" title=\"substance_painter.export.MeshExportOption\"><em>MeshExportOption</em></a>) – The export option to use.</p></li>\n        </ul>\n      </dd>\n      <dt className=\"field-even\">Returns:</dt>\n      <dd className=\"field-even\"><p className>Result of the export process.</p>\n      </dd>\n      <dt className=\"field-odd\">Return type:</dt>\n      <dd className=\"field-odd\"><p className><a className=\"reference internal\" href=\"#substance_painter.export.MeshExportResult\" title=\"substance_painter.export.MeshExportResult\">MeshExportResult</a></p>\n      </dd>\n      <dt className=\"field-even\">Raises:</dt>\n      <dd className=\"field-even\"><ul className=\"simple\">\n          <li><p className><a className=\"reference internal\" href=\"exception.html#substance_painter.exception.ProjectError\" title=\"substance_painter.exception.ProjectError\"><strong>ProjectError</strong></a> – If no project is opened.</p></li>\n          <li><p className><strong>ValueError</strong> – If <code className=\"docutils literal notranslate\">file_path</code> or <code className=\"docutils literal notranslate\">option</code> are invalid in the context\n    of the current project. Contains a human readable message detailing\n    the problem.</p></li>\n        </ul>\n      </dd>\n    </dl>\n    <p className>Example:</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.export\n\n# Open a project we want to export from (see substance_painter.project\n# for details). This step is not necessary if there is already a project\n# opened in Substance 3D Painter.\nimport substance_painter.project\nsubstance_painter.project.open(\"C:/projects/MeetMat.spp\")\n\n# Choose an export option to use\nexport_option = substance_painter.export.MeshExportOption.BaseMesh\nif not substance_painter.export.scene_is_triangulated():\n    export_option = substance_painter.export.MeshExportOption.TriangulatedMesh\nif substance_painter.export.scene_has_tessellation():\n    export_option = substance_painter.export.MeshExportOption.TessellationNormalsBaseMesh\n\n# Actual export mesh operation:\nfilename = \"C:/projects/MeetMat.obj\"\nexport_result = substance_painter.export.export_mesh(filename, export_option)\n\n# In case of error, display a human readable message:\nif export_result.status != substance_painter.export.ExportStatus.Success:\n    print(export_result.message)\n`}</code></pre>\n    <div className=\"admonition seealso\">\n      <p className>See also</p>\n      <p className><a className=\"reference internal\" href=\"project.html#module-substance_painter.project\" title=\"substance_painter.project\"><code className=\"xref py py-mod docutils literal notranslate\">substance_painter.project</code></a>,\n        <a className=\"reference external\" href=\"https://www.adobe.com/go/painter-export\">Export documentation</a>.</p>\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","className","href","title","id","parentName","isMDXComponent"],"sourceRoot":""}