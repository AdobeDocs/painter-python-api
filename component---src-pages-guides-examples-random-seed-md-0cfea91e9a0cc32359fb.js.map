{"version":3,"file":"component---src-pages-guides-examples-random-seed-md-0cfea91e9a0cc32359fb.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,oCAAkC,qCAE1CA,EAAAA,EAAAA,KAAA,yJACAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,yCAA0CH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvE,KAAQ,sDAAoD,aAC1C,oBACtBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0BAA2BH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,mBACrEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,wBAAyBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UAAQ,QAAkB,SACjHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,2CAGvBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,+8GA2HtC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/examples/random_seed.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"randomize-all-seeds-in-a-project\"\n    }}>{`Randomize all seeds in a project`}</h1>\n    <p>{`This example adds an action in the Edit menu to randomize all the random seed properties from the Substance present in the current project.`}</p>\n    <hr></hr>\n    <p>{`To use this example:`}</p>\n    <blockquote>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`Go to your Python plugin folder (see `}<a parentName=\"li\" {...{\n            \"href\": \"/painter-python-api/guides/creating-python-plugin/\"\n          }}>{`this page`}</a>{` to know where)`}</li>\n        <li parentName=\"ol\">{`Create a folder named `}<strong parentName=\"li\">{`blending_mode`}</strong></li>\n        <li parentName=\"ol\">{`Create a file named `}<strong parentName=\"li\"><strong parentName=\"strong\">{`init`}</strong>{`.py`}</strong></li>\n        <li parentName=\"ol\">{`Copy the code below inside the file.`}</li>\n      </ol>\n    </blockquote>\n    <hr></hr>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os\nimport re\nimport sys\nimport math\nimport json\nimport random\nfrom datetime import datetime\n\nfrom PySide2 import QtGui\nfrom PySide2 import QtCore\nfrom PySide2 import QtWidgets\nimport substance_painter as sp\nimport substance_painter_plugins as spp\n\nWIDGETS = []\n\nValidNodeTypes = (\n    sp.layerstack.NodeType.FillLayer,\n    sp.layerstack.NodeType.FillEffect,\n    sp.layerstack.NodeType.FilterEffect,\n    sp.layerstack.NodeType.GeneratorEffect\n)\n\ndef GetSourceMode( Source ) :\n    try:\n        return Source.source_mode\n    except:\n        return None\n\ndef CheckForRandomseed( CurrentSource, Sources ) :\n    if type( CurrentSource ) == sp.source.SourceSubstance :\n        Parameters = CurrentSource.get_parameters()\n\n        # Check if the Substance has a random seed\n        if \"$randomseed\" in Parameters :\n            Sources.append( CurrentSource )\n\n        # Check if any of the inputs of the Substance has another\n        # Substance with a random seed too\n        for Name in CurrentSource.image_inputs :\n            InputSource = CurrentSource.get_source( Name )\n            CheckForRandomseed( InputSource, Sources )\n\ndef FindSources( Node, Sources ) :\n    if Node.get_type() in ValidNodeTypes :\n        Source = []\n        Mode = GetSourceMode( Node )\n\n        if Mode == sp.source.SourceMode.Material :\n            Source.append( Node.get_material_source() )\n\n        elif Mode == sp.source.SourceMode.Split :\n            for Channel in Node.active_channels :\n                Source.append( Node.get_source( Channel ) )\n\n        else :\n            Source.append( Node.get_source() )\n\n        for CurrentSource in Source :\n            CheckForRandomseed( CurrentSource, Sources )\n\ndef IterateLayer( Parent, Sources ) :\n    if Parent.get_type() == sp.layerstack.NodeType.FillLayer :\n        FindSources( Parent, Sources )\n\n    if Parent.get_type() == sp.layerstack.NodeType.FillLayer \\\\\n    or Parent.get_type() == sp.layerstack.NodeType.GroupLayer \\\\\n    or Parent.get_type() == sp.layerstack.NodeType.PaintLayer :\n        for Effect in Parent.content_effects() :\n            FindSources( Effect, Sources )\n\n        for Effect in Parent.mask_effects() :\n            FindSources( Effect, Sources )\n\n    if Parent.get_type() == sp.layerstack.NodeType.GroupLayer :\n        for Layer in Parent.sub_layers() :\n            IterateLayer( Layer, Sources )\n\ndef RandomizeSeed() :\n    if not sp.project.is_open():\n        sp.logging.warning( \"No project open\" )\n        return\n\n    # Sources list\n    Sources = []\n\n    # List all stacks and gather their resources\n    for TextureSet in sp.textureset.all_texture_sets() :\n        for Stack in TextureSet.all_stacks() :\n            for Layer in sp.layerstack.get_root_layer_nodes( Stack ) :\n                IterateLayer( Layer, Sources )\n\n    # Setup parameters\n    Parameters = { \"$randomseed\" : random.getrandbits(16) }\n\n    # Batch\n    with sp.layerstack.ScopedModification( \"Randomize all the seeds\" ) :\n        for Source in Sources :\n            Source.set_parameters( Parameters )\n\ndef start_plugin():\n    Action = QtWidgets.QAction(\n        \"Randomize all seeds\",\n        triggered=RandomizeSeed\n    )\n\n    sp.ui.add_action(\n        sp.ui.ApplicationMenu.Edit,\n        Action\n    )\n\n    WIDGETS.append( Action )\n\ndef close_plugin():\n    for Widget in WIDGETS :\n        sp.ui.delete_ui_element( Widget )\n\nif __name__ == \"__main__\":\n    start_plugin()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}