"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7324],{48993:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return i},default:function(){return o}});var s=t(87462),n=t(63366),l=(t(15007),t(64983)),d=t(91515),m=["components"],i={},r={_frontmatter:i},c=d.Z;function o(e){var a=e.components,t=(0,n.Z)(e,m);return(0,l.mdx)(c,(0,s.Z)({},r,t,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)("h1",null,"Channel class",(0,l.mdx)("a",{className:"headerlink",href:"#channel-class",title:"Link to this heading"}," ")),(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel"},(0,l.mdx)("em",{className:"property"},"class "),"substance_painter.textureset.Channel(",(0,l.mdx)("em",{className:"sig-param"},"channel_id: int | None = None"),")",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel",title:"Link to this definition"}," ")),(0,l.mdx)("p",{className:!0},"A ",(0,l.mdx)("cite",null,"Substance 3D Painter")," channel."),(0,l.mdx)("p",{className:!0},"A channel can be one of the predefined types (",(0,l.mdx)("cite",null,"BaseColor"),", ",(0,l.mdx)("cite",null,"Specular"),", ",(0,l.mdx)("cite",null,"Roughness"),", etc.) or a user defined type (",(0,l.mdx)("cite",null,"User0")," to ",(0,l.mdx)("cite",null,"User7"),"), corresponding to the material. The channel belongs to a stack. The stack can have one or more of them, but it can have only one channel of each ",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},(0,l.mdx)("code",{className:"xref py py-class docutils literal notranslate"},"ChannelType")),"."),(0,l.mdx)("p",{className:!0},"Example"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter.textureset\n\n# Get the unnamed stack of "TextureSetName":\npaintable_stack = substance_painter.textureset.Stack.from_name("TextureSetName")\n\n# Get the channel "BaseColor" of that stack:\nbase_color_channel = paintable_stack.get_channel(\n    substance_painter.textureset.ChannelType.BaseColor)\n\n# Print the color format and bit depth of the base color channel:\nprint("The channel format uses {0} {1}.".format(\n    "RGB" if base_color_channel.is_color() else "L",\n    base_color_channel.bit_depth()))\n\n# Change the format and bit depth of the base color channel:\nbase_color_channel.edit(\n    channel_format = substance_painter.textureset.ChannelFormat.RGB16)\n')),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.format"},"format() → ",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat"),(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.format",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Get the channel format. The format indicates both if the channel is color or grayscale, its dynamic range, its bits per component, and if the storage is linear or sRGB."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},"This channel format.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat")))))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.label"},"label() → str",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.label",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Get the user label for User channels (",(0,l.mdx)("cite",null,"User0")," to ",(0,l.mdx)("cite",null,"User7"),")."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},"This channel user label. This is the empty string for non User channels.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},"str"))),(0,l.mdx)("div",{className:"admonition seealso"},(0,l.mdx)("p",{className:!0},"See also"),(0,l.mdx)("p",{className:!0},(0,l.mdx)("a",{className:"reference internal",href:"#substance_painter.textureset.Channel.type",title:"substance_painter.textureset.Channel.type"},(0,l.mdx)("code",{className:"xref py py-meth docutils literal notranslate"},"Channel.type()")),",",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},(0,l.mdx)("code",{className:"xref py py-class docutils literal notranslate"},"ChannelType")),".")))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.is_color"},"is_color() → bool",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.is_color",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Check if the channel is in color or grayscale format."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},(0,l.mdx)("code",{className:"docutils literal notranslate"},"True")," if the channel format is a color format.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},"bool"))))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.is_floating"},"is_floating() → bool",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.is_floating",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Check if the channel is in floating point or normalized fixed point format."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},(0,l.mdx)("code",{className:"docutils literal notranslate"},"True")," if the channel format is a floating point format.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},"bool"))))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.bit_depth"},"bit_depth() → int",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.bit_depth",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Get the number of bits per component."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},"The channel bit depth per component.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},"int"))))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.type"},"type() → ",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},"ChannelType"),(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.type",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Get the channel type."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Returns:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("p",{className:!0},"This channel type.")),(0,l.mdx)("dt",{className:"field-even"},"Return type:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("p",{className:!0},(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelType",title:"substance_painter.textureset.ChannelType"},"ChannelType")))),(0,l.mdx)("div",{className:"admonition seealso"},(0,l.mdx)("p",{className:!0},"See also"),(0,l.mdx)("p",{className:!0},(0,l.mdx)("a",{className:"reference internal",href:"#substance_painter.textureset.Channel.label",title:"substance_painter.textureset.Channel.label"},(0,l.mdx)("code",{className:"xref py py-meth docutils literal notranslate"},"Channel.label()")),".")))),(0,l.mdx)("dl",{className:"py method"},(0,l.mdx)("dt",{className:"sig sig-object py",id:"substance_painter.textureset.Channel.edit"},"edit(",(0,l.mdx)("em",{className:"sig-param"},"channel_format: ",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},"ChannelFormat")),", ",(0,l.mdx)("em",{className:"sig-param"},"label: str | None = None"),") → None",(0,l.mdx)("a",{className:"headerlink",href:"#substance_painter.textureset.Channel.edit",title:"Link to this definition"}," ")),(0,l.mdx)("dd",null,(0,l.mdx)("p",{className:!0},"Change the channel format and label."),(0,l.mdx)("dl",{className:"field-list simple"},(0,l.mdx)("dt",{className:"field-odd"},"Parameters:"),(0,l.mdx)("dd",{className:"field-odd"},(0,l.mdx)("ul",{className:"simple"},(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"channel_format")," (",(0,l.mdx)("a",{className:"reference internal",href:"index.html#substance_painter.textureset.ChannelFormat",title:"substance_painter.textureset.ChannelFormat"},(0,l.mdx)("em",null,"ChannelFormat")),") – The new texture format of the channel.")),(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"label")," (",(0,l.mdx)("em",null,"str"),(0,l.mdx)("em",null,", "),(0,l.mdx)("em",null,"optional"),") – Label of the channel in case of User channel as type.")))),(0,l.mdx)("dt",{className:"field-even"},"Raises:"),(0,l.mdx)("dd",{className:"field-even"},(0,l.mdx)("ul",{className:"simple"},(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("a",{className:"reference internal",href:"../exception.html#substance_painter.exception.ProjectError",title:"substance_painter.exception.ProjectError"},(0,l.mdx)("strong",null,"ProjectError"))," – If no project is opened.")),(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"ValueError")," – If there is no stack labeled ",(0,l.mdx)("code",{className:"docutils literal notranslate"},"stack_id")," in this Texture Set.")),(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"ValueError")," – If there is no channel of type ",(0,l.mdx)("code",{className:"docutils literal notranslate"},"channel_type")," in this Texture Set.")),(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"ValueError")," – If a label was provided but ",(0,l.mdx)("code",{className:"docutils literal notranslate"},"channel_type")," is not a user type. Standard channel types have fixed labels.")),(0,l.mdx)("li",null,(0,l.mdx)("p",{className:!0},(0,l.mdx)("strong",null,"ValueError")," – If the channel is invalid."))))))))}o.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-substance-painter-textureset-channel-md-0b7de80a59b51304c9ad.js.map