{"version":3,"file":"component---src-pages-api-substance-painter-baking-md-9ad96625e98f30cd8bd8.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,kFACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,6EAE7DH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,6wFAuElCH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAA+D,MAChGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0CAC/BH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,2CAA2CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,0CAEhHH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,cACEA,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,SAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,kBAInBH,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,aAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,gCAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,YAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,2CAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,wEAKrBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,8CAA8CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,gBAEnHH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,YAA0B,MAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBACvFH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,+CAA+CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,oBAA0B,kDAE/HH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gDAC/BH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,sBAAsBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvG,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,QAAQH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAChD,KAAQ,6CACR,MAAS,6CAA2C,oBAC3B,kEAE7BH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,eAAyB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7D,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,yBAC/CH,EAAAA,EAAAA,KAAA,uEAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6CACR,MAAS,6CAA2C,sBAExDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAC/BH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,2BAA2BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yBAA+B,QAAQH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACnI,KAAQ,6CACR,MAAS,6CAA2C,oBAC3B,gEAE7BH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,oBAA8B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,8BACvFH,EAAAA,EAAAA,KAAA,uEAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6CACR,MAAS,6CAA2C,sBAExDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,wDACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAC/BH,EAAAA,EAAAA,KAAA,6BAAuBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACjC,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,sCAEvBH,EAAAA,EAAAA,KAAA,uFAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qEACR,MAAS,2CAAyC,gBAEtDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAC/BH,EAAAA,EAAAA,KAAA,kCAA4BA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtC,KAAQ,wDACR,MAAS,yCAAuC,YAC/B,wEAErBH,EAAAA,EAAAA,KAAA,8CAEAA,EAAAA,EAAAA,KAAA,qCACQA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAClB,KAAQ,wDACR,MAAS,yCAAuC,YAC/B,MACrBH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,wDACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAC/BH,EAAAA,EAAAA,KAAA,mBAAaA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAgBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvD,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,kBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC5D,KAAQ,wDACR,MAAS,yCAAuC,YAC/B,yDAErBH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,aAAuB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC3D,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,6BACjDH,EAAAA,EAAAA,KAAA,+DAEAA,EAAAA,EAAAA,KAAA,qCACQA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAClB,KAAQ,wDACR,MAAS,yCAAuC,YAC/B,MACrBH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAA+D,OAChGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAC/BH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,SAASH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,0BAA2BH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnG,KAAQ,wDACR,MAAS,yCAAuC,YAC/B,+NAAgP,4CAEvQH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,mBAA6B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,YAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC5H,KAAQ,wDACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,cAAsBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,KAAW,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,oBAA0B,6BAC7HH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,WAAqB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0CAAgD,SAE3IH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,wDACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAC/BH,EAAAA,EAAAA,KAAA,sCAAgCA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC1C,KAAQ,4CACR,MAAS,4CAA0C,mBAC3B,+CAE5BH,EAAAA,EAAAA,KAAA,4DAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,4CACR,MAAS,4CAA0C,qBAEvDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,kCAA4BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAaH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnE,KAAQ,4CACR,MAAS,4CAA0C,oBACtB,kDAEnCH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,UAAoB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACxD,KAAQ,4CACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,oBAA6B,yCACpDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9D,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,wDAEhCH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvD,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,6BACjDH,EAAAA,EAAAA,KAAA,8EAEAA,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,+BAAyBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC/D,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAsB,oDAE9EH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9E,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,6BACjDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,UAAoB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QAAc,4BAExGH,EAAAA,EAAAA,KAAA,yCAAmCA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7C,KAAQ,kEACR,MAAS,6CAA2C,gBAC/B,0CAEzBH,EAAAA,EAAAA,KAAA,uCAEAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,kEACR,MAAS,6CAA2C,gBAC/B,MACzBH,EAAAA,EAAAA,KAAA,gCAA0BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yBAA0BH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9E,KAAQ,kEACR,MAAS,6CAA2C,gBAC/B,KAAU,uFAErCH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,kBAA4B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACnG,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kBAA0BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,KAAW,wBAC9EH,EAAAA,EAAAA,KAAA,6FAEAA,EAAAA,EAAAA,KAAA,uEAEAA,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,oCAA8BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAsB,6DAEtEH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,UAAoB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,QAAc,2BAC9EH,EAAAA,EAAAA,KAAA,gCAA0BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,aAAcH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClE,KAAQ,6DACR,MAAS,uCAAqC,WAC1B,uDAE1BH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,QAAkB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtD,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAoB,qBAC3CH,EAAAA,EAAAA,KAAA,kEAEAA,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0CAC/BH,EAAAA,EAAAA,KAAA,iCAA2BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,aAAcH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnE,KAAQ,6DACR,MAAS,uCAAqC,WAC1B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAsB,uDAExEH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,WAAqB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAChF,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAoB,qBAC3CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,UAAoB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QAAc,4BAExGH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0CAC/BH,EAAAA,EAAAA,KAAA,2CAAqCA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC/C,KAAQ,6DACR,MAAS,uCAAqC,UAC/B,4CAEnBH,EAAAA,EAAAA,KAAA,yCAEAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6DACR,MAAS,uCAAqC,UAC/B,MACnBH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0CAC/BH,EAAAA,EAAAA,KAAA,kCAA4BA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,2BAA4BH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClF,KAAQ,6DACR,MAAS,uCAAqC,UAC/B,KAAU,iFAE/BH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,oBAA8B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACrG,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAoBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,KAAW,0BACxEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4CAA6D,OAC9FH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6DACR,MAAS,wCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0CAC/BH,EAAAA,EAAAA,KAAA,uDAAiDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC5F,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,KAAU,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAgBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnF,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC1E,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,8MAGhCH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,YAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClH,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAwBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,KAAW,sDAC7EH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,aAAuB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClF,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,qEAC/CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9E,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,6BAEnDH,EAAAA,EAAAA,KAAA,yEAAmEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9G,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,KAAU,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAgBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnF,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,2LAG9BH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,YAAiBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClH,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAwBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,KAAW,sDAC7EH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,aAAuB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClF,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,sEAEjDH,EAAAA,EAAAA,KAAA,iDAA2CA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACjF,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,kKAGhCH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvD,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,yBACjDH,EAAAA,EAAAA,KAAA,kOAGAA,EAAAA,EAAAA,KAAA,qDAA+CA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACrF,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,aAAaH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvD,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,oFAEvBH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvD,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,wBACjDH,EAAAA,EAAAA,KAAA,wGAGAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,MACvBH,EAAAA,EAAAA,KAAA,gFAA0EA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpF,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,yEAEvBH,EAAAA,EAAAA,KAAA,gHAGAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,MACvBH,EAAAA,EAAAA,KAAA,8DAAwDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACpG,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAYH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC1E,KAAQ,kEACR,MAAS,6CAA2C,iBAC1B,aAAaH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvD,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,4GAGvBH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,eAAyB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACpF,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,iCAC/CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9E,KAAQ,kEACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAA0B,4BAEnDH,EAAAA,EAAAA,KAAA,0KAGAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,MACvBH,EAAAA,EAAAA,KAAA,gFAA0EA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACtH,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,aAAaH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACrD,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,gHAGvBH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,eAAyB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7D,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,iCAC/CH,EAAAA,EAAAA,KAAA,yLAGAA,EAAAA,EAAAA,KAAA,gCACGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qEACR,MAAS,2CAAyC,cAC/B,MACvBH,EAAAA,EAAAA,KAAA,iDAA2CA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAAkBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvF,KAAQ,qEACR,MAAS,2CAAyC,eAC1B,QAAQH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAChD,KAAQ,4DACR,MAAS,4CAA0C,cAChC,iTAKzBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAAgE,oBAC/FH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,eAAyB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7D,KAAQ,qEACR,MAAS,4CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,eAAwB,iCAC/CH,EAAAA,EAAAA,KAAA,2EAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,4DACR,MAAS,4CAA0C,gBAEvDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAsC,MACvEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,+DACR,MAAS,sDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sDAAuE,MACxGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,2DACR,MAAS,kDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kDAAmE,MACpGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAAgE,MACjGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,4DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAC/BH,EAAAA,EAAAA,KAAA,uEAAiEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC3E,KAAQ,4DACR,MAAS,4CAA0C,cAChC,+RAKzBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAAgE,oBAC/FH,EAAAA,EAAAA,KAAA,2EAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,4DACR,MAAS,4CAA0C,gBAEvDH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAsC,MACvEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,+DACR,MAAS,sDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sDAAuE,MACxGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,2DACR,MAAS,kDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kDAAmE,MACpGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAAgE,MACjGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,4DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAGnC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/baking.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`baking module — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"baking-module\"\n    }}>{`baking module`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`baking`}</inlineCode>{` module allows to set baking parameters and launch baking\nof mesh maps.`}</p>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.baking as baking\nimport substance_painter.textureset as textureset\nfrom substance_painter.baking import BakingParameters, MeshMapUsage, CurvatureMethod\n\n# set baking parameters\nbaking_params = BakingParameters.from_texture_set_name(\"Name for ts\")\ntexture_set = baking_params.texture_set()\ncommon_params = baking_params.common()\nao_params = baking_params.baker(MeshMapUsage.AO)\nBakingParameters.set({\n    common_params['OutputSize'] : (10,10),\n    ao_params['Distribution'] : ao_params['Distribution'].enum_value('Cosine')})\n\n# check if common parameters are shared between Texture Sets (True at project creation)\ncommon_params_are_shared = bool(baking.get_link_group_common_parameters())\n\n# unlink common parameters. The common parameters for all Texture Sets become independent\nbaking.unlink_all_common_parameters()\n\n# recheck whether common parameters are shared between Texture Sets (now False)\ncommon_params_are_linked = bool(baking.get_link_group_common_parameters())\n\nts1 = textureset.TextureSet.from_name(\"Name for ts1\")\nts2 = textureset.TextureSet.from_name(\"Name for ts2\")\n\n# get the list of Texture Sets which are linked for AO with ts1\n# it's not yet linked, so returns only [ts1]\nlinked_with_ts1 = baking.get_linked_texture_sets(ts1, MeshMapUsage.AO)\n\n# link AO baking parameters for ts1 and ts2 together into a group,\n# keeping ts1 parameters for both\nbaking.set_linked_group([ts1,ts2], ts1, MeshMapUsage.AO)\n\n# get the new list of Texture Sets which are linked with ts1\n# now they are linked, so it returns [ts1, ts2]\nlinked_with_ts1 = baking.get_linked_texture_sets(ts1, MeshMapUsage.AO)\n\n# finally unlink AO baking parameters\nbaking.unlink_all(MeshMapUsage.AO)\n\n# get curvature method\ncurvature_method = baking_params.get_curvature_method()\n\n# set curvature method\nbaking_params.set_curvature_method(CurvatureMethod.FromMesh)\n\n# check whether the baking is enabled on the Texture Set level and enable it\nbaking_params.is_textureset_enabled()\nbaking_params.set_textureset_enabled(True)\n\n# check if AO usage is enabled for baking and enable it\nbaking_params.is_baker_enabled(MeshMapUsage.AO)\nbaking_params.set_baker_enabled(MeshMapUsage.AO, True)\n\n# get all usages enabled for baking\nbaking_params.get_enabled_bakers()\n\n# set usages enabled for baking\nbaking_params.set_enabled_bakers([MeshMapUsage.AO, MeshMapUsage.Normal])\n\n# check if one UV Tile is enabled for baking, disable it\nbaking_params.is_uv_tile_enabled(texture_set.uv_tile(0,0))\nbaking_params.set_uv_tile_enabled(texture_set.uv_tile(0,0), False)\n\n# get all UV Tiles enabled for baking\nbaking_params.get_enabled_uv_tiles()\n# set UV Tiles enabled for baking\nbaking_params.set_enabled_uv_tiles([texture_set.uv_tile(0,0), texture_set.uv_tile(0,1)])\n\n`}</code></pre>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.MeshMapUsage`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.UVTile`}</inlineCode></a></p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.baking.BakingStatus(`}<em parentName=\"p\">{`value`}</em>{`)\nStatus code of the baking process.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Success`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The baking was successful.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Cancel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The baking was cancelled by the user.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Fail`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The baking could not complete; the cause is detailed in the log.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.baking.CurvatureMethod(`}<em parentName=\"p\">{`value`}</em>{`)\nMembers:`}</p>\n    <p><inlineCode parentName=\"p\">{`FromMesh`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`FromNormalMap`}</inlineCode></p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.baking.BakingParameters(`}<em parentName=\"p\">{`material_id: int`}</em>{`)\nBaking parameters for a given texture set.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.MeshMapUsage`}</inlineCode></a></p>\n    <p><em parentName=\"p\">{`static`}</em>{` from_texture_set(`}<em parentName=\"p\">{`texture_set: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}>{`BakingParameters`}</a>{`\nGet the baking parameters for the given texture set object.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`texture_set`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – The texture set.`}</p>\n    <p>{`Returns:\nThe baking parameters for the given texure set.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}>{`BakingParameters`}</a></p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a></p>\n    <p><em parentName=\"p\">{`static`}</em>{` from_texture_set_name(`}<em parentName=\"p\">{`texture_set_name: str`}</em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}>{`BakingParameters`}</a>{`\nGet the baking parameters for the given texture set name.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`texture_set_name`}</strong>{` (`}<em parentName=\"p\">{`str`}</em>{`) – The texture set name.`}</p>\n    <p>{`Returns:\nThe baking parameters for the given texure set.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}>{`BakingParameters`}</a></p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.properties.Property`}</inlineCode></a></p>\n    <p>{`texture_set() → `}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`\nGet the associated texture set.`}</p>\n    <p>{`Returns:\nThe texture set associated with this BakingParameters instance.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a></p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a></p>\n    <p>{`common() → Dict[str, `}<a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}>{`Property`}</a>{`]\nGet the parameters common to all bakers, like baking resolution.`}</p>\n    <p>{`Returns:\nThe common parameters.`}</p>\n    <p>{`Return type:\nDict[str, `}<a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}>{`Property`}</a>{`]`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.properties.Property`}</inlineCode></a></p>\n    <p>{`baker(`}<em parentName=\"p\">{`baked_map: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → Dict[str, `}<a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}>{`Property`}</a>{`]\nGet the parameters specific to a given baked map.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`baked_map`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – The baked map usage.`}</p>\n    <p>{`Returns:\nThe corresponding baked map parameters.`}</p>\n    <p>{`Return type:\nDict[str, `}<a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}>{`Property`}</a>{`]`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.MeshMapUsage`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.properties.Property`}</inlineCode></a></p>\n    <p><em parentName=\"p\">{`static`}</em>{` set(`}<em parentName=\"p\">{`property_values: Dict[`}<a parentName=\"em\" {...{\n          \"href\": \"properties.html#substance_painter.properties.Property\",\n          \"title\": \"substance_painter.properties.Property\"\n        }}>{`Property`}</a>{`, bool | int | Tuple`}{`[int, int]`}{` | Tuple`}{`[int, int, int]`}{` | Tuple`}{`[int, int, int, int]`}{` | float | Tuple`}{`[float, float]`}{` | Tuple`}{`[float, float, float]`}{` | Tuple`}{`[float, float, float, float]`}{` | str]`}</em>{`) → None\nSet property values in batch.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`property_values`}</strong>{` (`}<em parentName=\"li\">{`Dict**[`}</em><a parentName=\"li\" {...{\n          \"href\": \"properties.html#substance_painter.properties.Property\",\n          \"title\": \"substance_painter.properties.Property\"\n        }}><em parentName=\"a\">{`Property`}</em></a><em parentName=\"li\">{`,`}</em>{` `}<em parentName=\"li\">{`PropertyValue**]`}</em>{`) – A dict of properties`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values.`}</strong>{` (`}<em parentName=\"li\">{`to be set with their corresponding new`}</em>{`) –`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"properties.html#substance_painter.properties.Property\",\n        \"title\": \"substance_painter.properties.Property\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.properties.Property`}</inlineCode></a></p>\n    <p>{`get_curvature_method() → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.CurvatureMethod\",\n        \"title\": \"substance_painter.baking.CurvatureMethod\"\n      }}>{`CurvatureMethod`}</a>{`\nGet the curvature method used for baking`}</p>\n    <p>{`Returns:\nThe curvature method used for baking`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.CurvatureMethod\",\n        \"title\": \"substance_painter.baking.CurvatureMethod\"\n      }}>{`CurvatureMethod`}</a></p>\n    <p>{`See also`}</p>\n    <p>{`set_curvature_method`}</p>\n    <p>{`set_curvature_method(`}<em parentName=\"p\">{`method: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.baking.CurvatureMethod\",\n          \"title\": \"substance_painter.baking.CurvatureMethod\"\n        }}>{`CurvatureMethod`}</a></em>{`)\nSet the curvature method to use for baking`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`method`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.CurvatureMethod\",\n        \"title\": \"substance_painter.baking.CurvatureMethod\"\n      }}><em parentName=\"a\">{`CurvatureMethod`}</em></a>{`) – The new method to use for baking`}</p>\n    <p>{`See also`}</p>\n    <p>{`get_curvature_method`}</p>\n    <p>{`is_baker_enabled(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → bool\nWhether some usage is enabled for baking.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`usage`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – The baked map usage.`}</p>\n    <p>{`Returns:\nTrue if the corresponding usage is enabled for baking.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`set_baker_enabled(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`, `}<em parentName=\"p\">{`enable: bool`}</em>{`) → None\nEnable or disable a usage for baking.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`usage`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – The baked map usage.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`enable`}</strong>{` (`}<em parentName=\"li\">{`bool`}</em>{`) – Enable or disable.`}</li>\n    </ul>\n    <p>{`get_enabled_bakers() → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}>{`MeshMapUsage`}</a>{`]\nGet all usages enabled for baking.`}</p>\n    <p>{`Returns:\nEnabled usages.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}>{`MeshMapUsage`}</a>{`]`}</p>\n    <p>{`set_enabled_bakers(`}<em parentName=\"p\">{`enabled_usages: List[`}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a>{`]`}</em>{`) → None\nSet usages enabled for baking. Usages not in this list will be disabled.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`enabled_usages`}</strong>{` (`}<em parentName=\"p\">{`List**[`}</em><a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a><em parentName=\"p\">{`]`}</em>{`) – Enabled usages.`}</p>\n    <p>{`is_textureset_enabled() → bool\nWhether this Texture Set is enabled for baking.`}</p>\n    <p>{`Returns:\nTrue if this Texture Set is enabled for baking.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`set_textureset_enabled(`}<em parentName=\"p\">{`enable: bool`}</em>{`) → None\nEnable or disable this Texture Set for baking.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`enable`}</strong>{` (`}<em parentName=\"p\">{`bool`}</em>{`) – Enable or disable.`}</p>\n    <p>{`is_uv_tile_enabled(`}<em parentName=\"p\">{`uv_tile: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}>{`UVTile`}</a></em>{`) → bool\nWhether a UV Tile is enabled for baking.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`tile`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><em parentName=\"a\">{`UVTile`}</em></a>{`) – The UV Tile.`}</p>\n    <p>{`Returns:\nTrue if the UV Tile is enabled for baking.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.UVTile`}</inlineCode></a></p>\n    <p>{`set_uv_tile_enabled(`}<em parentName=\"p\">{`uv_tile: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}>{`UVTile`}</a></em>{`, `}<em parentName=\"p\">{`enable: bool`}</em>{`) → None\nEnable or disable an UV Tile for baking.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`uv_tile`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}><em parentName=\"a\">{`UVTile`}</em></a>{`) – The UV Tile.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`enable`}</strong>{` (`}<em parentName=\"li\">{`bool`}</em>{`) – Enable or disable.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.UVTile`}</inlineCode></a></p>\n    <p>{`get_enabled_uv_tiles() → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`]\nGet all UV Tiles enabled for baking.`}</p>\n    <p>{`Returns:\nEnabled UV Tiles.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`]`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.UVTile`}</inlineCode></a></p>\n    <p>{`set_enabled_uv_tiles(`}<em parentName=\"p\">{`enabled_uv_tiles: List[`}<a parentName=\"em\" {...{\n          \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}>{`UVTile`}</a>{`]`}</em>{`) → None\nSet UV Tiles enabled for baking. All other tiles will be disabled.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`enabled_uv_tiles`}</strong>{` (`}<em parentName=\"p\">{`List**[`}</em><a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><em parentName=\"a\">{`UVTile`}</em></a><em parentName=\"p\">{`]`}</em>{`) – Enabled UV Tiles.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.TextureSet`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.UVTile`}</inlineCode></a></p>\n    <p>{`substance_painter.baking.set_linked_group(`}<em parentName=\"p\">{`group: List[`}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a>{`]`}</em>{`, `}<em parentName=\"p\">{`reference: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`, `}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → None\nMake a group of Texture Sets share the same baking parameters for the given ‘usage’. After that,\nediting the ‘usage’ parameters of one of the group’s Texture Set will impact the whole group.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`group`}</strong>{` (`}<em parentName=\"li\">{`List**[`}</em><a parentName=\"li\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}><em parentName=\"a\">{`TextureSet`}</em></a><em parentName=\"li\">{`]`}</em>{`) – Texture Sets to be included in the new group.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`reference`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – Texture Set which parameters are applied to the whole group.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`usage`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – Usage of the group.`}</li>\n    </ul>\n    <p>{`substance_painter.baking.set_linked_group_common_parameters(`}<em parentName=\"p\">{`group: List[`}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a>{`]`}</em>{`, `}<em parentName=\"p\">{`reference: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`) → None\nMake a group of Texture Sets share the same baking common parameters. After that, editing a\ncommon parameter of one of the group’s Texture Set will impact the whole group.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`group`}</strong>{` (`}<em parentName=\"li\">{`List**[`}</em><a parentName=\"li\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}><em parentName=\"a\">{`TextureSet`}</em></a><em parentName=\"li\">{`]`}</em>{`) – Texture Sets to be included in the new group.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`reference`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – Texture Set which parameters are applied to the whole group.`}</li>\n    </ul>\n    <p>{`substance_painter.baking.unlink_all(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → None\nUnlink all Texture Sets for a given usage. That is, remove the group if it exists, so that all\nTexture Sets have their own copy of the parameters.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`usage`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – Usage to unlink.`}</p>\n    <p>{`substance_painter.baking.unlink_all_common_parameters() → None\nUnlink all Texture Sets for common parameters. That is, remove the group if exists, so that all\nTexture Sets have their own copy of the parameters.`}</p>\n    <p>{`substance_painter.baking.get_link_group(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]\nGet the list of Texture Sets that share baking parameters for a given usage.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`usage`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – Usage to query.`}</p>\n    <p>{`Returns:\nAll linked Texture Sets for the usage. Empty list if no Texture Set are\nlinked.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]`}</p>\n    <p>{`substance_painter.baking.get_link_group_common_parameters() → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]\nGet the list of Texture Sets that share common baking parameters.`}</p>\n    <p>{`Returns:\nAll linked Texture Sets for common parameters. Empty list if no Texture\nSet are linked.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]`}</p>\n    <p>{`substance_painter.baking.get_linked_texture_sets(`}<em parentName=\"p\">{`texture_set: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`, `}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]\nGet the list of Texture Sets that share the same parameters as some Texture Set, for a given\nusage.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`texture_set`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – The Texture Set to query`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`usage`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – The usage to query`}</li>\n    </ul>\n    <p>{`Returns:\nThe list of Texture Sets sharing parameters with the input Texture Set.\nContains at least the input Texture Set if no group exists for the usage.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]`}</p>\n    <p>{`substance_painter.baking.get_linked_texture_sets_common_parameters(`}<em parentName=\"p\">{`texture_set: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`) → List[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]\nGet the list of Texture Sets that share the same parameters as some Texture Set, for common\nparameters.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`texture_set`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – The Texture Set to query`}</p>\n    <p>{`Returns:\nThe list of Texture Sets sharing common parameters with the input Texture\nSet. Contains at least the input Texture Set if no group exists for common parameters.`}</p>\n    <p>{`Return type:\nList[`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}>{`TextureSet`}</a>{`]`}</p>\n    <p>{`substance_painter.baking.bake_async(`}<em parentName=\"p\">{`texture_set: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n          \"title\": \"substance_painter.textureset.TextureSet\"\n        }}>{`TextureSet`}</a></em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}>{`StopSource`}</a>{`\nLaunch the baking process for a Texture Set, using the current baking configuration.\nThe configuration is set by setting baking parameters, enabling Texture Set, selecting UV Tiles\nfor baking, setting curvature method etc.\nThis function is asynchronous. When the baking process is finished, the\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessEnded\",\n        \"title\": \"substance_painter.event.BakingProcessEnded\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessEnded`}</inlineCode></a>{` event is sent.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`texture_set`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/textureset.html#substance_painter.textureset.TextureSet\",\n        \"title\": \"substance_painter.textureset.TextureSet\"\n      }}><em parentName=\"a\">{`TextureSet`}</em></a>{`) – The Texture Set to bake.`}</p>\n    <p>{`Returns:\nCan be used to cancel the asynchronous computation.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}>{`StopSource`}</a></p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}><inlineCode parentName=\"a\">{`BakingParameters`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessAboutToStart\",\n        \"title\": \"substance_painter.event.BakingProcessAboutToStart\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessAboutToStart`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessProgress\",\n        \"title\": \"substance_painter.event.BakingProcessProgress\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessProgress`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessEnded\",\n        \"title\": \"substance_painter.event.BakingProcessEnded\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessEnded`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.async_utils.StopSource`}</inlineCode></a></p>\n    <p>{`substance_painter.baking.bake_selected_textures_async() → `}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}>{`StopSource`}</a>{`\nLaunch the baking process, using the current baking configuration.\nThe configuration is set by setting baking parameters, enabling Texture Set, selecting UV Tiles\nfor baking, setting curvature method etc.\nThis function is asynchronous. When the baking process is finished, the\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessEnded\",\n        \"title\": \"substance_painter.event.BakingProcessEnded\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessEnded`}</inlineCode></a>{` event is sent.`}</p>\n    <p>{`Returns:\nCan be used to cancel the asynchronous computation.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}>{`StopSource`}</a></p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.baking.BakingParameters\",\n        \"title\": \"substance_painter.baking.BakingParameters\"\n      }}><inlineCode parentName=\"a\">{`BakingParameters`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessAboutToStart\",\n        \"title\": \"substance_painter.event.BakingProcessAboutToStart\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessAboutToStart`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessProgress\",\n        \"title\": \"substance_painter.event.BakingProcessProgress\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessProgress`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BakingProcessEnded\",\n        \"title\": \"substance_painter.event.BakingProcessEnded\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BakingProcessEnded`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.async_utils.StopSource`}</inlineCode></a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}