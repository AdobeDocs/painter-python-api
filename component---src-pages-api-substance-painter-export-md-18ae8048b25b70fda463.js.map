{"version":3,"file":"component---src-pages-api-substance-painter-export-md-18ae8048b25b70fda463.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/export.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><em parentName=\"p\">{`export`}</em>{` module — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"export-module\"\n    }}><em parentName=\"h1\">{`export`}</em>{` module`}</h1>\n    <p>{`This module exposes functions to export assets (textures and meshes) from a project under a variety\nof formats. It is the scripting equivalent of the “Export textures” and the “Export mesh” windows.`}</p>\n    <p>{`For the export textures, the export configuration is defined with a JSON file, but can also use\nexisting export presets.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.export.ExportStatus(`}<em parentName=\"p\">{`value`}</em>{`)\nStatus code of the export process.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Success`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The export was successful.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Cancelled`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The export was cancelled by the user.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Warning`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The export completed with warnings.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Error`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The export could not complete; the cause is detailed in the log.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"export-textures\"\n    }}>{`Export Textures`}</h2>\n    <p>{`substance_painter.export.list_project_textures(`}<em parentName=\"p\">{`json_config: dict`}</em>{`) → Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]\nGet list of textures that would be exported according to the given JSON configuration.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`json_config`}</strong>{` (`}<em parentName=\"p\">{`dict`}</em>{`) – JSON object representing the export configuration to be used.`}</p>\n    <p>{`Returns:\nList of texture files\nthat would be exported, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Return type:\n`}<em parentName=\"p\">{`Dict`}</em>{`[`}<em parentName=\"p\">{`Tuple`}</em>{`[str, str]`}{`, `}<em parentName=\"p\">{`List`}</em>{`[str]`}{`]`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`json_config`}</inlineCode>{` is ill-formed, or is invalid in the context\nof the current project.\nContains a human readable message.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.export_project_textures\",\n        \"title\": \"substance_painter.export.export_project_textures\"\n      }}><inlineCode parentName=\"a\">{`export_project_textures()`}</inlineCode></a>{`.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.export.TextureExportResult(`}<em parentName=\"p\">{`status: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`, `}<em parentName=\"p\">{`message: str`}</em>{`, `}<em parentName=\"p\">{`textures: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`)\nResult of the export textures process`}</p>\n    <p>{`status\nStatus code.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.ExportStatus\",\n        \"title\": \"substance_painter.export.ExportStatus\"\n      }}>{`ExportStatus`}</a></p>\n    <p>{`message\nHuman readable status message.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <p>{`textures\nList of texture files\nwritten to disk, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Type:\n`}<em parentName=\"p\">{`Dict`}</em>{`[`}<em parentName=\"p\">{`Tuple`}</em>{`[str, str]`}{`, `}<em parentName=\"p\">{`List`}</em>{`[str]`}{`]`}</p>\n    <p>{`substance_painter.export.export_project_textures(`}<em parentName=\"p\">{`json_config: dict`}</em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.TextureExportResult\",\n        \"title\": \"substance_painter.export.TextureExportResult\"\n      }}>{`TextureExportResult`}</a>{`\nExport document textures according to the given JSON configuration. The\nreturn value contains the list of texture files written to disk.`}</p>\n    <p>{`The status of the return value can never be Error, any error causing the\n`}<em parentName=\"p\">{`export`}</em>{` to fail will raise an exception instead. However if the `}<em parentName=\"p\">{`export`}</em>{` fails,\nthe associated event ExportTextureEnded will indeed receive Error as a\nstatus.\nIf the export is cancelled by the user, the function return value will have\nthe status Cancelled and contain the list of texture files written to disk\nbefore export was cancelled.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`json_config`}</strong>{` (`}<em parentName=\"p\">{`dict`}</em>{`) – JSON object representing the export configuration to be used.`}</p>\n    <p>{`Returns:\nResult of the export process.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.TextureExportResult\",\n        \"title\": \"substance_painter.export.TextureExportResult\"\n      }}>{`TextureExportResult`}</a></p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`json_config`}</inlineCode>{` is ill-formed, or is invalid in the context\nof the current project. Contains a human readable message detailing\nthe problem.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.ExportTexturesAboutToStart\",\n        \"title\": \"substance_painter.event.ExportTexturesAboutToStart\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.ExportTexturesAboutToStart`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.ExportTexturesEnded\",\n        \"title\": \"substance_painter.event.ExportTexturesEnded\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.ExportTexturesEnded`}</inlineCode></a>{`.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.export\n\n# Open a project we want to export from (see substance_painter.project\n# for details). This step is not necessary if there is already a project\n# opened in Substance 3D Painter.\nimport substance_painter.project\nsubstance_painter.project.open(\"C:/projects/MeetMat.spp\")\n\n# Choose an export preset to use (see substance_painter.resource). This\n# step is not mandatory as you can alternatively describe the export\n# preset entirely in JSON (see the full example at the bottom of the\n# page).\n# Note: in this example the preset file format and bit depth are\n# overridden below for '03_Base', but otherwise follow the export preset\n# configuration.\nimport substance_painter.resource\nexport_preset = substance_painter.resource.ResourceID(\n    context=\"starter_assets\", name=\"Arnold (AiStandard)\")\n\n# Set the details of the export (a comprehensive example of all the\n# configuration options is presented at the bottom of the page):\nexport_config = {\n    \"exportShaderParams\": False,\n    \"exportPath\": \"C:/export\",\n    \"defaultExportPreset\" : export_preset.url(),\n    \"exportList\": [\n        {\n            \"rootPath\": \"01_Head\"\n        },\n        {\n            \"rootPath\": \"02_Body\"\n        },\n        {\n            \"rootPath\": \"03_Base\"\n        }],\n    \"exportParameters\": [\n        # No filters: those parameters apply to all exported maps\n        {\n            \"parameters\": {\n                \"dithering\": True,\n                \"paddingAlgorithm\": \"infinite\"\n            }\n        },\n        # Force file format and bitDepth for all maps in '03_Base'\n        {\n            \"filter\": {\"dataPaths\": [\"03_Base\"]},\n            \"parameters\": {\n                \"fileFormat\" : \"png\",\n                \"bitDepth\" : \"8\"\n            }\n        },\n        # Force 2K size for all maps in '01_Head'\n        {\n            \"filter\": {\"dataPaths\": [\"01_Head\"]},\n            \"parameters\": {\n                \"sizeLog2\": 11\n            }\n        }]\n    }\n\n# Display the list of textures that should be exported, according to the\n# configuration:\nexport_list = substance_painter.export.list_project_textures(export_config)\nfor k,v in export_list.items():\n    print(\"Stack {0}:\".format(k))\n    for to_export in v:\n        print(to_export)\n\n# Actual export operation:\nexport_result = substance_painter.export.export_project_textures(export_config)\n\n# In case of error, display a human readable message:\nif export_result.status != substance_painter.export.ExportStatus.Success:\n    print(export_result.message)\n\n# Display the details of what was exported:\nfor k,v in export_result.textures.items():\n    print(\"Stack {0}:\".format(k))\n    for exported in v:\n        print(exported)\n\n`}</code></pre>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"project.html#module-substance_painter.project\",\n        \"title\": \"substance_painter.project\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.project`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"resource.html#module-substance_painter.resource\",\n        \"title\": \"substance_painter.resource\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.resource`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-export\"\n      }}>{`Export documentation`}</a>{`.`}</p>\n    <p>{`substance_painter.export.get_default_export_path() → str\nGet the default export path used for exporting textures.`}</p>\n    <p>{`Returns:\nThe default export path.`}</p>\n    <p>{`Return type:\nstr`}</p>\n    <h2 {...{\n      \"id\": \"full-json_config-dict-possibilities\"\n    }}>{`Full json_config dict possibilities`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n\n    // Path to the root folder where texture files will be exported.\n    \"exportPath\" : \"C:/export\",\n\n    // Whether to export shader instances to a JSON file.\n    \"exportShaderParams\" : true,\n\n    // (optional) Export preset to be used when no export preset is provided in\n    // \"exportList.exportPreset\".\n    // The value can be the name of a preset defined in the \"exportPresets\" part\n    // of the configuration JSON:\n    \"defaultExportPreset\" : \"preset1\",\n    // Alternatively the value can be a URL to an existing preset file (see\n    // substance_painter.resource) listed in the export dialog:\n    // \"defaultExportPreset\" : substance_painter.resource.ResourceID(\n    //   context=\"starter_assets\",\n    //   name=\"PBR Metallic Roughness\").url(),\n\n    // (optional) List of export presets definitions.\n    \"exportPresets\" : [{\n\n      // Defines the name of the export preset. This name can be referenced in\n      // \"defaultExportPreset\" and/or \"exportList.exportPreset\".\n      \"name\" : \"preset1\",\n\n      // List of maps making up this export preset.\n      \"maps\" : [{\n\n        // Filename of the texture file written to disk; may contain wildcards\n        // resolved at export time.\n        // (e.g. \"$project_$mesh_$textureSet_$udim_$sceneMaterial_BaseColor\")\n        //\n        //   $project: Project name.\n        //   $mesh: Filename of the imported mesh.\n        //   $textureSet: Current Texture Set.\n        //   $sceneMaterial: Current material name, as found in the imported\n        //   mesh.\n        //   $udim: Current UV Tile (e.g. 1001).\n        \"fileName\" : \"$textureSet_color\",\n\n        // List of source/destination defining which channels will make up the\n        // texture file.\n        \"channels\" : [{\n\n          // Channel to write to.\n          //     L (Luminance), R (Red), G (Green), B (Blue), A (Alpha)\n          //\n          // In addition to alpha channel, either R+G+B must be specified, or\n          // either L only.\n          \"destChannel\" : \"R\",\n\n          // Channel to read from.\n          //     L, R, G, B, A\n          //\n          // When the source map is color, L will generate a mix of R+G+B.\n          \"srcChannel\" : \"R\",\n\n          // The type of map to read from:\n          //     documentMap: Maps present in the document (e.g. \"baseColor\").\n          //     meshMap: Baked mesh maps (e.g. \"normal\").\n          //     virtualMap: Generated map (e.g. \"f0\").\n          //     defaultMap: Constant color (e.g. \"black\").\n          \"srcMapType\" : \"documentMap\",\n\n          // Name of the map of type scrMapType.\n          //\n          // For type documentMap:\n          //     basecolor, height, specular, opacity, emissive, displacement,\n          //     glossiness, roughness, anisotropylevel, anisotropyangle,\n          //     transmissive, scattering, reflection, ior, metallic, normal,\n          //     ambientOcclusion, diffuse, specularlevel, blendingmask, user0,\n          //     user1, user2, user3, user4, user5, user6, user7.\n          //\n          // For type meshMap:\n          //     ambient_occlusion, id, curvature, normal_base,\n          //     world_space_normals, position, thickness.\n          //\n          // For type virtualMap:\n          //     Normal_OpenGL, Normal_DirectX, AO_Mixed, Diffuse, Specular,\n          //     Glossiness, Unity4Diff, Unity4Gloss, reflection, 1/ior,\n          //     Glossiness2, f0, View_2D.\n          //\n          // For type defaultMap:\n          //    black, white.\n          \"srcMapName\" : \"baseColor\"\n\n        }],\n\n        // (optional) Export parameters to be used for this export preset map.\n        //\n        // When \"parameters\" is not provided, the existing parameters are used.\n        // When \"parameters\" is provided, it overrides the existing parameters.\n        //\n        // Each individual parameter is optional and, when defined, overrides\n        // previously defined parameters. See in exportList.parameters how the\n        // rules are applied.\n        //\n        // It is important to understand that even though this section is\n        // optional, if after evaluating all the rules some parameters remain\n        // undefined, the configuration is invalid.\n        \"parameters\" : {\n\n          // (optional) File format (and file extension) of the generated\n          // texture file.\n          \"fileFormat\" : \"png\",\n\n          // (optional) Bit depth.\n          //\n          // The bit depth must be supported by the file format.\n          \"bitDepth\" : \"16\",\n\n          // (optional) Whether to use dithering.\n          \"dithering\" : false,\n\n          // (optional) Size of the texture file in log2.\n          // (i.e. 10 means 2^10 = 1024)\n          //\n          // When \"sizeLog2\" is not provided, the texture size from the project\n          // is used.\n          //\n          // It can either be a single integer, or an array of two integers.\n          //\n          // If it's a single integer, it represents the biggest of width and\n          // height, and will maintain the aspect ratio.\n          // (i.e. 10 means a 2048x4086 map will be exported as 512x1024)\n          //\n          // If it's an array of two integers, the original aspect ratio will be\n          // ignored.\n          // (i.e. [10, 12] means a 2048x4086 map will be exported as 1024x4096)\n          \"sizeLog2\" : 10,\n\n          // (optional) Padding algorithm used to fill holes in rendered\n          // texture.\n          //\n          // The possible values are:\n          //     passthrough, color, transparent, diffusion, infinite.\n          \"paddingAlgorithm\" : \"diffusion\",\n\n          // (optional) When padding algorithm needs it, distance in pixels used\n          // by the padding algorithm.\n          //\n          // Dilation distance is needed for transparent, color and diffusion\n          // padding algorithms.\n          \"dilationDistance\" : 16\n\n        }\n      }]\n    }],\n\n    // List of subparts of the document to export.\n    \"exportList\" : [{\n\n      // Root path of the document structure this subpart applies to.\n      //\n      // For Texture Sets without stacks, this is a Texture Set name.\n      // (e.g. \"O1_Head\")\n      // For Texture Sets with stacks, this is Texture Set name + stack name\n      // separated by /\n      \"rootPath\" : \"02_Body/Mask\",\n\n      // (optional) In the selected rootPath, which maps to export.\n      //\n      // When \"filter\" is not provided, export everything.\n      \"filter\" : {\n\n        // Which maps to export, as an array of map names.\n        //\n        // The map names are to be used as defined in\n        // exportPresets.maps.fileName, including wildcards.\n        // (e.g. [\"$textureSet_color\", \"$textureSet_normal\"])\n        \"outputMaps\" : [\"$textureSet_color\"],\n\n        // Which UV Tiles to export, as an array of tile coordinates.\n        // A tile coordinate is a 2 dimensional array of U and V coordinates.\n        // (e.g. [[1, 1], [1, 2]] to export tiles U=1, V=1 and U=1, V=2)\n        \"uvTiles\" : [[1, 1]]\n\n      },\n\n      // (optional) Export preset to use. If undefined, fall back to\n      // \"defaultExportPreset\" value.\n      // The value can be the name of a preset defined in \"exportPresets\":\n      \"exportPreset\" : \"preset1\"\n      // Alternatively the value can be a URL to an existing preset file (see\n      // substance_painter.resource) listed in the export dialog:\n      // \"defaultExportPreset\" : substance_painter.resource.ResourceID(\n      //     context=\"starter_assets\",\n      //     name=\"PBR Metallic Roughness\").url(),\n\n    }],\n\n    // List of rules used to override export parameters of texture files.\n    //\n    // For each exported texture file, the export process will go through this\n    // list, in the order they are provided, to override export parameters.\n    // Available export parameters are:\n    //  fileFormat, bitDepth, dithering, sizeLog2, paddingAlgorithm and\n    //  dilationDistance.\n    // (see exportPresets.map.parameters)\n    //\n    // For each possible export parameter of each texture file:\n    // First, the parameter is initialized with the value provided by the\n    // exportPreset.maps.parameters, if any.\n    // Then, the export process iterates the rules of exportParameters and tries\n    // to match the texture file with the filter.\n    // If the filter matches, the parameter is overridden by this rule, else it\n    // stays untouched.\n    //\n    // At the end of the process, every parameter of every texture file must be\n    // defined for the export process to be able to continue.\n    // To achieve this, a good practice may be to define a default value for all\n    // the parameters:\n    // - For each preset map\n    // - With a global exportParameters rule using a filter that always matches\n    \"exportParameters\" : [{\n\n      // (optional) Select which texture files match the current rule.\n      // (i.e. for which texture files this rule will override parameters)\n      //\n      // When \"filter\" is not provided, select everything.\n      //\n      // Examples:\n      //     Filter that matches all:\n      //         \"filter\" : {}\n      //\n      //     Filter that matches some Texture Sets:\n      //         \"filter\" : {\"dataPaths\": [\"01_Head\", \"02_Body\"]}\n      //\n      //     Filter that matches some outputMaps:\n      //         \"filter\" : {\"outputMaps\": [\"$textureSet_color\"]}\n      //\n      //     Filter that matches nothing:\n      //         \"filter\" : {\"dataPaths\": []}\n      //\n      //     Use of a combined filter to match a Texture Set for some\n      //     outputMaps:\n      //         \"filter\" : {\"dataPaths\": [\"01_Head\"],\n      //     \"outputMaps\" : [\"$textureSet_color\"]}\n      \"filter\" : {\n\n        // List of rootPaths to match.\n        //\n        // This can be a mix of:\n        // - Texture Set names only, even for Texture Sets with stacks\n        // - Stack names, when stacks are used\n        \"dataPaths\": [\"01_Head\", \"02_Body/Mask\"],\n\n        // List of map names to match.\n        //\n        // The map names are to be used as defined in \"exportPresets.maps.fileName\",\n        // including wildcards.\n        \"outputMaps\": [\"$textureSet_color\"],\n\n         // List of UV Tiles to match, as an array of tile coordinates.\n         // A tile coordinate is a 2 dimensional array of U and V coordinates.\n         // (e.g. [[1, 1], [1, 2]] to export tiles U=1, V=1 and U=1, V=2)\n         \"uvTiles\" : [[1, 1]]\n\n      },\n\n      // (optional) Parameters to apply to the matched texture files as per the\n      // current rule.\n      //\n      // When \"parameters\" is not provided, the existing parameters are used.\n      // When \"parameters\" is provided, it overrides the existing parameters.\n      //\n      // Each individual parameter is optional and, when defined, overrides\n      // previously defined parameters (coming from the selected preset).\n      //\n      // It is important to understand that even though this section is\n      // optional, if after evaluating all the rules some parameters remain\n      // undefined, the configuration is invalid.\n      //\n      // In this example, we're setting a different texture size for the color\n      // map of both 01_Head and 02_Body/Mask, leaving settings on maps and\n      // other data paths, and leaving the other parameters untouched.\n      \"parameters\" : {\n\n        \"sizeLog2\" :  11\n\n      }\n    }]\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`Exporting textures, whether initiated through the Python API or in the UI,\ncan trigger the following events.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"event.html#module-substance_painter.event\",\n        \"title\": \"substance_painter.event\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event`}</inlineCode></a>{` for more details.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ExportTexturesAboutToStart(`}<em parentName=\"p\">{`textures: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`)\nEvent triggered just before a textures export.`}</p>\n    <p>{`textures`}<em parentName=\"p\">{`: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`\nList of texture files\nto be written to disk, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Type:\nDict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ExportTexturesEnded(`}<em parentName=\"p\">{`status: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`, `}<em parentName=\"p\">{`message: str`}</em>{`, `}<em parentName=\"p\">{`textures: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`)\nEvent triggered after textures export is finished.`}</p>\n    <p>{`message`}<em parentName=\"p\">{`: str`}</em>{`\nHuman readable status message.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <p>{`status`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`\nStatus code.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.ExportStatus\",\n        \"title\": \"substance_painter.export.ExportStatus\"\n      }}>{`ExportStatus`}</a></p>\n    <p>{`textures`}<em parentName=\"p\">{`: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`\nList of texture files\nwritten to disk, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Type:\nDict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</p>\n    <h2 {...{\n      \"id\": \"export-mesh\"\n    }}>{`Export Mesh`}</h2>\n    <p>{`substance_painter.export.scene_is_triangulated() → bool\nCheck if the scene has only triangles (polygons with only 3 sides).`}</p>\n    <p>{`Returns:\nTrue if the current scene has only triangles, False otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`substance_painter.export.scene_has_tessellation() → bool\nCheck if the scene has displacement/tessellation enabled.`}</p>\n    <p>{`Returns:\nTrue if the current scene has displacement/tessellation, False otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.export.MeshExportOption(`}<em parentName=\"p\">{`value`}</em>{`)\nOptions available for the mesh export.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`BaseMesh`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Export without displacement/tesselation.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`TriangulatedMesh`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Export without displacement/tesselation and apply triangulation.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Triangulation converts all mesh polygons with more than 3 sides\nto triangles (but doesn’t change the triangular ones).\nOnly avaiblable if the mesh contains such polygons. |\n| `}<inlineCode parentName=\"p\">{`TessellationNormalsBaseMesh`}</inlineCode>{` | Export with displacement/tessellation. Only available if\ndisplacement or tessellation has been used in the shaders. |\n| `}<inlineCode parentName=\"p\">{`TessellationRecomputeNormals`}</inlineCode>{` | Export with displacement/tessellation and recompute vertex\nnormals. Only available if displacement or\ntessellation has been used in the shaders. |`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.export.MeshExportResult(`}<em parentName=\"p\">{`status: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`, `}<em parentName=\"p\">{`message: str`}</em>{`)\nResult of the export mesh process`}</p>\n    <p>{`status\nStatus code.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.ExportStatus\",\n        \"title\": \"substance_painter.export.ExportStatus\"\n      }}>{`ExportStatus`}</a></p>\n    <p>{`message\nHuman readable status message.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <p>{`substance_painter.export.export_mesh(`}<em parentName=\"p\">{`file_path: str`}</em>{`, `}<em parentName=\"p\">{`option: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.export.MeshExportOption\",\n          \"title\": \"substance_painter.export.MeshExportOption\"\n        }}>{`MeshExportOption`}</a></em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.MeshExportResult\",\n        \"title\": \"substance_painter.export.MeshExportResult\"\n      }}>{`MeshExportResult`}</a>{`\nExport the current mesh to the given file path.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – The complete file path where to export the mesh. The file format is\ndeduced from the extension.\nSupported extensions are: `}<inlineCode parentName=\"li\">{`.usd`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`.obj`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`.fbx`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`.dae`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`.ply`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`.gltf`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`option`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.export.MeshExportOption\",\n          \"title\": \"substance_painter.export.MeshExportOption\"\n        }}><em parentName=\"a\">{`MeshExportOption`}</em></a>{`) – The export option to use.`}</li>\n    </ul>\n    <p>{`Returns:\nResult of the export process.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.export.MeshExportResult\",\n        \"title\": \"substance_painter.export.MeshExportResult\"\n      }}>{`MeshExportResult`}</a></p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`file_path`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`option`}</inlineCode>{` are invalid in the context\nof the current project. Contains a human readable message detailing\nthe problem.`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.export\n\n# Open a project we want to export from (see substance_painter.project\n# for details). This step is not necessary if there is already a project\n# opened in Substance 3D Painter.\nimport substance_painter.project\nsubstance_painter.project.open(\"C:/projects/MeetMat.spp\")\n\n# Choose an export option to use\nexport_option = substance_painter.export.MeshExportOption.BaseMesh\nif not substance_painter.export.scene_is_triangulated():\n    export_option = substance_painter.export.MeshExportOption.TriangulatedMesh\nif substance_painter.export.scene_has_tessellation():\n    export_option = substance_painter.export.MeshExportOption.TessellationNormalsBaseMesh\n\n# Actual export mesh operation:\nfilename = \"C:/projects/MeetMat.obj\"\nexport_result = substance_painter.export.export_mesh(filename, export_option)\n\n# In case of error, display a human readable message:\nif export_result.status != substance_painter.export.ExportStatus.Success:\n    print(export_result.message)\n\n`}</code></pre>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"project.html#module-substance_painter.project\",\n        \"title\": \"substance_painter.project\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.project`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-export\"\n      }}>{`Export documentation`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}