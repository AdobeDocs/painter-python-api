{"version":3,"file":"component---src-pages-guides-examples-blending-mode-md-56c6a5317323682d3edc.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,8BAA4B,+BAEpCA,EAAAA,EAAAA,KAAA,+JACAA,EAAAA,EAAAA,KAAA,iEACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,yBAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,yCAA0CH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACvE,KAAQ,sDAAoD,aAC1C,oBACtBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0BAA2BH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,mBACrEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,wBAAyBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UAAQ,QAAkB,SACjHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,2CAGvBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,wtLAqMtC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/examples/blending_mode.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"layer-blending-mode-editor\"\n    }}>{`Layer blending mode editor`}</h1>\n    <p>{`This example shows how to gather in a dock the list of all the channels of the currently selected layer to be able to change their blending mode.`}</p>\n    <p>{`To keep things simple, this example ignore effects.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To use this example:`}</p>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`Go to your Python plugin folder (see `}<a parentName=\"li\" {...{\n            \"href\": \"/painter-python-api/guides/creating-python-plugin/\"\n          }}>{`this page`}</a>{` to know where)`}</li>\n        <li parentName=\"ol\">{`Create a folder named `}<strong parentName=\"li\">{`blending_mode`}</strong></li>\n        <li parentName=\"ol\">{`Create a file named `}<strong parentName=\"li\"><strong parentName=\"strong\">{`init`}</strong>{`.py`}</strong></li>\n        <li parentName=\"ol\">{`Copy the code below inside the file.`}</li>\n      </ol>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os\n\nfrom PySide2 import QtGui\nfrom PySide2 import QtWidgets\nimport substance_painter as sp\n\nSCRIPT_FOLDER = os.path.dirname(os.path.realpath(__file__))\n\nWIDGETS = []\nWIDGET_NODE_NAME = None\nWIDGET_NODE_TYPE = None\nWIDGET_NODE_ID = None\nWIDGET_BLEND_LAYOUT = None\nVALID_TYPES = [\n    sp.layerstack.NodeType.PaintLayer,\n    sp.layerstack.NodeType.FillLayer\n]\nFRAME_STYLE = \"\"\"\n.QFrame\n{\n    border: 1px solid #252525;\n    border-radius: 4px;\n    background-color: #303030;\n}\n\"\"\"\nBLEND_MODES = []\n\ndef ChangeBlendMode( Layer, ChannelType, Dropdown ) :\n    # Retrieve blending mode\n    Index = Dropdown.currentIndex()\n    BlendMode = sp.layerstack.BlendingMode( Index )\n\n    # Change blending mode\n    Layer.set_blending_mode( BlendMode, ChannelType )\n\ndef BuildChannelUI( Layer, ChannelType, ChannelInfo ) :\n    Parent = QtWidgets.QFrame()\n    Parent.setFrameStyle( QtWidgets.QFrame.Panel )\n    Parent.setFrameShadow( QtWidgets.QFrame.Raised )\n    Parent.setStyleSheet( FRAME_STYLE )\n\n    Layout = QtWidgets.QVBoxLayout()\n    Parent.setLayout( Layout )\n\n    Label = QtWidgets.QLabel( ChannelType.name )\n    Layout.addWidget( Label )\n\n    Dropdown = QtWidgets.QComboBox()\n    Dropdown.addItems( BLEND_MODES )\n    Layout.addWidget( Dropdown )\n\n    # Retrieve layer current blending mode\n    # and update dropdown to show it\n    BlendModeName = Layer.get_blending_mode( ChannelType ).name\n    BlendModeIndex = BLEND_MODES.index( BlendModeName )\n    Dropdown.setCurrentIndex( BlendModeIndex )\n\n    # Connect a function to be able to change the\n    # blending mode from our own UI\n    # Based on: https://eli.thegreenplace.net/2011/04/25/passing-extra-arguments-to-pyqt-slot\n    Dropdown.currentIndexChanged.connect(\n        lambda: ChangeBlendMode( Layer, ChannelType, Dropdown )\n    )\n\n    WIDGET_BLEND_LAYOUT.addWidget(Parent)\n\ndef Update( Arg ) :\n    global WIDGET_NODE_ID\n\n    Stack = sp.textureset.get_active_stack()\n    Layers = sp.layerstack.get_selected_nodes( Stack )\n\n    if not len(Layers) == 1 :\n        WIDGET_NODE_NAME.setText( \"(Too many selected)\" )\n        WIDGET_NODE_TYPE.setText( \"(none)\" )\n        WIDGET_BLEND_LAYOUT.setEnabled( False )\n        ResetUI()\n        return\n\n    if not any( Layers[0].get_type() == Type for Type in VALID_TYPES ) :\n        WIDGET_NODE_NAME.setText( \"(Unsupported layer/effect)\" )\n        WIDGET_NODE_TYPE.setText( \"(none)\" )\n        WIDGET_BLEND_LAYOUT.setEnabled( False )\n        ResetUI()\n        return\n\n    WIDGET_NODE_NAME.setText( Layers[0].get_name() )\n    WIDGET_NODE_TYPE.setText( \"(\" + str(Layers[0].get_type()) + \")\" )\n    WIDGET_BLEND_LAYOUT.setEnabled( True )\n\n    ResetUI()\n\n    Channels = Stack.all_channels()\n\n    for ChannelType in Channels :\n        BuildChannelUI( Layers[0], ChannelType, Channels[ChannelType] )\n\ndef ResetUI() :\n    # From: https://stackoverflow.com/questions/4528347/clear-all-widgets-in-a-layout-in-pyqt\n    if WIDGET_BLEND_LAYOUT :\n        while WIDGET_BLEND_LAYOUT.count():\n            child = WIDGET_BLEND_LAYOUT.takeAt(0)\n            if child.widget():\n                child.widget().deleteLater()\n\ndef Separator() :\n    Separator = QtWidgets.QFrame()\n    Separator.setFrameShape( QtWidgets.QFrame.HLine )\n    Separator.setFrameShadow( QtWidgets.QFrame.Raised )\n    Separator.setStyleSheet( \"QFrame { border-bottom: 1px solid #252525; }\" )\n    return Separator\n\ndef BuildUI() :\n    global WIDGET_NODE_NAME\n    global WIDGET_NODE_TYPE\n    global WIDGET_BLEND_LAYOUT\n\n    Parent = QtWidgets.QFrame()\n    Parent.setWindowTitle(\"Blend Modes\")\n    Parent.setWindowIcon( QtGui.QIcon(SCRIPT_FOLDER + \"/\" + \"icon.svg\") )\n\n    ParentLayout = QtWidgets.QVBoxLayout()\n    Parent.setLayout( ParentLayout )\n\n    Margin = 10\n    ParentLayout.setContentsMargins( Margin, Margin, Margin, Margin )\n\n    # Build top UI\n    TitleLabel = QtWidgets.QLabel( \"<b>INFO</b>\" )\n    NodeLabel = QtWidgets.QLabel( \"(No layer selected)\" )\n    NodeType = QtWidgets.QLabel( \"(none)\" )\n\n    ParentLayout.addWidget( TitleLabel )\n    ParentLayout.addWidget( NodeLabel )\n    ParentLayout.addWidget( NodeType )\n\n    EmptyLabel = QtWidgets.QLabel( \"\" )\n    ParentLayout.addWidget( EmptyLabel )\n\n    ParentLayout.addWidget( Separator() )\n\n    # Build scrollable layout for blend modes\n    BlendLabel = QtWidgets.QLabel( \"<b>BLEND MODES</b>\" )\n    ParentLayout.addWidget( BlendLabel )\n\n    Widget = QtWidgets.QWidget()\n    VerticalLayout = QtWidgets.QVBoxLayout( Widget )\n\n    BlendLayout = QtWidgets.QVBoxLayout()\n    VerticalLayout.addLayout( BlendLayout )\n    VerticalLayout.addStretch()\n    VerticalLayout.setContentsMargins( 0, 0, 8, 0 )\n\n    ScrollArea = QtWidgets.QScrollArea()\n    ScrollArea.setWidget( Widget )\n    ScrollArea.setWidgetResizable( True )\n\n    ParentLayout.addWidget( ScrollArea )\n\n    # Finish\n    WIDGET_NODE_NAME = NodeLabel\n    WIDGET_NODE_TYPE = NodeType\n    WIDGET_BLEND_LAYOUT = BlendLayout\n\n    return Parent\n\ndef start_plugin():\n    global BLEND_MODES\n\n    # Add event for getting layer stack selection updates\n    sp.event.DISPATCHER.connect( sp.event.LayerStacksModelDataChanged, Update )\n\n    # Build dock UI\n    Parent = BuildUI()\n    sp.ui.add_dock_widget( Parent, sp.ui.UIMode.Edition )\n    ResetUI()\n    WIDGETS.append(Parent)\n\n    # Some enums at not iteratable currently,\n    # so we rely on the members attribute to build a list\n    BLEND_MODES = [ Value for Value in sp.layerstack.BlendingMode.__members__ ]\n\n\ndef close_plugin():\n    sp.event.DISPATCHER.disconnect( sp.event.LayerStacksModelDataChanged, Update )\n\n    for Widget in WIDGETS :\n        sp.ui.delete_ui_element( Widget )\n\n    WIDGETS.clear()\n\nif __name__ == \"__main__\":\n    start_plugin()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}