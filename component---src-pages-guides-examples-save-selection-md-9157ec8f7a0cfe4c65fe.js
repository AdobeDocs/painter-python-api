"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[306],{33563:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return c}});var a=t(87462),o=t(63366),s=(t(15007),t(64983)),r=t(91515),p=["components"],d={},i={_frontmatter:d},l=r.Z;function c(e){var n=e.components,t=(0,o.Z)(e,p);return(0,s.mdx)(l,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"save-and-restore-layer-selection"},"Save and restore layer selection"),(0,s.mdx)("p",null,"This example shows how to store a selection of layer or effects in a project and restore it when the project is re-opened."),(0,s.mdx)("hr",null),(0,s.mdx)("p",null,"To use this example:"),(0,s.mdx)("blockquote",null,(0,s.mdx)("ol",{parentName:"blockquote"},(0,s.mdx)("li",{parentName:"ol"},"Go to your Python plugin folder (see ",(0,s.mdx)("a",{parentName:"li",href:"/painter-python-api/guides/creating-python-plugin/"},"this page")," to know where)"),(0,s.mdx)("li",{parentName:"ol"},"Create a folder named ",(0,s.mdx)("strong",{parentName:"li"},"blending_mode")),(0,s.mdx)("li",{parentName:"ol"},"Create a file named ",(0,s.mdx)("strong",{parentName:"li"},(0,s.mdx)("strong",{parentName:"strong"},"init"),".py")),(0,s.mdx)("li",{parentName:"ol"},"Copy the code below inside the file."))),(0,s.mdx)("hr",null),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'import substance_painter as sp\n\nPROJECT_READY = False\n\ndef OnStackChange( Arg ) :\n    if not sp.project.is_in_edition_state() or not PROJECT_READY :\n        return\n\n    Stack = sp.textureset.get_active_stack()\n    Layers = sp.layerstack.get_selected_nodes( Stack )\n    IDs = []\n\n    for Layer in Layers :\n        IDs.append( Layer.uid() )\n\n    Metadata = sp.project.Metadata( "LayerStackSelection" )\n    Metadata.set( "Selection", IDs )\n\n    if len(IDs) == 1 and (\n        Layer.get_type() == sp.layerstack.NodeType.PaintLayer \\\n    or  Layer.get_type() == sp.layerstack.NodeType.FillLayer \\\n    or  Layer.get_type() == sp.layerstack.NodeType.InstanceLayer \\\n    or  Layer.get_type() == sp.layerstack.NodeType.GroupLayer ) :\n        Type = sp.layerstack.get_selection_type( Layers[0] )\n\n        Metadata.set(\n            "SelectionType",\n            sp.layerstack.SelectionType( Type )\n        )\n\ndef OnEditionStart( Arg ) :\n    Metadata = sp.project.Metadata( "LayerStackSelection" )\n    IDs = Metadata.get( "Selection" )\n    Nodes = []\n\n    if IDs :\n        for ID in IDs :\n            Nodes.append( sp.layerstack.Node(ID) )\n\n        sp.layerstack.set_selected_nodes( Nodes )\n\n        if len(IDs) == 1 and (\n            Nodes[0].get_type() == sp.layerstack.NodeType.PaintLayer \\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.FillLayer \\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.InstanceLayer \\\n        or  Nodes[0].get_type() == sp.layerstack.NodeType.GroupLayer )  :\n            Type = Metadata.get( "SelectionType" )\n            sp.layerstack.set_selection_type( Nodes[0], int(Type) )\n\n    # Need to be done at the end because\n    # of concurrency between events\n    global PROJECT_READY\n    PROJECT_READY = True\n\ndef OnEditionStop( Arg ) :\n    global PROJECT_READY\n    PROJECT_READY = False\n\ndef start_plugin():\n    sp.event.DISPATCHER.connect( sp.event.ProjectEditionEntered, OnEditionStart )\n    sp.event.DISPATCHER.connect( sp.event.ProjectEditionLeft, OnEditionStop )\n    sp.event.DISPATCHER.connect( sp.event.LayerStacksModelDataChanged, OnStackChange )\n\ndef close_plugin():\n    sp.event.DISPATCHER.disconnect( sp.event.ProjectEditionEntered, OnEditionStart )\n    sp.event.DISPATCHER.disconnect( sp.event.ProjectEditionLeft, OnEditionStop )\n    sp.event.DISPATCHER.disconnect( sp.event.LayerStacksModelDataChanged, OnStackChange )\n\nif __name__ == "__main__":\n    start_plugin()\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-examples-save-selection-md-9157ec8f7a0cfe4c65fe.js.map