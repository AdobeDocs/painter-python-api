{"version":3,"file":"component---src-pages-api-substance-painter-project-md-f163688eeda85bceebd2.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,mFACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,kBAAgB,mBAExBA,EAAAA,EAAAA,KAAA,gHAEAA,EAAAA,EAAAA,KAAA,+EACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,o0FA+ElCH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,2CAA2CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,8BAAqC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,0BAAiC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iBAAuB,yCAE9OH,EAAAA,EAAAA,KAAA,qEAEAA,EAAAA,EAAAA,KAAA,mCAEAA,EAAAA,EAAAA,KAAA,8DAEAA,EAAAA,EAAAA,KAAA,mCAEAA,EAAAA,EAAAA,KAAA,qDAEAA,EAAAA,EAAAA,KAAA,0BAEAA,EAAAA,EAAAA,KAAA,wBACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,oDACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,6BAA8C,MAC7EH,EAAAA,EAAAA,KAAA,6DAAuDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gCAAsC,gFAE/GH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,YAAsB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAaH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,KAAe,cAAoB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAiB,qCACjLH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,OAChEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,uDACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAA+D,MAC9FH,EAAAA,EAAAA,KAAA,uLAGAA,EAAAA,EAAAA,KAAA,gEACuCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,4CAEvFH,EAAAA,EAAAA,KAAA,+BAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,iCAE3DH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,kCACR,MAAS,mCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAA4B,OAC7DH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,MAC9DH,EAAAA,EAAAA,KAAA,kEAA4DA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtE,KAAQ,yCACR,MAAS,yCAAuC,eAC5B,4CAExBH,EAAAA,EAAAA,KAAA,sDAEAA,EAAAA,EAAAA,KAAA,2BACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,yCACR,MAAS,yCAAuC,iBAEpDH,EAAAA,EAAAA,KAAA,sBACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,kGAEAA,EAAAA,EAAAA,KAAA,wDAEAA,EAAAA,EAAAA,KAAA,qCAEAA,EAAAA,EAAAA,KAAA,sBACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,yXAMAA,EAAAA,EAAAA,KAAA,uBACFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,2CAChDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,gBAC/CH,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,mDACR,MAAS,oDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4BAA6C,OAC9EH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,uDACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8CAA+D,MAC9FH,EAAAA,EAAAA,KAAA,yHAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,iCAE3DH,EAAAA,EAAAA,KAAA,uBACFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,4CAChDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,gBAC/CH,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,2DACR,MAAS,kDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kDAAmE,OACpGH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,wDACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,+CAAgE,MAC/FH,EAAAA,EAAAA,KAAA,oQAGAA,EAAAA,EAAAA,KAAA,qGAGAA,EAAAA,EAAAA,KAAA,gDAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,oGAEAA,EAAAA,EAAAA,KAAA,2DACkCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,4CAElFH,EAAAA,EAAAA,KAAA,+BAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,iCAE3DH,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,spDAgDlCH,EAAAA,EAAAA,KAAA,8CAAwCA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,uBAA6B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,sDAA8D,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yCAA+C,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,cAAeH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACnS,KAAQ,sCACR,MAAS,sCAAoC,YAC5B,gOAAqO,oCAExPH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,qNAEEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,2DAEjGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,sBAAoC,sMAE5BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,mFAElEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,kHAErFH,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,gEACAA,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,kBAA4B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,yFAEhHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,uBAAiC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QAAc,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,MAAY,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,2CAC/LH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,sBAAgC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,yDACpHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,YAAsB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACjF,KAAQ,sCACR,MAAS,uCACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,aAAsB,mDAE/CH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,0DACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,8CACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,aAAaH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,QAAsB,8DACvHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,aAAaH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,sBAAoC,uDACrIH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,aAAuB,UAAUH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,YAA0B,qCACjIH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,6BAA6BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,kBAAgC,uBAC3JH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,wBAAwBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,kBAAgC,qBACtJH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,uCAAuCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,uBAAqC,mBAC1KH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,4BAA4BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,sBAAoC,oBAC9JH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,4BAA4BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,sBAAoC,iBAC9JH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,UAAUH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,YAA0B,2DACnIH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACT,KAAQ,sCACR,MAAS,uCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA8B,OAC7DH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,cAAwB,UAAUH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,uCAAqD,iCAE/JH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,sCACR,MAAS,uCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA8B,OAC/DH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qDAAmD,kCACpB,MAC3CH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,wCAAwCH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,wCAA8C,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,uBAAwBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACpM,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,kBAAuB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,wBAAyBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9G,KAAQ,0CACR,MAAS,0CAAwC,gBAC5B,kBAAuB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,sBAAuBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACzG,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,kBAAuB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kCAAwC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iDAAuD,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,sCAA4C,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,wCAA8C,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kBAAmBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACjY,KAAQ,yCACR,MAAS,yCAAuC,eAC5B,kBAAuB,gEACMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,gCACvGH,EAAAA,EAAAA,KAAA,6FACAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAqC,OACtEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0CACR,MAAS,2CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAAkC,OACnEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAqC,OACtEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,oCACR,MAAS,qCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,aAA8B,OAC/DH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0DAAwD,uCACpB,MAChDH,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,6BAEhGH,EAAAA,EAAAA,KAAA,uCAAiCA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,mDAEzGH,EAAAA,EAAAA,KAAA,wBAAkBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,oDAE1FH,EAAAA,EAAAA,KAAA,2BAAqBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,yCAE9FH,EAAAA,EAAAA,KAAA,4BAAsBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,WAAiB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,oNAIhGH,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,MAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACzD,KAAQ,6CACR,MAAS,6CAA2C,oBACvB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,+DAE1EH,EAAAA,EAAAA,KAAA,6BAAuBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,MAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACxD,KAAQ,6CACR,MAAS,6CAA2C,oBACvB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,2DAE1EH,EAAAA,EAAAA,KAAA,+BAAyBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,MAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC1D,KAAQ,0CACR,MAAS,0CAAwC,iBACvB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,gDAEvEH,EAAAA,EAAAA,KAAA,yBAAmBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,MAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACpD,KAAQ,yCACR,MAAS,yCAAuC,gBACvB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,uCAEtEH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,2CAA2CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yBAA+B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gCAAsC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,8BAAoC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kBAAwB,wCAE1SH,EAAAA,EAAAA,KAAA,sKAEAA,EAAAA,EAAAA,KAAA,kBAAYA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,mEAGjFH,EAAAA,EAAAA,KAAA,uBAAiBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,yGAEzEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBACzCH,EAAAA,EAAAA,KAAA,8DAAwDA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,OAAqB,oCACvGH,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,+GAG7FH,EAAAA,EAAAA,KAAA,qBAAeA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,+FAExFH,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,OAAKG,WAAW,eAAaH,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAC1C,UAAa,mBAAiB,gJAWpCH,EAAAA,EAAAA,KAAA,2CACAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,+CAA+CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,0KAIpHH,EAAAA,EAAAA,KAAA,4FAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,cACEA,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,SAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,kBAInBH,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,YAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,0CAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,aAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,4CAKrBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,4CAA4CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,kIAGjHH,EAAAA,EAAAA,KAAA,iHAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,cACEA,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,SAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,kBAInBH,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,eAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,wCAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,iBAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,4CAKrBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,+CAA+CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,4DAEpHH,EAAAA,EAAAA,KAAA,4TAIAA,EAAAA,EAAAA,KAAA,8FAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,cACEA,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,SAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,kBAInBH,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,aAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,iCAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,yBAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,8DAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,YAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,gEAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,uBAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,WAKjBH,EAAAA,EAAAA,KAAA,MACE,GAAM,iCAA+B,kCAEvCA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,8YAelCH,EAAAA,EAAAA,KAAA,+FAEAA,EAAAA,EAAAA,KAAA,uBACFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,6BAA6BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,gBAC5HH,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,sBACFA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,4CAAsCA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,0BAAgC,0CAC9DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAmC,MACvFH,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,qBAA+B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,yDAAyDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,OACjMH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,oDAAoDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,qBAAmC,MAC3KH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,8CACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,kFAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,4CACAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,iCAE3DH,EAAAA,EAAAA,KAAA,MACE,GAAM,oBAAkB,qBAE1BA,EAAAA,EAAAA,KAAA,8FACAA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACV,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,6CAA8D,MAC7FH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,43CAqClCH,EAAAA,EAAAA,KAAA,8GAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,qEACjEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,iCAE3DH,EAAAA,EAAAA,KAAA,uBACFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,8DAChDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,gBAC/CH,EAAAA,EAAAA,KAAA,gCAEAA,EAAAA,EAAAA,KAAA,4CAAsCA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAWH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC3E,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,kCAAuC,yEAErEH,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,+FACAA,EAAAA,EAAAA,KAAA,0BACFA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,QAAkB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtD,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,oBAA6B,6CACpDH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,wDACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAqC,OACtEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,OAChEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0CACR,MAAS,2CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBAAoC,OACrEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,MAC9DH,EAAAA,EAAAA,KAAA,+CAAyCA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,0BAAgC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAWH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACtI,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,kCAAuC,sEACfH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAmC,MACnHH,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,yBAAmBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAmC,mJAGhFH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,qBAA+B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,8CACnHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,QAAkB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC7E,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,oBAA6B,8CAEtDH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,wDACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAqC,OACtEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,kCACR,MAAS,mCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAA4B,OAC7DH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0CACR,MAAS,2CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mBAAoC,OACrEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,MAC9DH,EAAAA,EAAAA,KAAA,oDAA8CA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yBAA+B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAWH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC1I,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,kCAAuC,iFAEvEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,mGAE1DH,EAAAA,EAAAA,KAAA,+MAGAA,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,yBAAmBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,mJAG/EH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,oBAA8B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,sDAClHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,QAAkB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC7E,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,oBAA6B,8CAEtDH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,qDACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,6CACR,MAAS,8CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAqC,OACtEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,kCACR,MAAS,mCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAA4B,OAC7DH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,OAChEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,MAC9DH,EAAAA,EAAAA,KAAA,wDAAkDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,2BAAiC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,yBAA+B,QAAQH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC9K,KAAQ,6CACR,MAAS,6CAA2C,mBAC5B,6EAE5BH,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,iJAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,iEACAA,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,sBAAgC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,uBACpHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,oBAA8B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,qDAEpHH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,yDACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,MAC9DH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,+CAA+CH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,kCAEpHH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,cACEA,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,SAEfH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,kBAInBH,EAAAA,EAAAA,KAAA,SAAOG,WAAW,UAChBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,UAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,iFAGjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,UACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,OACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,iBAC9BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KACb,MAAS,MAAI,8EAKrBH,EAAAA,EAAAA,KAAA,MACE,GAAM,oBAAkB,qBAE1BA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,kuBAuBlCH,EAAAA,EAAAA,KAAA,mDAA6CA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,uBAA6B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,cAAeH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC3I,KAAQ,mDACR,MAAS,mDAAiD,0BACvB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iCAAkCH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC3G,KAAQ,8CACR,MAAS,8CAA4C,oBAC5B,WAAgB,oJAG/CH,EAAAA,EAAAA,KAAA,mHAC8BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAmC,uEAE3FH,EAAAA,EAAAA,KAAA,yBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,kBAA4B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,yFAEhHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,YAAsB,MAAMH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACjF,KAAQ,mDACR,MAAS,oDACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,0BAAmC,oDAC1DH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,qBAA+B,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,YAAaH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,KAAe,MAAUH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC1K,KAAQ,8CACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,sBAA8BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QAAc,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,UAAgB,+CAEhIH,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gEACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,8CACR,MAAS,+CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAsC,OACvEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,mDACR,MAAS,oDACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,0BAA2C,OAC5EH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qCACR,MAAS,sCACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA+B,OAChEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,qDAAmD,kCACpB,MAC3CH,EAAAA,EAAAA,KAAA,mHAEAA,EAAAA,EAAAA,KAAA,wFAEAA,EAAAA,EAAAA,KAAA,+BAEAA,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,qDAAqDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,+BAAqC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,iCAAuC,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kBAAmBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAClQ,KAAQ,yCACR,MAAS,yCAAuC,eAC5B,kBAAuB,4CAEjDH,EAAAA,EAAAA,KAAA,qHAEAA,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,yCACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAmC,OACpEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACR,KAAQ,0DAAwD,uCACpB,MAChDH,EAAAA,EAAAA,KAAA,2BAAqBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,yCAE9FH,EAAAA,EAAAA,KAAA,6BAAuBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,0CAEhGH,EAAAA,EAAAA,KAAA,yBAAmBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,MAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KACpD,KAAQ,yCACR,MAAS,yCAAuC,gBACvB,KAAKH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,UAAgB,uCAEtEH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,gDAAgDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,sEAErHH,EAAAA,EAAAA,KAAA,sBACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,yCACR,MAAS,0CACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAmC,MAClEH,EAAAA,EAAAA,KAAA,mBAAaA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,2DAE5CH,EAAAA,EAAAA,KAAA,qBAAeA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,kCAE9CH,EAAAA,EAAAA,KAAA,MACE,GAAM,oBAAkB,qBAE1BA,EAAAA,EAAAA,KAAA,oBAEAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,eAAaH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,wCAAwCH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,gBAAsB,2NAI5IH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,2HAE1BH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,iCAAkCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,YAA0B,qKAGhHH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,YAC1BH,EAAAA,EAAAA,KAAA,OAAKG,WAAW,eAAaH,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAC1C,UAAa,mBAAiB,mhBAmBlCH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,6DAE1BH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,YAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,QAASH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAkB,0DAEvEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,2EAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QACjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,oDAGvBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QACjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,8BACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,sDAIzBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,iBAC9BH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,OAAiB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,sDACxEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,YAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,gBAA0B,6BAA6BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,OAAqB,uCAClJH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,sEAEnEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,QAASH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,YAAkB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,mDAE9GH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,2EAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QACjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,oDAGvBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,QACjBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,8BACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,sDAIzBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,gBAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,OAAiB,MAAMH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,OAAa,mDAClGH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,SAAmB,+BAEhEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAY,YAC1BH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,0DACR,MAAS,6CACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,iBAA8B,gCACzDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,MAAI,gBAA0B,UAAUH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,SAAuB,wCACjIH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,kEACR,MAAS,qDACRH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,yBAAsC,uEAGrEH,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,iJAEEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACZ,KAAQ,4CACR,MAAS,4BACRH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,4BAA6C,uBAC5EH,EAAAA,EAAAA,KAAA,kBACAA,EAAAA,EAAAA,KAAA,oEAA8DA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAA+B,SACzHH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,gEAC1DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,yBAAuC,0DAC/DH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,sGAEpCH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,kGAEpCH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,2GAEpCH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,gDAAgDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,kBAAwB,+DAE9HH,EAAAA,EAAAA,KAAA,sBAAgBA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,4BAEjDH,EAAAA,EAAAA,KAAA,wBAEAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,8FAEpCH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,6HAEpCH,EAAAA,EAAAA,KAAA,+IAEAA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,mHAIxC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/project.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`project module — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"project-module\"\n    }}>{`project module`}</h1>\n    <p>{`This module allows to open, create, save and close projects, and change some of\ntheir properties.`}</p>\n    <p>{`First, here is a complete example showing how to use this module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.project\n\n# A few declarations used in this example:\nworkFolder = \"C:/MyWorkDir\"\nmeshFile = workFolder+\"/MeetMat.FBX\"\ntemplateFile = workFolder+\"/MyTemplate.spt\"\nmySettings = substance_painter.project.Settings(\n    import_cameras=True,\n    normal_map_format=substance_painter.project.NormalMapFormat.OpenGL)\n\n# This should print nothing if you just opened Substance 3D Painter,\n# since no project is opened:\nif substance_painter.project.is_open():\n    print(\"There is already a project opened!\")\n\n\n# Create a project from a file, import cameras from the file, and set up\n# the project for OpenGL:\nsubstance_painter.project.create(mesh_file_path=meshFile, settings=mySettings)\n\n# Show the current state of the project:\nif substance_painter.project.is_open():\n    print(\"The project was successfully created.\")\nif substance_painter.project.needs_saving():\n    print(\"The project hasn't been saved yet.\")\n# At this stage the file path is empty:\nprint(\"The file path of the project is: '{0}'\"\n    .format(substance_painter.project.file_path()))\n\n\n# Save the project to a file:\nsubstance_painter.project.save_as(workFolder+\"/MyNewProject.spp\") # No errors\nif not substance_painter.project.needs_saving():\n    print(\"As expected, there is nothing to save since this was just done.\")\nprint(\"The file path of the project is now: '{0}'\"\n    .format(substance_painter.project.file_path()))\nprint(\"The name of the project is now: '{0}'\"\n    .format(substance_painter.project.name()))\n\n# ...\n# Do some painting here.\n# ...\n\n# Create a backup copy of the project, but keep on working on the initial project:\nsubstance_painter.project.save_as_copy(workFolder+\"/MyBackupProject.spp\")\nif not substance_painter.project.needs_saving():\n    print(\"Even though a back copy was made, the project still has to be saved.\")\nprint(\"The file path of the project is still: '{0}'\"\n    .format(substance_painter.project.file_path()))\n\n# ...\n# Do some more painting here.\n# Suppose you make a terrible mistake and want to revert to the backup copy.\n# ...\n\n# Close the current project; all unsaved changes are lost!\nsubstance_painter.project.close()\nif not substance_painter.project.is_open():\n    print(\"No project is opened anymore.\")\n\n# Open the backup copy:\nsubstance_painter.project.open(workFolder+\"/MyBackupProject.spp\")\nif substance_painter.project.is_open()\n    print(\"Our project is back!\")\n\n\n# We can save a template from the project:\nsubstance_painter.project.save_as_template(templateFile, \"01_Head\")\nsubstance_painter.project.close()\n\n# We can now create a new project with that template file:\nsubstance_painter.project.create(mesh_file_path=meshFile,\n                                 template_file_path=templateFile)\n\n# End of our little example...\nsubstance_painter.project.close()\n\n`}</code></pre>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.BoundingBox(`}<em parentName=\"p\">{`dimensions: List`}{`[float]`}</em>{`, `}<em parentName=\"p\">{`center: List`}{`[float]`}</em>{`, `}<em parentName=\"p\">{`radius: float`}</em>{`)\nAxis-aligned bounding box (AABB).`}</p>\n    <p>{`dimensions\nThe dimensions (x,y,z) of the bounding box.`}</p>\n    <p>{`Type:\nList`}{`[float]`}</p>\n    <p>{`center\nThe center (x,y,z) of the bounding box..`}</p>\n    <p>{`Type:\nList`}{`[float]`}</p>\n    <p>{`radius\nThe radius of the bounding box.`}</p>\n    <p>{`Type:\nfloat`}</p>\n    <p>{`See also:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.get_scene_bounding_box\",\n        \"title\": \"substance_painter.project.get_scene_bounding_box\"\n      }}><inlineCode parentName=\"a\">{`get_scene_bounding_box()`}</inlineCode></a>{`,`}</p>\n    <p>{`substance_painter.project.execute_when_not_busy(`}<em parentName=\"p\">{`callback: Callable[[], None]`}</em>{`) → None\nExecute the given callback when Substance 3D Painter is not busy.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`callback`}</strong>{` (`}<em parentName=\"p\">{`Callable`}<strong parentName=\"em\">{`[`}</strong>{`[**]`}{`**,`}</em>{` `}<em parentName=\"p\">{`None**]`}</em>{`) – The callback to be executed.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BusyStatusChanged\",\n        \"title\": \"substance_painter.event.BusyStatusChanged\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BusyStatusChanged`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.file_path() → str | None\nReturn the file path of the current project. This is the path where the\nproject will be written to when it is saved.`}</p>\n    <p>{`Returns:\nThe file path of the current project, or `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{` if the project\nhasn’t been saved yet.`}</p>\n    <p>{`Return type:\nstr`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save\",\n        \"title\": \"substance_painter.project.save\"\n      }}><inlineCode parentName=\"a\">{`save()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save_as\",\n        \"title\": \"substance_painter.project.save_as\"\n      }}><inlineCode parentName=\"a\">{`save_as()`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.get_scene_bounding_box() → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.BoundingBox\",\n        \"title\": \"substance_painter.project.BoundingBox\"\n      }}>{`BoundingBox`}</a>{`\nReturn the bounding box of the scene.`}</p>\n    <p>{`Returns:\nThe bounding box of the scene.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.BoundingBox\",\n        \"title\": \"substance_painter.project.BoundingBox\"\n      }}>{`BoundingBox`}</a></p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`substance_painter.project.get_uuid() → UUID\nReturn the UUID of the current project.`}</p>\n    <p>{`Returns:\nThe UUID of the current project.`}</p>\n    <p>{`Return type:\nuuid.UUID`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`substance_painter.project.is_busy() → bool\nCheck if Substance 3D Painter is currently busy.\nIf busy, the project cannot be saved at the moment.\nThe application may be busy because no project is in edition state,\nor a long process such as baking/export/unwrap process is ongoing.\nThe corresponding BusyStatusChanged event is fired when the busy state changes.`}</p>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the project is ready to be saved,\n`}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.execute_when_not_busy\",\n        \"title\": \"substance_painter.project.execute_when_not_busy\"\n      }}><inlineCode parentName=\"a\">{`execute_when_not_busy()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.BusyStatusChanged\",\n        \"title\": \"substance_painter.event.BusyStatusChanged\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.BusyStatusChanged`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.is_in_edition_state() → bool\nCheck if the current project is ready to work with.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n    </ul>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the project is ready to work with,\n`}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.ProjectEditionEntered\",\n        \"title\": \"substance_painter.event.ProjectEditionEntered\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.ProjectEditionEntered`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"event.html#substance_painter.event.ProjectEditionLeft\",\n        \"title\": \"substance_painter.event.ProjectEditionLeft\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event.ProjectEditionLeft`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.last_saved_substance_painter_version() → Tuple`}{`[int, int, int]`}{` | None\nReturn the version of Substance 3D Painter used to last save the project, or None\nif the project is unsaved or was saved with version <= 8.2.0.`}</p>\n    <p>{`Returns:\nThe concerned version of Substance 3D Painter, as a major/minor/patch\ntuple.`}</p>\n    <p>{`Return type:\nTuple(int, int, int)`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`substance_painter.project.name() → str | None\nReturn the name of the current project.`}</p>\n    <p>{`Returns:\nThe name of the current project, or `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{` if the project hasn’t\nbeen saved yet.`}</p>\n    <p>{`Return type:\nstr`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-a-project\"\n    }}>{`Creating a project`}</h2>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.project\n\n# Use OpenGL / right handed normal map format:\nogl_normal_map_format = substance_painter.project.NormalMapFormat.OpenGL\n\n# Use per vertex tangent space:\nper_vertex_tangent = substance_painter.project.TangentSpace.PerVertex\n\n# Declare the settings for the project:\nproject_settings = substance_painter.project.Settings(\n    import_cameras=True,\n    normal_map_format=ogl_normal_map_format,\n    tangent_space_mode=per_vertex_tangent)\n\n# A list of maps to use:\nmaps = [\"C:/Documents/DefaultMaterial_ambient_occlusion.png\",\n    \"C:/Documents/DefaultMaterial_id.png\"]\n\n# Create the project with those settings:\nsubstance_painter.project.create(\n    mesh_file_path = \"C:/Documents/my_mesh.fbx\",\n    mesh_map_file_paths = maps,\n    settings = project_settings)\n\n\n# If this is a project with UDIMs, we need to choose the workflow:\nuv_tile_workflow = substance_painter.project.ProjectWorkflow.UVTile\n\n# Declare the settings for the project:\nproject_settings = substance_painter.project.Settings(\n    import_cameras=True,\n    normal_map_format=ogl_normal_map_format,\n    tangent_space_mode=per_vertex_tangent,\n    project_workflow=uv_tile_workflow)\n\n# A list of maps to use (in this example, the file name indicates a\n# a sequence of potentially several UDIMs; the project will load all\n# of them without having to list them individually):\nmaps = [\"C:/Documents/DefaultMaterial_ambient_occlusion.1001.png\"]\n\n# Create the project with those settings:\nsubstance_painter.project.create(\n    mesh_file_path = \"C:/Documents/my_mesh_with_UDIMs.fbx\",\n    mesh_map_file_paths = maps,\n    settings = project_settings)\n\n`}</code></pre>\n    <p>{`substance_painter.project.create(`}<em parentName=\"p\">{`mesh_file_path: str`}</em>{`, `}<em parentName=\"p\">{`mesh_map_file_paths: List`}{`[str]`}{` | None = None`}</em>{`, `}<em parentName=\"p\">{`template_file_path: str | None = None`}</em>{`, `}<em parentName=\"p\">{`settings: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.Settings\",\n          \"title\": \"substance_painter.project.Settings\"\n        }}>{`Settings`}</a>{` = Settings(default_save_path=None, normal_map_format=None, tangent_space_mode=None, project_workflow=None, export_path=None, default_texture_resolution=None, import_cameras=None, mesh_unit_scale=None, usd_settings=None)`}</em>{`)\nCreate a new project.\nIf an `}<inlineCode parentName=\"p\">{`OCIO`}</inlineCode>{` environment variable is set, pointing to a .ocio configuration file,\nthe project is setup to use the OCIO color management mode defined by that file.\nIf the configuration defined by that file is invalid, a `}<inlineCode parentName=\"p\">{`ProjectError`}</inlineCode>{` is raised and\nno project is created.\nSimilary, if a `}<inlineCode parentName=\"p\">{`PAINTER_ACE_CONFIG`}</inlineCode>{` environment variable is set, pointing to a .json\npreset file, the project is setup to use the ACE color management mode defined by that file.\nIf the preset defined in that file is invalid, a `}<inlineCode parentName=\"p\">{`ProjectError`}</inlineCode>{` is raised and no project\nis created.\nIf both environment variables are set, `}<inlineCode parentName=\"p\">{`OCIO`}</inlineCode>{` will be used.\nIf there is not such environment variable, the project uses the Legacy color management mode.`}</p>\n    <p>{`Note`}</p>\n    <p>{`Project settings override the template parameters.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`mesh_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – File path of the mesh to edit.\nSupported file formats: fbx, obj, dae, ply, usd.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`mesh_map_file_paths`}</strong>{` (`}<em parentName=\"li\">{`list`}</em>{` `}<em parentName=\"li\">{`of`}</em>{` `}<em parentName=\"li\">{`string`}</em>{`) – Paths to the additional mesh maps.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`template_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – Template file path to use to create the project.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`settings`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.Settings\",\n          \"title\": \"substance_painter.project.Settings\"\n        }}><em parentName=\"a\">{`Settings`}</em></a>{`) – Configuration options of the new project.`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot create the project.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If there is already an opened project.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If an `}<inlineCode parentName=\"li\">{`OCIO`}</inlineCode>{` environment variable is set to an invalid configuration.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If an `}<inlineCode parentName=\"li\">{`PAINTER_ACE_CONFIG`}</inlineCode>{` environment variable is set to an invalid preset.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TypeError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`settings`}</inlineCode>{` is not an instance of Settings.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the file format of `}<inlineCode parentName=\"li\">{`mesh_file_path`}</inlineCode>{` is not supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the mesh file `}<inlineCode parentName=\"li\">{`mesh_file_path`}</inlineCode>{` does not exist.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If any of the mesh map files in `}<inlineCode parentName=\"li\">{`mesh_map_file_paths`}</inlineCode>{` do not exist.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the template file `}<inlineCode parentName=\"li\">{`template_file_path`}</inlineCode>{` doesn’t exist.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the template file `}<inlineCode parentName=\"li\">{`template_file_path`}</inlineCode>{` is invalid.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`settings`}</inlineCode>{` are not valid project settings (see documentation\nof `}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.Settings\",\n          \"title\": \"substance_painter.project.Settings\"\n        }}><inlineCode parentName=\"a\">{`Settings`}</inlineCode></a>{`).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`settings.default_texture_resolution`}</inlineCode>{` is not a valid resolution.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.Settings\",\n        \"title\": \"substance_painter.project.Settings\"\n      }}><inlineCode parentName=\"a\">{`Settings`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-project-creation\"\n      }}>{`Project creation documentation`}</a>{`.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.Settings(`}<em parentName=\"p\">{`default_save_path: str | None = None`}</em>{`, `}<em parentName=\"p\">{`normal_map_format: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.NormalMapFormat\",\n          \"title\": \"substance_painter.project.NormalMapFormat\"\n        }}>{`NormalMapFormat`}</a>{` | None = None`}</em>{`, `}<em parentName=\"p\">{`tangent_space_mode: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.TangentSpace\",\n          \"title\": \"substance_painter.project.TangentSpace\"\n        }}>{`TangentSpace`}</a>{` | None = None`}</em>{`, `}<em parentName=\"p\">{`project_workflow: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ProjectWorkflow\",\n          \"title\": \"substance_painter.project.ProjectWorkflow\"\n        }}>{`ProjectWorkflow`}</a>{` | None = None`}</em>{`, `}<em parentName=\"p\">{`export_path: str | None = None`}</em>{`, `}<em parentName=\"p\">{`default_texture_resolution: int | None = None`}</em>{`, `}<em parentName=\"p\">{`import_cameras: bool | None = None`}</em>{`, `}<em parentName=\"p\">{`mesh_unit_scale: float | None = None`}</em>{`, `}<em parentName=\"p\">{`usd_settings: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.UsdSettings\",\n          \"title\": \"substance_painter.project.UsdSettings\"\n        }}>{`UsdSettings`}</a>{` | None = None`}</em>{`)\nProject configuration options. All options can be set to `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{` to use the default values.`}</p>\n    <p>{`This corresponds to the options that are available in the “New project” dialog.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.NormalMapFormat\",\n        \"title\": \"substance_painter.project.NormalMapFormat\"\n      }}><inlineCode parentName=\"a\">{`NormalMapFormat`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.TangentSpace\",\n        \"title\": \"substance_painter.project.TangentSpace\"\n      }}><inlineCode parentName=\"a\">{`TangentSpace`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectWorkflow\",\n        \"title\": \"substance_painter.project.ProjectWorkflow\"\n      }}><inlineCode parentName=\"a\">{`ProjectWorkflow`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.create\",\n        \"title\": \"substance_painter.project.create\"\n      }}><inlineCode parentName=\"a\">{`create()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-project-configuration\"\n      }}>{`Project configuration documentation`}</a>{`.`}</p>\n    <p>{`default_save_path`}<em parentName=\"p\">{`: str`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nThe default save path.`}</p>\n    <p>{`default_texture_resolution`}<em parentName=\"p\">{`: int`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nDefault resolution for all the Texture Sets.`}</p>\n    <p>{`export_path`}<em parentName=\"p\">{`: str`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nUse this path as the default map export path.`}</p>\n    <p>{`import_cameras`}<em parentName=\"p\">{`: bool`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nImport cameras from the mesh file.`}</p>\n    <p>{`mesh_unit_scale`}<em parentName=\"p\">{`: float`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nUse custom unit scale for input mesh. Painter unit is centimeters.\nIf set to 0 or None, use mesh file internal unit scale.\nThis setting is necessary for .obj meshes that use units other than centimeters.`}</p>\n    <p>{`normal_map_format`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.NormalMapFormat\",\n          \"title\": \"substance_painter.project.NormalMapFormat\"\n        }}>{`NormalMapFormat`}</a></em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nNormal map system coordinates. OpenGL or DirectX format.`}</p>\n    <p>{`project_workflow`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ProjectWorkflow\",\n          \"title\": \"substance_painter.project.ProjectWorkflow\"\n        }}>{`ProjectWorkflow`}</a></em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nProject workflow, selected at project creation time.`}</p>\n    <p>{`tangent_space_mode`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.TangentSpace\",\n          \"title\": \"substance_painter.project.TangentSpace\"\n        }}>{`TangentSpace`}</a></em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nPer vertex or per fragment tangent space.`}</p>\n    <p>{`usd_settings`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.UsdSettings\",\n          \"title\": \"substance_painter.project.UsdSettings\"\n        }}>{`UsdSettings`}</a></em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nSpecific settings for USD files.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.UsdSettings(`}<em parentName=\"p\">{`scope_name: str = '/'`}</em>{`, `}<em parentName=\"p\">{`variants: dict | None = None`}</em>{`, `}<em parentName=\"p\">{`subdivision_level: int = 1`}</em>{`, `}<em parentName=\"p\">{`frame: int = 0`}</em>{`)\nSpecific settings for USD files.`}</p>\n    <p>{`This corresponds to the options that are available in the File type-specific settings section\nin the “New project” and “Project configuration” dialogs.`}</p>\n    <p>{`frame`}<em parentName=\"p\">{`: int`}</em>{` `}<em parentName=\"p\">{`= 0`}</em>{`\nThe frame to import.\nOnly available for animated USD files.`}</p>\n    <p>{`scope_name`}<em parentName=\"p\">{`: str`}</em>{` `}<em parentName=\"p\">{`= '/'`}</em>{`\nScope name of the primitive to load in the hierarchy. The path must be absolute.\nExpected syntax: `}<inlineCode parentName=\"p\">{`\"/my/path/name\"`}</inlineCode></p>\n    <p>{`If not specified, default scope name is the root `}<inlineCode parentName=\"p\">{`\"/\"`}</inlineCode>{`. Only available for USD files.`}</p>\n    <p>{`subdivision_level`}<em parentName=\"p\">{`: int`}</em>{` `}<em parentName=\"p\">{`= 1`}</em>{`\nThe subdivision level is applied only on geometry built with subdivision.\nOnly available for USD files.`}</p>\n    <p>{`variants`}<em parentName=\"p\">{`: dict`}</em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nDefine which variant to use for each primitive path. Values are expected in JSON format.`}</p>\n    <blockquote>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-python\"\n        }}>{`[\n    {\n        \"primPath\": \"/my/path/name\",\n        \"selectionName: \"variantName\",\n        \"setName\": \"variantSetName\"\n    }\n]\n\n`}</code></pre>\n    </blockquote>\n    <p>{`Only available for USD files.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.NormalMapFormat(`}<em parentName=\"p\">{`value`}</em>{`)\nThe normal map formats that can be used by a Substance 3D Painter project.\nA project can have either left handed / OpenGL or right handed / DirectX\nnormal maps.`}</p>\n    <p>{`This corresponds to the menu “Normal Map Format” in the “New project”\ndialog.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`OpenGL`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`OpenGL tangent space (right handed).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`DirectX`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DirectX tangent space (left handed).`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.TangentSpace(`}<em parentName=\"p\">{`value`}</em>{`)\nThe options for computing tangent space in a project. Tangent space can\nbe evaluated at each vertex, or at each fragment.`}</p>\n    <p>{`This corresponds to the “Compute Tangent Space Per Fragment” checkbox in\nthe “New project” dialog.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`PerVertex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tangent space computed per vertex.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`PerFragment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tangent space computed per fragment.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.ProjectWorkflow(`}<em parentName=\"p\">{`value`}</em>{`)\nThe workflow used by a Substance 3D Painter project.`}</p>\n    <p>{`By enabling the UV Tiles Workflow for each Texture Set, tiles within the\nsame Texture Set share a layer stack and can be painted across. By creating\na Texture Set per UV Tile, each tile is placed in a Texture Set of its own.\nThis is the legacy workflow and does not allow for painting accross tiles.`}</p>\n    <p>{`This corresponds to the section “UV Tiles (UDIMs)” in the “New project”\ndialog.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Default`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default workflow (no udim).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`TextureSetPerUVTile`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Udim workflow with one Texture Set per UV Tile (legacy).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`UVTile`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Udim workflow with one Texture Set per material containing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`multiple UV Tiles.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"opening-and-closing-a-project\"\n    }}>{`Opening and closing a project`}</h2>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.project\n\n# Check if a project is already opened:\nif substance_painter.project.is_open():\n    print(\"A project is already opened!\")\nelse:\n    # Open an existing project:\n    substance_painter.project.open(\"c:/Documents/project.spp\")\n\nif substance_painter.project.is_open():\n    # Close the project currently opened:\n    substance_painter.project.close()\n\n`}</code></pre>\n    <p>{`substance_painter.project.is_open() → bool\nCheck if a project is already opened.`}</p>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if a project is opened, `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n        \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n      }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</p>\n    <p>{`substance_painter.project.open(`}<em parentName=\"p\">{`project_file_path: str`}</em>{`) → None\nOpen the project located at `}<inlineCode parentName=\"p\">{`project_file_path`}</inlineCode>{`.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`project_file_path`}</strong>{` (`}<em parentName=\"p\">{`str`}</em>{`) – The path to the project file (with the extension `}<inlineCode parentName=\"p\">{`.spp`}</inlineCode>{`).`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot open the file `}<inlineCode parentName=\"li\">{`project_file_path`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If there is already an opened project.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`substance_painter.project.close() → None\nClose the current project.`}</p>\n    <p>{`Warning`}</p>\n    <p>{`Any unsaved data will be lost.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"saving-a-project\"\n    }}>{`Saving a project`}</h2>\n    <p>{`Saving a project is disabled when Substance 3D Painter is busy and will throw\na `}<a parentName=\"p\" {...{\n        \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.exception.ProjectError`}</inlineCode></a>{`.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.project\n\n# Check if a project is already opened:\nif not substance_painter.project.is_open():\n    print(\"No project is opened!\")\n\n# Check if the project needs to be saved at all:\nif not substance_painter.project.needs_saving():\n    print(\"There is nothing to save!\")\n\n# Save the project under the name \"project1\":\nsubstance_painter.project.save_as(\"c:/Documents/project1.spp\",\n                                  substance_painter.project.ProjectSaveMode.Full)\n# This should print \"c:/Documents/project1.spp\":\nprint(substance_painter.project.file_path())\n\n# Change the name of the project to \"project2\":\nsubstance_painter.project.save_as(\"c:/Documents/project2.spp\")\n# This should now print \"c:/Documents/project2.spp\":\nprint(substance_painter.project.file_path())\n\n# Create a backup copy of the project:\nsubstance_painter.project.save_as_copy(\"c:/Documents/project2-backup.spp\")\n# This should still print \"c:/Documents/project2.spp\":\nprint(substance_painter.project.file_path())\n\n# Save the project incrementally\n#(writing to project2.spp, and not project2-backup.spp):\nsubstance_painter.project.save(substance_painter.project.ProjectSaveMode.Incremental)\n\n# Create a template from the project:\nsubstance_painter.project.save_as_template(\n    \"c:/Documents/Adobe/Substance 3D Painter/assets/templates/template.spt\",\n    \"DefaultMaterial\")\n\n`}</code></pre>\n    <p>{`substance_painter.project.needs_saving() → bool\nCheck if the current project needs to be saved.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n    </ul>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the project has modifications and needs to be saved,\n`}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`substance_painter.project.save(`}<em parentName=\"p\">{`mode: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ProjectSaveMode\",\n          \"title\": \"substance_painter.project.ProjectSaveMode\"\n        }}>{`ProjectSaveMode`}</a>{` = ProjectSaveMode.Incremental`}</em>{`) → None\nSave the current project by overwriting the previous save.`}</p>\n    <p>{`Note`}</p>\n    <p>{`Save is disabled when Substance 3D Painter is busy and will throw a ProjectError.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`mode`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectSaveMode\",\n        \"title\": \"substance_painter.project.ProjectSaveMode\"\n      }}><em parentName=\"a\">{`ProjectSaveMode`}</em></a>{`) – The save mode (Incremental or Full).`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot save the project.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectSaveMode\",\n        \"title\": \"substance_painter.project.ProjectSaveMode\"\n      }}><inlineCode parentName=\"a\">{`ProjectSaveMode`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save_as\",\n        \"title\": \"substance_painter.project.save_as\"\n      }}><inlineCode parentName=\"a\">{`save_as()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save_as_copy\",\n        \"title\": \"substance_painter.project.save_as_copy\"\n      }}><inlineCode parentName=\"a\">{`save_as_copy()`}</inlineCode></a>{`.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.save_as(`}<em parentName=\"p\">{`project_file_path: str`}</em>{`, `}<em parentName=\"p\">{`mode: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ProjectSaveMode\",\n          \"title\": \"substance_painter.project.ProjectSaveMode\"\n        }}>{`ProjectSaveMode`}</a>{` = ProjectSaveMode.Incremental`}</em>{`) → None\nSave the current project by writing it to the file path `}<inlineCode parentName=\"p\">{`project_file_path`}</inlineCode>{`.`}</p>\n    <p>{`Note`}</p>\n    <p>{`If the path `}<inlineCode parentName=\"p\">{`project_file_path`}</inlineCode>{` doesn’t exist yet, new folders will be\ncreated as needed.\nSave is disabled when Substance 3D Painter is busy and will throw a ProjectError.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`project_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – The file path to save the project to.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`mode`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.ProjectSaveMode\",\n          \"title\": \"substance_painter.project.ProjectSaveMode\"\n        }}><em parentName=\"a\">{`ProjectSaveMode`}</em></a>{`) – The save mode (Incremental or Full).`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot save the project.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectSaveMode\",\n        \"title\": \"substance_painter.project.ProjectSaveMode\"\n      }}><inlineCode parentName=\"a\">{`ProjectSaveMode`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save\",\n        \"title\": \"substance_painter.project.save\"\n      }}><inlineCode parentName=\"a\">{`save()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save_as_copy\",\n        \"title\": \"substance_painter.project.save_as_copy\"\n      }}><inlineCode parentName=\"a\">{`save_as_copy()`}</inlineCode></a>{`.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.save_as_copy(`}<em parentName=\"p\">{`backup_file_path: str`}</em>{`, `}<em parentName=\"p\">{`mode: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ProjectSaveMode\",\n          \"title\": \"substance_painter.project.ProjectSaveMode\"\n        }}>{`ProjectSaveMode`}</a>{` = ProjectSaveMode.Incremental`}</em>{`) → None\nSave a copy of the current project by writing it to the file path\n`}<inlineCode parentName=\"p\">{`backup_file_path`}</inlineCode>{`. This can be used to save backups of the opened project\nwithout modifying the original file.`}</p>\n    <p>{`After save_as_copy the project is still considered to be located at the\nlocation it was previously saved to. If the project was not saved, it is\nstill considered to not have a saved location.`}</p>\n    <p>{`Note`}</p>\n    <p>{`If the path `}<inlineCode parentName=\"p\">{`backup_file_path`}</inlineCode>{` doesn’t exist yet, new folders will be\ncreated as needed.\nSave is disabled when Substance 3D Painter is busy and will throw a ProjectError.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`backup_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – The path to write the copy of the project to.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`mode`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.ProjectSaveMode\",\n          \"title\": \"substance_painter.project.ProjectSaveMode\"\n        }}><em parentName=\"a\">{`ProjectSaveMode`}</em></a>{`) – The save mode (Incremental or Full).`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot save the copy.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectSaveMode\",\n        \"title\": \"substance_painter.project.ProjectSaveMode\"\n      }}><inlineCode parentName=\"a\">{`ProjectSaveMode`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save\",\n        \"title\": \"substance_painter.project.save\"\n      }}><inlineCode parentName=\"a\">{`save()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.save_as\",\n        \"title\": \"substance_painter.project.save_as\"\n      }}><inlineCode parentName=\"a\">{`save_as()`}</inlineCode></a>{`.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`.`}</p>\n    <p>{`substance_painter.project.save_as_template(`}<em parentName=\"p\">{`template_file_path: str`}</em>{`, `}<em parentName=\"p\">{`texture_set_name: str`}</em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ProjectSaveMode\",\n        \"title\": \"substance_painter.project.ProjectSaveMode\"\n      }}>{`ProjectSaveMode`}</a>{`\nSave a template based of the current Texture Set or the one specified.`}</p>\n    <p>{`Note`}</p>\n    <p>{`New folders will be created if they are missing.\nSave is disabled when Substance 3D Painter is busy and will throw a ProjectError.`}</p>\n    <p>{`Warning`}</p>\n    <p>{`If the file already exists, it will be overwritten.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`template_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – The save path.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`texture_set_name`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – Name of the Texture Set used as a template.`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If Substance 3D Painter cannot save the template.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.ProjectSaveMode(`}<em parentName=\"p\">{`value`}</em>{`)\nSave strategy enumeration.`}</p>\n    <p>{`Members:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Full`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Save everything in a new file. Slow but creates the smallest possible file.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Incremental`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Save only new or modified data. Fast but the file size is not optimal.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"reloading-a-mesh\"\n    }}>{`Reloading a mesh`}</h2>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.project\n\n# Declare the settings for the new mesh loading:\nmesh_reloading_settings = substance_painter.project.MeshReloadingSettings(\n    import_cameras=True,\n    preserve_strokes=True)\n\n# Function that will be called when reloading is finished:\ndef on_mesh_reload(status: substance_painter.project.ReloadMeshStatus):\n    import substance_painter.project\n    if status == substance_painter.project.ReloadMeshStatus.SUCCESS:\n        print(\"The mesh was reloaded successfully.\")\n    else:\n        print(\"The mesh couldn't be reloaded.\")\n\n# Reload the current mesh:\nsubstance_painter.project.reload_mesh(\n    'c:/Documents/my_mesh.fbx',\n    mesh_reloading_settings,\n    on_mesh_reload)\n\n`}</code></pre>\n    <p>{`substance_painter.project.reload_mesh(`}<em parentName=\"p\">{`mesh_file_path: str`}</em>{`, `}<em parentName=\"p\">{`settings: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.MeshReloadingSettings\",\n          \"title\": \"substance_painter.project.MeshReloadingSettings\"\n        }}>{`MeshReloadingSettings`}</a></em>{`, `}<em parentName=\"p\">{`loading_status_cb: Callable[[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.ReloadMeshStatus\",\n          \"title\": \"substance_painter.project.ReloadMeshStatus\"\n        }}>{`ReloadMeshStatus`}</a>{`], Any]`}</em>{`)\nImport a new mesh to the current project, using the given settings.\nUses the automatic UV unwrapping settings defined at the project level.`}</p>\n    <p>{`The loading is asynchronous: this function returns immediately; when\nthe loading attempt is finished `}<inlineCode parentName=\"p\">{`loading_status_cb`}</inlineCode>{` is called with\nan argument indicating if loading was successful.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`mesh_file_path`}</strong>{` (`}<em parentName=\"li\">{`string`}</em>{`) – File path of the mesh to edit.\nSupported file formats: fbx, obj, dae, ply, usd.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`settings`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.MeshReloadingSettings\",\n          \"title\": \"substance_painter.project.MeshReloadingSettings\"\n        }}><em parentName=\"a\">{`MeshReloadingSettings`}</em></a>{`) – Configuration options for the mesh loading.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`loading_status_cb`}</strong>{` (`}<em parentName=\"li\">{`Callable`}<strong parentName=\"em\">{`[`}</strong>{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.project.ReloadMeshStatus\",\n          \"title\": \"substance_painter.project.ReloadMeshStatus\"\n        }}><em parentName=\"a\">{`ReloadMeshStatus`}</em></a><em parentName=\"li\">{`]**,`}</em>{` `}<em parentName=\"li\">{`Any**]`}</em>{`) – Loading status notification callback.`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened or Substance 3D Painter is busy.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.ReloadMeshStatus\",\n        \"title\": \"substance_painter.project.ReloadMeshStatus\"\n      }}><inlineCode parentName=\"a\">{`ReloadMeshStatus`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.MeshReloadingSettings\",\n        \"title\": \"substance_painter.project.MeshReloadingSettings\"\n      }}><inlineCode parentName=\"a\">{`MeshReloadingSettings`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`is_busy()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-project-creation\"\n      }}>{`Project creation documentation`}</a>{`.`}</p>\n    <p>{`substance_painter.project.last_imported_mesh_path() → str\nReturn the path to the last imported mesh.`}</p>\n    <p>{`Returns:\nThe file path of the mesh that was last imported to the project.`}</p>\n    <p>{`Return type:\nstr`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n    </ul>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.MeshReloadingSettings(`}<em parentName=\"p\">{`import_cameras: bool = True`}</em>{`, `}<em parentName=\"p\">{`preserve_strokes: bool = True`}</em>{`, `}<em parentName=\"p\">{`usd_settings: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.UsdSettings\",\n          \"title\": \"substance_painter.project.UsdSettings\"\n        }}>{`UsdSettings`}</a>{` | None = None`}</em>{`)\nSettings used when reloading a mesh.`}</p>\n    <p>{`This corresponds to the mesh related options that are available in the\n“Project configuration” dialog.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.reload_mesh\",\n        \"title\": \"substance_painter.project.reload_mesh\"\n      }}><inlineCode parentName=\"a\">{`reload_mesh()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-project-configuration\"\n      }}>{`Project configuration documentation`}</a>{`.`}</p>\n    <p>{`import_cameras`}<em parentName=\"p\">{`: bool`}</em>{` `}<em parentName=\"p\">{`= True`}</em>{`\nImport cameras from the mesh file.`}</p>\n    <p>{`preserve_strokes`}<em parentName=\"p\">{`: bool`}</em>{` `}<em parentName=\"p\">{`= True`}</em>{`\nPreserve strokes positions on mesh.`}</p>\n    <p>{`usd_settings`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.project.UsdSettings\",\n          \"title\": \"substance_painter.project.UsdSettings\"\n        }}>{`UsdSettings`}</a></em>{` `}<em parentName=\"p\">{`= None`}</em>{`\nSpecific settings for USD files.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.project.ReloadMeshStatus(`}<em parentName=\"p\">{`value`}</em>{`)\nReload mesh status, used in mesh reload asynchronous callback.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.project.reload_mesh\",\n        \"title\": \"substance_painter.project.reload_mesh\"\n      }}><inlineCode parentName=\"a\">{`reload_mesh()`}</inlineCode></a>{`,`}</p>\n    <p>{`ERROR `}<em parentName=\"p\">{`= 2`}</em>{`\nMesh reload failed, see application log for details.`}</p>\n    <p>{`SUCCESS `}<em parentName=\"p\">{`= 0`}</em>{`\nMesh reload was successful.`}</p>\n    <h2 {...{\n      \"id\": \"project-metadata\"\n    }}>{`Project metadata`}</h2>\n    <blockquote>\n    </blockquote>\n    <hr></hr>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`class`}</em>{` substance_painter.project.Metadata(`}<em parentName=\"p\">{`context: str`}</em>{`)\nProject metadata are arbitrary data that can be attached to a Substance\nPainter project. When the project is saved, the metadata are saved with it,\nso it is still available the next time the project is loaded.`}</p>\n      <p parentName=\"blockquote\">{`Metadata can only be accessed when a project is opened. If no project is\nopened, the methods will raise an exception.`}</p>\n      <p parentName=\"blockquote\">{`The constructor of the class `}<inlineCode parentName=\"p\">{`Metadata`}</inlineCode>{` takes a context name as an\nargument. This context name can be for example the name of your plugin. It\nshould be unique, to avoid conflict with other plugins.`}</p>\n      <p parentName=\"blockquote\">{`Example`}</p>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-python\"\n        }}>{`import substance_painter\n\n# Instantiate the Metadata utility, for the plugin \"MyPlugin\".\nmetadata = substance_painter.project.Metadata(\"MyPlugin\")\n\n# Store a version number under the key \"version\".\nplugin_version = { \"major\": 1, \"minor\": 0 }\nmetadata.set(\"version\", plugin_version)\n\n# List the project's metadata keys. The key \"version\" is now present.\nkeys = metadata.list()\nprint(keys)\n\n# Retrieve the metadata \"version\".\nplugin_version = metadata.get(\"version\")\nprint(\"Version: \" + str(plugin_version))\n\n`}</code></pre>\n      <p parentName=\"blockquote\">{`list() → list\nReturn the list of project metadata keys.`}</p>\n      <p parentName=\"blockquote\">{`Raises:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n            \"title\": \"substance_painter.exception.ProjectError\"\n          }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n            \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n          }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`get(`}<em parentName=\"p\">{`key: str`}</em>{`)\nRetrieve the project metadata under the given key.`}</p>\n      <p parentName=\"blockquote\">{`The supported data types are:* Primitive types: bool, int, float, str.`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`list`}\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Items can be any of the supported data types.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">{`dict`}\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Keys must be of type str.`}</li>\n            <li parentName=\"ul\">{`Values can be any of the supported data types.`}</li>\n          </ul>\n        </li>\n      </ul>\n      <p parentName=\"blockquote\">{`Parameters:\n`}<strong parentName=\"p\">{`key`}</strong>{` (`}<em parentName=\"p\">{`str`}</em>{`) – The key identifying the metadata to retrieve.`}</p>\n      <p parentName=\"blockquote\">{`Raises:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n            \"title\": \"substance_painter.exception.ProjectError\"\n          }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`RuntimeError`}</strong>{` – If the metadata under `}<inlineCode parentName=\"li\">{`key`}</inlineCode>{` use a type that is not supported.`}</li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n            \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n          }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`set(`}<em parentName=\"p\">{`key: str`}</em>{`, `}<em parentName=\"p\">{`value`}</em>{`)\nStore project metadata under the given key.`}</p>\n      <p parentName=\"blockquote\">{`The supported data types are:* Primitive types: bool, int, float, str.`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`list`}\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Items can be any of the supported data types.`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\">{`dict`}\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Keys must be of type str.`}</li>\n            <li parentName=\"ul\">{`Values can be any of the supported data types.`}</li>\n          </ul>\n        </li>\n      </ul>\n      <p parentName=\"blockquote\">{`Parameters:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><strong parentName=\"li\">{`key`}</strong>{` (`}<em parentName=\"li\">{`str`}</em>{`) – The key identifying the metadata to store.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`value`}</strong>{` – The metadata to store.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`Raises:`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ProjectError\",\n            \"title\": \"substance_painter.exception.ProjectError\"\n          }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`RuntimeError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` uses a type that is not supported.`}</li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"exception.html#substance_painter.exception.ServiceNotFoundError\",\n            \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n          }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      </ul>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`Project related operations, whether they are initiated through the Python API\nor in the UI, can trigger the following events.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"event.html#module-substance_painter.event\",\n        \"title\": \"substance_painter.event\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.event`}</inlineCode></a>{` for more details.`}</p>\n    <p>{`Note`}</p>\n    <p>{`Project loading is done asynchronously. When the event `}<inlineCode parentName=\"p\">{`ProjectOpened`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`ProjectCreated`}</inlineCode>{` is triggered, the project may still be loading. The event\n`}<inlineCode parentName=\"p\">{`ProjectEditionEntered`}</inlineCode>{` is triggered when the project is ready to work with.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectOpened\nEvent triggered when an existing project has been opened.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectCreated\nEvent triggered when a new project has been created.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectAboutToClose\nEvent triggered just before closing the current project.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectAboutToSave(`}<em parentName=\"p\">{`file_path: str`}</em>{`)\nEvent triggered just before saving the current project.`}</p>\n    <p>{`file_path`}<em parentName=\"p\">{`: str`}</em>{`\nThe destination file.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectSaved\nEvent triggered once the current project is saved.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectEditionEntered\nEvent triggered when the project is fully loaded and ready to work with.`}</p>\n    <p>{`When edition is entered, it is for example possible to query/edit the project\nproperties, to bake textures or do project export.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectEditionLeft\nEvent triggered when the current project can non longer be edited.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}