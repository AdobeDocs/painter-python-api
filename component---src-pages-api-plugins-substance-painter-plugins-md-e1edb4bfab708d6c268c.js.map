{"version":3,"file":"component---src-pages-api-plugins-substance-painter-plugins-md-e1edb4bfab708d6c268c.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/plugins/substance_painter_plugins.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`substance_painter_plugins module — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"substance_painter_plugins-module\"\n    }}>{`substance_painter_plugins module`}</h1>\n    <p>{`This module allows to manage the Substance 3D Painter Plugins: listing existing\nPlugins, loading or unloading a given Plugin, etc.`}</p>\n    <p>{`A Substance 3D Painter Plugin is a standard Python module, placed in a path added\nto `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.path\",\n        \"title\": \"substance_painter_plugins.path\"\n      }}><inlineCode parentName=\"a\">{`substance_painter_plugins.path`}</inlineCode></a>{`, which can use the Substance 3D Painter\nPython API to do certain tasks.`}</p>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import importlib\nimport substance_painter_plugins\n\n# Get the list of available Plugin names:\nall_plugins_names = substance_painter_plugins.plugin_module_names()\nfor name in all_plugins_names:\n    print(name)\n\n# Load the \"hello world\" Plugin:\nplugin = importlib.import_module(\"hello_plugin\")\n\n# Start the Plugin if it wasn't already:\nif not substance_painter_plugins.is_plugin_started(plugin):\n    substance_painter_plugins.start_plugin(plugin)\n\n`}</code></pre>\n    <p>{`substance_painter_plugins.path `}<em parentName=\"p\">{`= []`}</em>{`\nA list of strings that specifies the search path for plugins.\nInitialized from `}<inlineCode parentName=\"p\">{`SUBSTANCE_PAINTER_PLUGINS_PATH`}</inlineCode>{` environment variable, Substance 3D Painter\ninstallation directory and Substance 3D Painter user resources directory.`}</p>\n    <p>{`You need to call explicitly `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.update_sys_path\",\n        \"title\": \"substance_painter_plugins.update_sys_path\"\n      }}><inlineCode parentName=\"a\">{`substance_painter_plugins.update_sys_path`}</inlineCode></a>{` after updating this\nvariable.`}</p>\n    <p>{`A plugins directory is expected to contain three subdirectories, automatically added to\n`}<inlineCode parentName=\"p\">{`sys.path`}</inlineCode>{`:`}</p>\n    <blockquote>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\"><strong parentName=\"li\">{`plugins`}</strong>{` : Modules that are loaded as optional components.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`startup`}</strong>{` : Modules that are always loaded at application startup.`}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`modules`}</strong>{` : Utility modules, shared across plugins.`}</li>\n      </ul>\n    </blockquote>\n    <p>{`Modules in `}<inlineCode parentName=\"p\">{`plugins/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`startup/`}</inlineCode>{` directories are expected to have a `}<inlineCode parentName=\"p\">{`start_plugin()`}</inlineCode>{` and\na `}<inlineCode parentName=\"p\">{`close_plugin()`}</inlineCode>{` methods, respectively called after loading the module and before unloading it.\nModules added in `}<inlineCode parentName=\"p\">{`plugins/`}</inlineCode>{` directory take precedence over modules added in `}<inlineCode parentName=\"p\">{`startup/`}</inlineCode>{`\ndirectory.`}</p>\n    <p>{`Type:\nlist`}</p>\n    <p>{`substance_painter_plugins.plugins `}<em parentName=\"p\">{`= {}`}</em>{`\nCurrently started plugins.`}</p>\n    <p>{`Type:\ndict`}</p>\n    <p>{`substance_painter_plugins.start_plugin(`}<em parentName=\"p\">{`module`}</em>{`)\nStart the given Substance 3D Painter plugin.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`module`}</strong>{` – A Python module that is expected to have a `}<inlineCode parentName=\"p\">{`start_plugin`}</inlineCode>{` method.`}</p>\n    <p>{`substance_painter_plugins.close_plugin(`}<em parentName=\"p\">{`module`}</em>{`, `}<em parentName=\"p\">{`gc_collect=True`}</em>{`)\nClose the given Substance 3D Painter plugin.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`module`}</strong>{` – A Python module that is expected to have a `}<inlineCode parentName=\"li\">{`close_plugin`}</inlineCode>{` method.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`gc_collect`}</strong>{` – Run a full garbage collection if set to True.`}</li>\n    </ul>\n    <p>{`substance_painter_plugins.is_plugin_started(`}<em parentName=\"p\">{`module`}</em>{`)\nCheck if the given plugin is currently started.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`module`}</strong>{` – A Python module.`}</p>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the given module is currently started, `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`substance_painter_plugins.reload_plugin(`}<em parentName=\"p\">{`module`}</em>{`)\nReload a plugin and start it.`}</p>\n    <p>{`Read `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.python.org/3/library/importlib.html#importlib.reload\"\n      }}>{`importlib.reload(module) documentation`}</a>{` for possible caveats. See `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.start_plugin\",\n        \"title\": \"substance_painter_plugins.start_plugin\"\n      }}><inlineCode parentName=\"a\">{`start_plugin()`}</inlineCode></a>{`\nand `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.close_plugin\",\n        \"title\": \"substance_painter_plugins.close_plugin\"\n      }}><inlineCode parentName=\"a\">{`close_plugin()`}</inlineCode></a>{` for details about starting and closing a plugin. If the plugin has\na `}<inlineCode parentName=\"p\">{`reload_plugin`}</inlineCode>{` method, it will be executed after closing and before restarting the plugin.\nThe purpose of `}<inlineCode parentName=\"p\">{`reload_plugin`}</inlineCode>{` method is to reload manually all sub-modules the plugin\ndepends on (in case the plugin is a Python package for example).`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`module`}</strong>{` – A Python module.`}</p>\n    <p>{`Returns:\nThe reloaded plugin module.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.start_plugin\",\n        \"title\": \"substance_painter_plugins.start_plugin\"\n      }}><inlineCode parentName=\"a\">{`start_plugin()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.close_plugin\",\n        \"title\": \"substance_painter_plugins.close_plugin\"\n      }}><inlineCode parentName=\"a\">{`close_plugin()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.python.org/3/library/importlib.html#importlib.reload\"\n      }}>{`importlib.reload(module) documentation`}</a>{`.`}</p>\n    <p>{`substance_painter_plugins.startup_module_names()\nList the names of the available `}<em parentName=\"p\">{`startup`}</em>{` modules.`}</p>\n    <p>{`Returns:\nThe names of all the available `}<em parentName=\"p\">{`startup`}</em>{` modules.`}</p>\n    <p>{`Return type:\nlist`}{`[str]`}</p>\n    <p>{`substance_painter_plugins.plugin_module_names()\nList the names of the available `}<em parentName=\"p\">{`plugins`}</em>{` modules.`}</p>\n    <p>{`Returns:\nThe names of all the available `}<em parentName=\"p\">{`plugins`}</em>{` modules.`}</p>\n    <p>{`Return type:\nlist`}{`[str]`}</p>\n    <p>{`substance_painter_plugins.load_startup_modules()\nLoad all startup modules.`}</p>\n    <p>{`substance_painter_plugins.close_all_plugins()\nClose all started plugins.`}</p>\n    <p>{`substance_painter_plugins.update_sys_path()\nUpdate `}<inlineCode parentName=\"p\">{`sys.path`}</inlineCode>{` according to `}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter_plugins.path\",\n        \"title\": \"substance_painter_plugins.path\"\n      }}><inlineCode parentName=\"a\">{`substance_painter_plugins.path`}</inlineCode></a>{` and\n`}<inlineCode parentName=\"p\">{`SUBSTANCE_PAINTER_PLUGINS_PATH`}</inlineCode>{` environment variable.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}