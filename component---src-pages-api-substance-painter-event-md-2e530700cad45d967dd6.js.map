{"version":3,"file":"component---src-pages-api-substance-painter-event-md-2e530700cad45d967dd6.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/event.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`event module — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"event-module\"\n    }}>{`event module`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` module defines application events and allows to subscribe to\nnotifications.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.Event\nBase event class.`}</p>\n    <h2 {...{\n      \"id\": \"event-dispatcher\"\n    }}>{`Event dispatcher`}</h2>\n    <p>{`substance_painter.event.DISPATCHER `}<em parentName=\"p\">{`= <substance_painter.event.Dispatcher object>`}</em>{`\nThe event dispatcher instance that will be used by the application.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.Dispatcher\nThe Event Dispatcher.`}</p>\n    <p>{`connect(`}<em parentName=\"p\">{`event_cls: Type[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`]`}</em>{`, `}<em parentName=\"p\">{`callback: Callable[[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`], Any]`}</em>{`) → None\nConnect a callback to handle the given event type.`}</p>\n    <p>{`The callback is stored as a weak reference, it is automatically disconnected\nonce the callback gets garbage collected.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`event_cls`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"resource.html#substance_painter.resource.Type\",\n          \"title\": \"substance_painter.resource.Type\"\n        }}><em parentName=\"a\">{`Type`}</em></a><em parentName=\"li\">{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]`}</em>{`) – An event class.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`callback`}</strong>{` (`}<em parentName=\"li\">{`Callable`}<strong parentName=\"em\">{`[`}</strong>{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]**,`}</em>{` `}<em parentName=\"li\">{`Any**]`}</em>{`) – A method or a bound method that will be called when\nan instance of the given event class is triggered.`}</li>\n    </ul>\n    <p>{`connect_strong(`}<em parentName=\"p\">{`event_cls: Type[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`]`}</em>{`, `}<em parentName=\"p\">{`callback: Callable[[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`], Any]`}</em>{`) → None\nConnect a callback to handle the given event type.`}</p>\n    <p>{`The callback is stored as a strong reference, it is never automatically disconnected.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`event_cls`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"resource.html#substance_painter.resource.Type\",\n          \"title\": \"substance_painter.resource.Type\"\n        }}><em parentName=\"a\">{`Type`}</em></a><em parentName=\"li\">{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]`}</em>{`) – An event class.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`callback`}</strong>{` (`}<em parentName=\"li\">{`Callable`}<strong parentName=\"em\">{`[`}</strong>{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]**,`}</em>{` `}<em parentName=\"li\">{`Any**]`}</em>{`) – A method or a bound method that will be called when\nan instance of the given event class is triggered.`}</li>\n    </ul>\n    <p>{`disconnect(`}<em parentName=\"p\">{`event_cls: Type[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`]`}</em>{`, `}<em parentName=\"p\">{`callback: Callable[[`}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}>{`Event`}</a>{`], Any]`}</em>{`) → None\nDisconnect a previously connected callback.`}</p>\n    <p>{`This method can be called to explicitly disconnect a callback.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`event_cls`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"resource.html#substance_painter.resource.Type\",\n          \"title\": \"substance_painter.resource.Type\"\n        }}><em parentName=\"a\">{`Type`}</em></a><em parentName=\"li\">{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]`}</em>{`) – An event class.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`callback`}</strong>{` (`}<em parentName=\"li\">{`Callable`}<strong parentName=\"em\">{`[`}</strong>{`[`}</em><a parentName=\"li\" {...{\n          \"href\": \"#substance_painter.event.Event\",\n          \"title\": \"substance_painter.event.Event\"\n        }}><em parentName=\"a\">{`Event`}</em></a><em parentName=\"li\">{`]**,`}</em>{` `}<em parentName=\"li\">{`Any**]`}</em>{`) – A method or a bound method that has been connected\nto the given event class.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"export-events\"\n    }}>{`Export events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ExportTexturesAboutToStart(`}<em parentName=\"p\">{`textures: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`)\nEvent triggered just before a textures export.`}</p>\n    <p>{`textures`}<em parentName=\"p\">{`: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`\nList of texture files\nto be written to disk, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Type:\nDict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ExportTexturesEnded(`}<em parentName=\"p\">{`status: `}<a parentName=\"em\" {...{\n          \"href\": \"export.html#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`, `}<em parentName=\"p\">{`message: str`}</em>{`, `}<em parentName=\"p\">{`textures: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`)\nEvent triggered after textures export is finished.`}</p>\n    <p>{`message`}<em parentName=\"p\">{`: str`}</em>{`\nHuman readable status message.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <p>{`status`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"export.html#substance_painter.export.ExportStatus\",\n          \"title\": \"substance_painter.export.ExportStatus\"\n        }}>{`ExportStatus`}</a></em>{`\nStatus code.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"export.html#substance_painter.export.ExportStatus\",\n        \"title\": \"substance_painter.export.ExportStatus\"\n      }}>{`ExportStatus`}</a></p>\n    <p>{`textures`}<em parentName=\"p\">{`: Dict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</em>{`\nList of texture files\nwritten to disk, grouped by stack (Texture Set name, stack name).`}</p>\n    <p>{`Type:\nDict[Tuple`}{`[str, str]`}{`, List`}{`[str]`}{`]`}</p>\n    <h2 {...{\n      \"id\": \"project-events\"\n    }}>{`Project events`}</h2>\n    <p>{`Note`}</p>\n    <p>{`Project loading is done asynchronously. When the event `}<inlineCode parentName=\"p\">{`ProjectOpened`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`ProjectCreated`}</inlineCode>{` is triggered, the project may still be loading. The event\n`}<inlineCode parentName=\"p\">{`ProjectEditionEntered`}</inlineCode>{` is triggered when the project is ready to work with.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectOpened\nEvent triggered when an existing project has been opened.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectCreated\nEvent triggered when a new project has been created.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectAboutToClose\nEvent triggered just before closing the current project.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectAboutToSave(`}<em parentName=\"p\">{`file_path: str`}</em>{`)\nEvent triggered just before saving the current project.`}</p>\n    <p>{`file_path`}<em parentName=\"p\">{`: str`}</em>{`\nThe destination file.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectSaved\nEvent triggered once the current project is saved.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectEditionEntered\nEvent triggered when the project is fully loaded and ready to work with.`}</p>\n    <p>{`When edition is entered, it is for example possible to query/edit the project\nproperties, to bake textures or do project export.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ProjectEditionLeft\nEvent triggered when the current project can non longer be edited.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.BusyStatusChanged(`}<em parentName=\"p\">{`busy: bool`}</em>{`)\nEvent triggered when Substance 3D Painter busy state changed.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"project.html#substance_painter.project.execute_when_not_busy\",\n        \"title\": \"substance_painter.project.execute_when_not_busy\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.project.execute_when_not_busy()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"project.html#substance_painter.project.is_busy\",\n        \"title\": \"substance_painter.project.is_busy\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.project.is_busy()`}</inlineCode></a>{`.`}</p>\n    <p>{`busy`}<em parentName=\"p\">{`: bool`}</em>{`\nWhether Substance 3D Painter is busy now.`}</p>\n    <p>{`Type:\nbool`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.TextureStateEvent(`}<em parentName=\"p\">{`action: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.TextureStateEventAction\",\n          \"title\": \"substance_painter.event.TextureStateEventAction\"\n        }}>{`TextureStateEventAction`}</a></em>{`, `}<em parentName=\"p\">{`stack_id: int`}</em>{`, `}<em parentName=\"p\">{`tile_indices: Tuple`}{`[int, int]`}</em>{`, `}<em parentName=\"p\">{`channel_type: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}>{`ChannelType`}</a></em>{`, `}<em parentName=\"p\">{`cache_key: int`}</em>{`)\nEvent triggered when a document texture is added, removed or updated.`}</p>\n    <p>{`action`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"#substance_painter.event.TextureStateEventAction\",\n          \"title\": \"substance_painter.event.TextureStateEventAction\"\n        }}>{`TextureStateEventAction`}</a></em>{`\nPerformed action (add, remove, update).`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.event.TextureStateEventAction\",\n        \"title\": \"substance_painter.event.TextureStateEventAction\"\n      }}>{`TextureStateEventAction`}</a></p>\n    <p>{`cache_key`}<em parentName=\"p\">{`: int`}</em>{`\nThe texture current cache key. Those cache keys are persistent across sessions.`}</p>\n    <p>{`Type:\nint`}</p>\n    <p><em parentName=\"p\">{`static`}</em>{` cache_key_invalidation_throttling_period() → timedelta\nGet the minimum duration between two texture update events (for a given texture).`}</p>\n    <p>{`Returns:\nThe minimum duration between two update events.`}</p>\n    <p>{`Return type:\ndatetime.timedelta`}</p>\n    <p>{`channel_type`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"textureset/index.html#substance_painter.textureset.ChannelType\",\n          \"title\": \"substance_painter.textureset.ChannelType\"\n        }}>{`ChannelType`}</a></em>{`\nThe document channel type.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/index.html#substance_painter.textureset.ChannelType\",\n        \"title\": \"substance_painter.textureset.ChannelType\"\n      }}>{`substance_painter.textureset.ChannelType`}</a></p>\n    <p><em parentName=\"p\">{`static`}</em>{` set_cache_key_invalidation_throttling_period(`}<em parentName=\"p\">{`period: timedelta`}</em>{`) → None\nSet the minimum duration between two texture update events (for a given texture).`}</p>\n    <p>{`Warning: this setting is global and every work made in a callback associated to this event\nmay greatly hurt the painting experience.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`period`}</strong>{` (`}<em parentName=\"p\">{`datetime.timedelta`}</em>{`) – The minimum duration between two update events, can’t\nbe lower than 500ms.`}</p>\n    <p>{`Raises:\n`}<strong parentName=\"p\">{`ValueError`}</strong>{` – If period is below 500ms.`}</p>\n    <p>{`stack_id`}<em parentName=\"p\">{`: int`}</em>{`\nThe stack the texture bellongs to, can be used to create a\n`}<a parentName=\"p\" {...{\n        \"href\": \"textureset/stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.textureset.Stack`}</inlineCode></a>{` instance.`}</p>\n    <p>{`Type:\nint`}</p>\n    <p>{`tile_indices`}<em parentName=\"p\">{`: Tuple`}{`[int, int]`}</em>{`\nThe uv tile indices.`}</p>\n    <p>{`Type:\nTuple`}{`[int, int]`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.TextureStateEventAction(`}<em parentName=\"p\">{`value`}</em>{`)\nThe TextureStateEvent possible actions.`}</p>\n    <p>{`Members:`}</p>\n    <p><inlineCode parentName=\"p\">{`ADD`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`REMOVE`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"shelf-events\"\n    }}>{`Shelf events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ShelfCrawlingStarted(`}<em parentName=\"p\">{`shelf_name: str`}</em>{`)\nEvent triggered when a shelf starts reading the file system to discover\nnew resources.`}</p>\n    <p>{`See also`}</p>\n    <p><inlineCode parentName=\"p\">{`Shelf.is_crawling()`}</inlineCode>{`.`}</p>\n    <p>{`shelf_name`}<em parentName=\"p\">{`: str`}</em>{`\nName of the shelf discovering resources.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.ShelfCrawlingEnded(`}<em parentName=\"p\">{`shelf_name: str`}</em>{`)\nEvent triggered when a shelf has finished discovering new resources and\nloading their thumbnails.`}</p>\n    <p>{`See also`}</p>\n    <p><inlineCode parentName=\"p\">{`Shelf.is_crawling()`}</inlineCode>{`.`}</p>\n    <p>{`shelf_name`}<em parentName=\"p\">{`: str`}</em>{`\nName of the shelf that has finished discovering resources.`}</p>\n    <p>{`Type:\nstr`}</p>\n    <h2 {...{\n      \"id\": \"baking-events\"\n    }}>{`Baking events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.BakingProcessAboutToStart(`}<em parentName=\"p\">{`stop_source: `}<a parentName=\"em\" {...{\n          \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n          \"title\": \"substance_painter.async_utils.StopSource\"\n        }}>{`StopSource`}</a></em>{`)\nEvent triggered when a baking is about to start.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_async\",\n        \"title\": \"substance_painter.baking.bake_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_async()`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_selected_textures_async\",\n        \"title\": \"substance_painter.baking.bake_selected_textures_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_selected_textures_async()`}</inlineCode></a></p>\n    <p>{`stop_source`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n          \"title\": \"substance_painter.async_utils.StopSource\"\n        }}>{`StopSource`}</a></em>{`\nThe baking stop source, can be compared with the StopSource\nreturned from the baking launch methods to identify the baking process.`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"async_utils.html#substance_painter.async_utils.StopSource\",\n        \"title\": \"substance_painter.async_utils.StopSource\"\n      }}>{`StopSource`}</a></p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.BakingProcessProgress(`}<em parentName=\"p\">{`progress: float`}</em>{`)\nEvent triggered when baking process progress changes.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_async\",\n        \"title\": \"substance_painter.baking.bake_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_async()`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_selected_textures_async\",\n        \"title\": \"substance_painter.baking.bake_selected_textures_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_selected_textures_async()`}</inlineCode></a></p>\n    <p>{`progress`}<em parentName=\"p\">{`: float`}</em>{`\nThe baking progress, between `}{`[0.0, 1.0]`}{`.`}</p>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.BakingProcessEnded(`}<em parentName=\"p\">{`status: `}<a parentName=\"em\" {...{\n          \"href\": \"baking.html#substance_painter.baking.BakingStatus\",\n          \"title\": \"substance_painter.baking.BakingStatus\"\n        }}>{`BakingStatus`}</a></em>{`)\nEvent triggered after baking is finished.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_async\",\n        \"title\": \"substance_painter.baking.bake_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_async()`}</inlineCode></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.bake_selected_textures_async\",\n        \"title\": \"substance_painter.baking.bake_selected_textures_async\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.baking.bake_selected_textures_async()`}</inlineCode></a></p>\n    <p>{`status`}<em parentName=\"p\">{`: `}<a parentName=\"em\" {...{\n          \"href\": \"baking.html#substance_painter.baking.BakingStatus\",\n          \"title\": \"substance_painter.baking.BakingStatus\"\n        }}>{`BakingStatus`}</a></em>{`\nStatus of the baking process`}</p>\n    <p>{`Type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"baking.html#substance_painter.baking.BakingStatus\",\n        \"title\": \"substance_painter.baking.BakingStatus\"\n      }}>{`BakingStatus`}</a></p>\n    <h2 {...{\n      \"id\": \"layer-stack-events\"\n    }}>{`Layer stack events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.LayerStacksModelDataChanged\nEvent triggered whenever the status of the Layer Stacks changes.`}</p>\n    <p>{`See also`}</p>\n    <p><inlineCode parentName=\"p\">{`substance_painter.layerstack`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"application-wide-events\"\n    }}>{`Application wide events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.EngineComputationsStatusChanged(`}<em parentName=\"p\">{`engine_computations_enabled: bool`}</em>{`)\nEvent triggered whenever the status of the engine computations changes.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"application.html#substance_painter.application.engine_computations_status\",\n        \"title\": \"substance_painter.application.engine_computations_status\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.application.engine_computations_status()`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"display-events\"\n    }}>{`Display events`}</h2>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.event.CameraPropertiesChanged(`}<em parentName=\"p\">{`camera_id: int`}</em>{`)\nEvent triggered when the camera properties change.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"display.html#substance_painter.display.Camera\",\n        \"title\": \"substance_painter.display.Camera\"\n      }}><inlineCode parentName=\"a\">{`substance_painter.display.Camera`}</inlineCode></a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}