{"version":3,"file":"component---src-pages-api-substance-painter-textureset-textureset-md-4305532436c54018c8c3.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/substance_painter/textureset/textureset.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-python-api/painter-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`TextureSet class — Substance 3D Painter Python API 0.2.11 documentation`}</p>\n    <h1 {...{\n      \"id\": \"textureset-class\"\n    }}>{`TextureSet class`}</h1>\n    <hr></hr>\n    <p><em parentName=\"p\">{`class`}</em>{` substance_painter.textureset.TextureSet(`}<em parentName=\"p\">{`material_id: int`}</em>{`)\nA Substance 3D Painter Texture Set. A Texture Set has a resolution and a\nnumber of stacks, and can be layered or not.\nIt optionally also has a number of UV Tiles.`}</p>\n    <p>{`It uses a set of baked Mesh map textures. Each Mesh map has a defined MeshMapUsage.`}</p>\n    <p>{`If the corresponding material is not layered, the Texture Set has just one\nstack, which is transparent to the user. If the material is layered, the\nTexture Set has several stacks.`}</p>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import substance_painter.textureset\n\n# Get the Texture Set \"TextureSetName\":\nmy_texture_set = substance_painter.textureset.TextureSet.from_name(\"TextureSetName\")\n\n# Show the resolution of the Texture Set:\nresolution = my_texture_set.get_resolution()\nprint(\"The resolution is {0}x{1}\".format(resolution.width, resolution.height))\n\n# Change the resolution of the Texture Set:\nmy_texture_set.set_resolution(substance_painter.textureset.Resolution(512, 512))\n\n# Show information about layering:\nif my_texture_set.is_layered_material():\n    print(\"{0} is a layered material\".format(my_texture_set.name()))\n\n    # Get the stack called \"Mask1\" from the Texture Set:\n    mask_stack = my_texture_set.get_stack(\"Mask1\")\n\n    # Print \"TextureSetName/Mask1\":\n    print(mask_stack)\n\nelse:\n    print(\"{0} is not a layered material\".format(my_texture_set.name()))\n\n# Show information about UV Tiles:\nif my_texture_set.has_uv_tiles():\n    print(\"{0} has UV Tiles:\".format(my_texture_set.name()))\n    for tile in my_texture_set.all_uv_tiles():\n        print(\"Tile {0} {1}\".format(tile.u, tile.v))\n\n# List all the stacks of the Texture Set \"TextureSetName\":\nfor stack in my_texture_set.all_stacks():\n    print(stack)\n\n# Query ambiant occlusion Mesh map of the Texture Set \"TextureSetName\":\nusage = substance_painter.textureset.MeshMapUsage.AO\nmeshMapResource = my_texture_set.get_mesh_map_resource(usage)\n\nif meshMapResource is None :\n    print(\"{0} does not have a Mesh map defined for usage {1}\"\n        .format(my_texture_set.name(), usage))\nelse:\n    print(\"{0} uses {1} Mesh map for usage {2}\"\n        .format(my_texture_set.name(), meshMapResource, usage))\n\n# Unset ambiant occlusion Mesh map of the Texture Set \"TextureSetName\":\nmy_texture_set.set_mesh_map_resource(usage, None)\n\n`}</code></pre>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}><inlineCode parentName=\"a\">{`Stack`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><inlineCode parentName=\"a\">{`UVTile`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><inlineCode parentName=\"a\">{`MeshMapUsage`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/go/painter-texture-set\"\n      }}>{`Texture Set documentation`}</a>{`.`}</p>\n    <p><em parentName=\"p\">{`static`}</em>{` from_name(`}<em parentName=\"p\">{`texture_set_name: str`}</em>{`)\nGet the Texture Set from its name.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`texture_set_name`}</strong>{` (`}<em parentName=\"p\">{`str`}</em>{`) – The name of the Texture Set.`}</p>\n    <p>{`Note`}</p>\n    <p>{`The Texture Set name is case sensitive.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TypeError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`texture_set_name`}</inlineCode>{` is missing or not a string.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`texture_set_name`}</inlineCode>{` is empty.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If there is no Texture Set with the name `}<inlineCode parentName=\"li\">{`texture_set_name`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`name() → str\nGet the Texture Set name.`}</p>\n    <p>{`Returns:\nThe name of the Texture Set.`}</p>\n    <p>{`Return type:\nstr`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`is_layered_material() → bool\nQuery if this Texture Set uses material layering.`}</p>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the Texture Set uses material layering, `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`all_stacks() → List[`}<a parentName=\"p\" {...{\n        \"href\": \"stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}>{`Stack`}</a>{`]\nList all the stacks from this Texture Set.`}</p>\n    <p>{`Returns:\nAll the stacks of this Texture Set.`}</p>\n    <p>{`Return type:\nlist[`}<a parentName=\"p\" {...{\n        \"href\": \"stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}>{`Stack`}</a>{`]`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.get_stack\",\n        \"title\": \"substance_painter.textureset.TextureSet.get_stack\"\n      }}><inlineCode parentName=\"a\">{`TextureSet.get_stack()`}</inlineCode></a>{`.`}</p>\n    <p>{`get_stack(`}<em parentName=\"p\">{`stack_name: str = ''`}</em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}>{`Stack`}</a>{`\nGet a stack of this Texture Set from its name.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`stack_name`}</strong>{` (`}<em parentName=\"p\">{`str`}</em>{`) – The stack name.\nLeave empty if the Texture Set does not use material layering.`}</p>\n    <p>{`Note`}</p>\n    <p>{`The stack name is case sensitive.`}</p>\n    <p>{`Returns:\nThe stack.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"stack.html#substance_painter.textureset.Stack\",\n        \"title\": \"substance_painter.textureset.Stack\"\n      }}>{`Stack`}</a></p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.all_stacks\",\n        \"title\": \"substance_painter.textureset.TextureSet.all_stacks\"\n      }}><inlineCode parentName=\"a\">{`TextureSet.all_stacks()`}</inlineCode></a>{`.`}</p>\n    <p>{`get_resolution() → `}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}>{`Resolution`}</a>{`\nGet the Texture Set resolution.`}</p>\n    <p>{`Returns:\nThe resolution of this Texture Set in pixels.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}>{`Resolution`}</a></p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.set_resolution\",\n        \"title\": \"substance_painter.textureset.TextureSet.set_resolution\"\n      }}><inlineCode parentName=\"a\">{`TextureSet.set_resolution()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.set_resolutions\",\n        \"title\": \"substance_painter.textureset.set_resolutions\"\n      }}><inlineCode parentName=\"a\">{`set_resolutions()`}</inlineCode></a>{`.`}</p>\n    <p>{`set_resolution(`}<em parentName=\"p\">{`new_resolution: `}<a parentName=\"em\" {...{\n          \"href\": \"index.html#substance_painter.textureset.Resolution\",\n          \"title\": \"substance_painter.textureset.Resolution\"\n        }}>{`Resolution`}</a></em>{`)\nSet the resolution of the Texture Set.`}</p>\n    <p>{`See resolution restrictions: `}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}><inlineCode parentName=\"a\">{`Resolution`}</inlineCode></a>{`.`}</p>\n    <p>{`Note`}</p>\n    <p>{`For any Texture Set, you can find its accepted resolutions in the\n“Texture Set Settings” window, in the “Size” menu.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`new_resolution`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}><em parentName=\"a\">{`Resolution`}</em></a>{`) – The new resolution for this Texture Set.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance 3D Painter has not started all its services yet.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If `}<inlineCode parentName=\"li\">{`new_resolution`}</inlineCode>{` is not a valid resolution.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the Texture Set is invalid.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.get_resolution\",\n        \"title\": \"substance_painter.textureset.TextureSet.get_resolution\"\n      }}><inlineCode parentName=\"a\">{`TextureSet.get_resolution()`}</inlineCode></a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.set_resolutions\",\n        \"title\": \"substance_painter.textureset.set_resolutions\"\n      }}><inlineCode parentName=\"a\">{`set_resolutions()`}</inlineCode></a>{`.`}</p>\n    <p>{`has_uv_tiles() → bool\nCheck if the Texture Set uses the UV Tiles workflow.`}</p>\n    <p>{`Returns:\n`}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` if the Texture Set uses the UV Tiles workflow, `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` otherwise.`}</p>\n    <p>{`Return type:\nbool`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.all_uv_tiles\",\n        \"title\": \"substance_painter.textureset.TextureSet.all_uv_tiles\"\n      }}><inlineCode parentName=\"a\">{`all_uv_tiles()`}</inlineCode></a></p>\n    <p>{`uv_tile(`}<em parentName=\"p\">{`u_coord: int`}</em>{`, `}<em parentName=\"p\">{`v_coord: int`}</em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`\nGet the Texture Set UV Tile at (u, v) coordinates.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`u_coord`}</strong>{` (`}<em parentName=\"li\">{`int`}</em>{`) – The u coordinate of the UV Tile.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`v_coord`}</strong>{` (`}<em parentName=\"li\">{`int`}</em>{`) – The v coordinate of the UV Tile.`}</li>\n    </ul>\n    <p>{`Returns:\nThe Texture Set UV Tile at (u, v) coordinate.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a></p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`all_uv_tiles() → List[`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`]\nGet the list of the Texture Set UV Tiles, ordered by U then V coordinates.`}</p>\n    <p>{`Returns:\nList of the Texture Set UV Tiles, ordered by U then V coordinates.`}</p>\n    <p>{`Return type:\n`}<em parentName=\"p\">{`List`}</em>{`[`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`]`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#substance_painter.textureset.TextureSet.has_uv_tiles\",\n        \"title\": \"substance_painter.textureset.TextureSet.has_uv_tiles\"\n      }}><inlineCode parentName=\"a\">{`has_uv_tiles()`}</inlineCode></a></p>\n    <p>{`get_uvtiles_resolution() → Dict[`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}>{`Resolution`}</a>{`]\nGet all UV Tiles that have a different resolution from the Texture Set, associated\nto their effective resolution.`}</p>\n    <p>{`Returns:\nThe dictionary of uvtiles and their associated resolution.`}</p>\n    <p>{`Return type:\n`}<em parentName=\"p\">{`Dict`}</em>{`[`}<a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}>{`UVTile`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}>{`Resolution`}</a>{`]`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile.get_resolution\",\n        \"title\": \"substance_painter.textureset.UVTile.get_resolution\"\n      }}><inlineCode parentName=\"a\">{`UVTile.get_resolution()`}</inlineCode></a></p>\n    <p>{`set_uvtiles_resolution(`}<em parentName=\"p\">{`resolutions: Dict[`}<a parentName=\"em\" {...{\n          \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}>{`UVTile`}</a>{`, `}<a parentName=\"em\" {...{\n          \"href\": \"index.html#substance_painter.textureset.Resolution\",\n          \"title\": \"substance_painter.textureset.Resolution\"\n        }}>{`Resolution`}</a>{`]`}</em>{`)\nSet the resolution of the given UV Tiles to the associated resolution.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`resolutions`}</strong>{` (`}<em parentName=\"p\">{`Dict**[`}</em><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><em parentName=\"a\">{`UVTile`}</em></a><em parentName=\"p\">{`,`}</em>{` `}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.Resolution\",\n        \"title\": \"substance_painter.textureset.Resolution\"\n      }}><em parentName=\"a\">{`Resolution`}</em></a><em parentName=\"p\">{`]`}</em>{`) – The dictionary of UV Tiles\nand their associated resolution.`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile.set_resolution\",\n        \"title\": \"substance_painter.textureset.UVTile.set_resolution\"\n      }}><inlineCode parentName=\"a\">{`UVTile.set_resolution()`}</inlineCode></a></p>\n    <p>{`reset_uvtiles_resolution(`}<em parentName=\"p\">{`uvtiles: List[`}<a parentName=\"em\" {...{\n          \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n          \"title\": \"substance_painter.textureset.UVTile\"\n        }}>{`UVTile`}</a>{`]`}</em>{`)\nReset the resolution of the given UV Tiles to the parent Texture Set’s resolution.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`uvtiles`}</strong>{` (`}<em parentName=\"p\">{`List**[`}</em><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile\",\n        \"title\": \"substance_painter.textureset.UVTile\"\n      }}><em parentName=\"a\">{`UVTile`}</em></a><em parentName=\"p\">{`]`}</em>{`) – The list of UV Tiles to be reset.`}</p>\n    <p>{`Raises:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n        \"title\": \"substance_painter.exception.ProjectError\"\n      }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</p>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile.reset_resolution\",\n        \"title\": \"substance_painter.textureset.UVTile.reset_resolution\"\n      }}><inlineCode parentName=\"a\">{`UVTile.reset_resolution()`}</inlineCode></a></p>\n    <p>{`all_mesh_names() → List`}{`[str]`}{`\nGet the list of meshes of the Texture Set.\nWhen using UV Tiles, the result is the union of the mesh names of every UV Tiles.`}</p>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ProjectError\",\n          \"title\": \"substance_painter.exception.ProjectError\"\n        }}><strong parentName=\"a\">{`ProjectError`}</strong></a>{` – If no project is opened.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ServiceNotFoundError\",\n          \"title\": \"substance_painter.exception.ServiceNotFoundError\"\n        }}><strong parentName=\"a\">{`ServiceNotFoundError`}</strong></a>{` – If Substance Painter has not started all its services yet.`}</li>\n    </ul>\n    <p>{`See also`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"uvtile.html#substance_painter.textureset.UVTile.all_mesh_names\",\n        \"title\": \"substance_painter.textureset.UVTile.all_mesh_names\"\n      }}><inlineCode parentName=\"a\">{`UVTile.all_mesh_names()`}</inlineCode></a></p>\n    <p>{`get_mesh_map_resource(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`) → `}<a parentName=\"p\" {...{\n        \"href\": \"../resource.html#substance_painter.resource.ResourceID\",\n        \"title\": \"substance_painter.resource.ResourceID\"\n      }}>{`ResourceID`}</a>{` | None\nQuery the Mesh map for the given usage of the Texture Set.`}</p>\n    <p>{`Parameters:\n`}<strong parentName=\"p\">{`usage`}</strong>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"index.html#substance_painter.textureset.MeshMapUsage\",\n        \"title\": \"substance_painter.textureset.MeshMapUsage\"\n      }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – Which Mesh map usage is queried.`}</p>\n    <p>{`Returns:\nThe Mesh map resource or None.`}</p>\n    <p>{`Return type:\n`}<a parentName=\"p\" {...{\n        \"href\": \"../resource.html#substance_painter.resource.ResourceID\",\n        \"title\": \"substance_painter.resource.ResourceID\"\n      }}>{`ResourceID`}</a></p>\n    <p>{`set_mesh_map_resource(`}<em parentName=\"p\">{`usage: `}<a parentName=\"em\" {...{\n          \"href\": \"index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}>{`MeshMapUsage`}</a></em>{`, `}<em parentName=\"p\">{`new_mesh_map: `}<a parentName=\"em\" {...{\n          \"href\": \"../resource.html#substance_painter.resource.ResourceID\",\n          \"title\": \"substance_painter.resource.ResourceID\"\n        }}>{`ResourceID`}</a>{` | None`}</em>{`) → None\nReplace the Mesh map for the given usage of the Texture Set.`}</p>\n    <p>{`Parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`usage`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"index.html#substance_painter.textureset.MeshMapUsage\",\n          \"title\": \"substance_painter.textureset.MeshMapUsage\"\n        }}><em parentName=\"a\">{`MeshMapUsage`}</em></a>{`) – Which Mesh map usage to replace.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`new_mesh_map`}</strong>{` (`}<a parentName=\"li\" {...{\n          \"href\": \"../resource.html#substance_painter.resource.ResourceID\",\n          \"title\": \"substance_painter.resource.ResourceID\"\n        }}><em parentName=\"a\">{`ResourceID`}</em></a><em parentName=\"li\">{`,`}</em>{` `}<em parentName=\"li\">{`optional`}</em>{`) – The new Mesh map or None to unset.`}</li>\n    </ul>\n    <p>{`Raises:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../exception.html#substance_painter.exception.ResourceNotFoundError\",\n          \"title\": \"substance_painter.exception.ResourceNotFoundError\"\n        }}><strong parentName=\"a\">{`ResourceNotFoundError`}</strong></a>{` – If the resource `}<inlineCode parentName=\"li\">{`new_mesh_map`}</inlineCode>{` is not found or is not of type\nIMAGE.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValueError`}</strong>{` – If the resource is already used for another Mesh map usage for the\nTexture Set.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}